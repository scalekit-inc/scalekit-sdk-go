// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/auditlogs/auditlogs.proto

package auditlogsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	auditlogs "github.com/scalekit-inc/scalekit-sdk-go/v2/pkg/grpc/scalekit/v1/auditlogs"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuditLogsServiceName is the fully-qualified name of the AuditLogsService service.
	AuditLogsServiceName = "scalekit.v1.auditlogs.AuditLogsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditLogsServiceListAuthRequestsProcedure is the fully-qualified name of the AuditLogsService's
	// ListAuthRequests RPC.
	AuditLogsServiceListAuthRequestsProcedure = "/scalekit.v1.auditlogs.AuditLogsService/ListAuthRequests"
)

// AuditLogsServiceClient is a client for the scalekit.v1.auditlogs.AuditLogsService service.
type AuditLogsServiceClient interface {
	ListAuthRequests(context.Context, *connect.Request[auditlogs.ListAuthLogRequest]) (*connect.Response[auditlogs.ListAuthLogResponse], error)
}

// NewAuditLogsServiceClient constructs a client for the scalekit.v1.auditlogs.AuditLogsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditLogsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuditLogsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	auditLogsServiceMethods := auditlogs.File_scalekit_v1_auditlogs_auditlogs_proto.Services().ByName("AuditLogsService").Methods()
	return &auditLogsServiceClient{
		listAuthRequests: connect.NewClient[auditlogs.ListAuthLogRequest, auditlogs.ListAuthLogResponse](
			httpClient,
			baseURL+AuditLogsServiceListAuthRequestsProcedure,
			connect.WithSchema(auditLogsServiceMethods.ByName("ListAuthRequests")),
			connect.WithClientOptions(opts...),
		),
	}
}

// auditLogsServiceClient implements AuditLogsServiceClient.
type auditLogsServiceClient struct {
	listAuthRequests *connect.Client[auditlogs.ListAuthLogRequest, auditlogs.ListAuthLogResponse]
}

// ListAuthRequests calls scalekit.v1.auditlogs.AuditLogsService.ListAuthRequests.
func (c *auditLogsServiceClient) ListAuthRequests(ctx context.Context, req *connect.Request[auditlogs.ListAuthLogRequest]) (*connect.Response[auditlogs.ListAuthLogResponse], error) {
	return c.listAuthRequests.CallUnary(ctx, req)
}

// AuditLogsServiceHandler is an implementation of the scalekit.v1.auditlogs.AuditLogsService
// service.
type AuditLogsServiceHandler interface {
	ListAuthRequests(context.Context, *connect.Request[auditlogs.ListAuthLogRequest]) (*connect.Response[auditlogs.ListAuthLogResponse], error)
}

// NewAuditLogsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditLogsServiceHandler(svc AuditLogsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	auditLogsServiceMethods := auditlogs.File_scalekit_v1_auditlogs_auditlogs_proto.Services().ByName("AuditLogsService").Methods()
	auditLogsServiceListAuthRequestsHandler := connect.NewUnaryHandler(
		AuditLogsServiceListAuthRequestsProcedure,
		svc.ListAuthRequests,
		connect.WithSchema(auditLogsServiceMethods.ByName("ListAuthRequests")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.auditlogs.AuditLogsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditLogsServiceListAuthRequestsProcedure:
			auditLogsServiceListAuthRequestsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditLogsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditLogsServiceHandler struct{}

func (UnimplementedAuditLogsServiceHandler) ListAuthRequests(context.Context, *connect.Request[auditlogs.ListAuthLogRequest]) (*connect.Response[auditlogs.ListAuthLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auditlogs.AuditLogsService.ListAuthRequests is not implemented"))
}
