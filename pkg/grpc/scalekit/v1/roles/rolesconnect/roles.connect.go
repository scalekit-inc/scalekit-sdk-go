// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/roles/roles.proto

package rolesconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	roles "github.com/scalekit-inc/scalekit-sdk-go/v2/pkg/grpc/scalekit/v1/roles"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RolesServiceName is the fully-qualified name of the RolesService service.
	RolesServiceName = "scalekit.v1.roles.RolesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RolesServiceCreateRoleProcedure is the fully-qualified name of the RolesService's CreateRole RPC.
	RolesServiceCreateRoleProcedure = "/scalekit.v1.roles.RolesService/CreateRole"
	// RolesServiceUpdateRoleProcedure is the fully-qualified name of the RolesService's UpdateRole RPC.
	RolesServiceUpdateRoleProcedure = "/scalekit.v1.roles.RolesService/UpdateRole"
	// RolesServiceGetRoleProcedure is the fully-qualified name of the RolesService's GetRole RPC.
	RolesServiceGetRoleProcedure = "/scalekit.v1.roles.RolesService/GetRole"
	// RolesServiceListRolesProcedure is the fully-qualified name of the RolesService's ListRoles RPC.
	RolesServiceListRolesProcedure = "/scalekit.v1.roles.RolesService/ListRoles"
	// RolesServiceDeleteRoleProcedure is the fully-qualified name of the RolesService's DeleteRole RPC.
	RolesServiceDeleteRoleProcedure = "/scalekit.v1.roles.RolesService/DeleteRole"
	// RolesServiceCreateOrganizationRoleProcedure is the fully-qualified name of the RolesService's
	// CreateOrganizationRole RPC.
	RolesServiceCreateOrganizationRoleProcedure = "/scalekit.v1.roles.RolesService/CreateOrganizationRole"
	// RolesServiceUpdateOrganizationRoleProcedure is the fully-qualified name of the RolesService's
	// UpdateOrganizationRole RPC.
	RolesServiceUpdateOrganizationRoleProcedure = "/scalekit.v1.roles.RolesService/UpdateOrganizationRole"
	// RolesServiceGetOrganizationRoleProcedure is the fully-qualified name of the RolesService's
	// GetOrganizationRole RPC.
	RolesServiceGetOrganizationRoleProcedure = "/scalekit.v1.roles.RolesService/GetOrganizationRole"
	// RolesServiceListOrganizationRolesProcedure is the fully-qualified name of the RolesService's
	// ListOrganizationRoles RPC.
	RolesServiceListOrganizationRolesProcedure = "/scalekit.v1.roles.RolesService/ListOrganizationRoles"
	// RolesServiceDeleteOrganizationRoleProcedure is the fully-qualified name of the RolesService's
	// DeleteOrganizationRole RPC.
	RolesServiceDeleteOrganizationRoleProcedure = "/scalekit.v1.roles.RolesService/DeleteOrganizationRole"
	// RolesServiceGetRoleUsersCountProcedure is the fully-qualified name of the RolesService's
	// GetRoleUsersCount RPC.
	RolesServiceGetRoleUsersCountProcedure = "/scalekit.v1.roles.RolesService/GetRoleUsersCount"
	// RolesServiceGetOrganizationRoleUsersCountProcedure is the fully-qualified name of the
	// RolesService's GetOrganizationRoleUsersCount RPC.
	RolesServiceGetOrganizationRoleUsersCountProcedure = "/scalekit.v1.roles.RolesService/GetOrganizationRoleUsersCount"
	// RolesServiceUpdateDefaultRolesProcedure is the fully-qualified name of the RolesService's
	// UpdateDefaultRoles RPC.
	RolesServiceUpdateDefaultRolesProcedure = "/scalekit.v1.roles.RolesService/UpdateDefaultRoles"
	// RolesServiceUpdateDefaultOrganizationRolesProcedure is the fully-qualified name of the
	// RolesService's UpdateDefaultOrganizationRoles RPC.
	RolesServiceUpdateDefaultOrganizationRolesProcedure = "/scalekit.v1.roles.RolesService/UpdateDefaultOrganizationRoles"
	// RolesServiceListDependentRolesProcedure is the fully-qualified name of the RolesService's
	// ListDependentRoles RPC.
	RolesServiceListDependentRolesProcedure = "/scalekit.v1.roles.RolesService/ListDependentRoles"
	// RolesServiceDeleteRoleBaseProcedure is the fully-qualified name of the RolesService's
	// DeleteRoleBase RPC.
	RolesServiceDeleteRoleBaseProcedure = "/scalekit.v1.roles.RolesService/DeleteRoleBase"
	// RolesServiceDeleteOrganizationRoleBaseProcedure is the fully-qualified name of the RolesService's
	// DeleteOrganizationRoleBase RPC.
	RolesServiceDeleteOrganizationRoleBaseProcedure = "/scalekit.v1.roles.RolesService/DeleteOrganizationRoleBase"
	// RolesServiceCreatePermissionProcedure is the fully-qualified name of the RolesService's
	// CreatePermission RPC.
	RolesServiceCreatePermissionProcedure = "/scalekit.v1.roles.RolesService/CreatePermission"
	// RolesServiceGetPermissionProcedure is the fully-qualified name of the RolesService's
	// GetPermission RPC.
	RolesServiceGetPermissionProcedure = "/scalekit.v1.roles.RolesService/GetPermission"
	// RolesServiceUpdatePermissionProcedure is the fully-qualified name of the RolesService's
	// UpdatePermission RPC.
	RolesServiceUpdatePermissionProcedure = "/scalekit.v1.roles.RolesService/UpdatePermission"
	// RolesServiceListPermissionsProcedure is the fully-qualified name of the RolesService's
	// ListPermissions RPC.
	RolesServiceListPermissionsProcedure = "/scalekit.v1.roles.RolesService/ListPermissions"
	// RolesServiceDeletePermissionProcedure is the fully-qualified name of the RolesService's
	// DeletePermission RPC.
	RolesServiceDeletePermissionProcedure = "/scalekit.v1.roles.RolesService/DeletePermission"
	// RolesServiceListRolePermissionsProcedure is the fully-qualified name of the RolesService's
	// ListRolePermissions RPC.
	RolesServiceListRolePermissionsProcedure = "/scalekit.v1.roles.RolesService/ListRolePermissions"
	// RolesServiceAddPermissionsToRoleProcedure is the fully-qualified name of the RolesService's
	// AddPermissionsToRole RPC.
	RolesServiceAddPermissionsToRoleProcedure = "/scalekit.v1.roles.RolesService/AddPermissionsToRole"
	// RolesServiceRemovePermissionFromRoleProcedure is the fully-qualified name of the RolesService's
	// RemovePermissionFromRole RPC.
	RolesServiceRemovePermissionFromRoleProcedure = "/scalekit.v1.roles.RolesService/RemovePermissionFromRole"
	// RolesServiceListEffectiveRolePermissionsProcedure is the fully-qualified name of the
	// RolesService's ListEffectiveRolePermissions RPC.
	RolesServiceListEffectiveRolePermissionsProcedure = "/scalekit.v1.roles.RolesService/ListEffectiveRolePermissions"
)

// RolesServiceClient is a client for the scalekit.v1.roles.RolesService service.
type RolesServiceClient interface {
	CreateRole(context.Context, *connect.Request[roles.CreateRoleRequest]) (*connect.Response[roles.CreateRoleResponse], error)
	UpdateRole(context.Context, *connect.Request[roles.UpdateRoleRequest]) (*connect.Response[roles.UpdateRoleResponse], error)
	GetRole(context.Context, *connect.Request[roles.GetRoleRequest]) (*connect.Response[roles.GetRoleResponse], error)
	ListRoles(context.Context, *connect.Request[roles.ListRolesRequest]) (*connect.Response[roles.ListRolesResponse], error)
	DeleteRole(context.Context, *connect.Request[roles.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error)
	CreateOrganizationRole(context.Context, *connect.Request[roles.CreateOrganizationRoleRequest]) (*connect.Response[roles.CreateOrganizationRoleResponse], error)
	UpdateOrganizationRole(context.Context, *connect.Request[roles.UpdateOrganizationRoleRequest]) (*connect.Response[roles.UpdateOrganizationRoleResponse], error)
	GetOrganizationRole(context.Context, *connect.Request[roles.GetOrganizationRoleRequest]) (*connect.Response[roles.GetOrganizationRoleResponse], error)
	ListOrganizationRoles(context.Context, *connect.Request[roles.ListOrganizationRolesRequest]) (*connect.Response[roles.ListOrganizationRolesResponse], error)
	DeleteOrganizationRole(context.Context, *connect.Request[roles.DeleteOrganizationRoleRequest]) (*connect.Response[emptypb.Empty], error)
	GetRoleUsersCount(context.Context, *connect.Request[roles.GetRoleUsersCountRequest]) (*connect.Response[roles.GetRoleUsersCountResponse], error)
	GetOrganizationRoleUsersCount(context.Context, *connect.Request[roles.GetOrganizationRoleUsersCountRequest]) (*connect.Response[roles.GetOrganizationRoleUsersCountResponse], error)
	UpdateDefaultRoles(context.Context, *connect.Request[roles.UpdateDefaultRolesRequest]) (*connect.Response[roles.UpdateDefaultRolesResponse], error)
	UpdateDefaultOrganizationRoles(context.Context, *connect.Request[roles.UpdateDefaultOrganizationRolesRequest]) (*connect.Response[roles.UpdateDefaultOrganizationRolesResponse], error)
	// Role Hierarchy Management RPCs
	ListDependentRoles(context.Context, *connect.Request[roles.ListDependentRolesRequest]) (*connect.Response[roles.ListDependentRolesResponse], error)
	DeleteRoleBase(context.Context, *connect.Request[roles.DeleteRoleBaseRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteOrganizationRoleBase(context.Context, *connect.Request[roles.DeleteOrganizationRoleBaseRequest]) (*connect.Response[emptypb.Empty], error)
	// Permission Management RPCs
	CreatePermission(context.Context, *connect.Request[roles.CreatePermissionRequest]) (*connect.Response[roles.CreatePermissionResponse], error)
	GetPermission(context.Context, *connect.Request[roles.GetPermissionRequest]) (*connect.Response[roles.GetPermissionResponse], error)
	UpdatePermission(context.Context, *connect.Request[roles.UpdatePermissionRequest]) (*connect.Response[roles.UpdatePermissionResponse], error)
	ListPermissions(context.Context, *connect.Request[roles.ListPermissionsRequest]) (*connect.Response[roles.ListPermissionsResponse], error)
	DeletePermission(context.Context, *connect.Request[roles.DeletePermissionRequest]) (*connect.Response[emptypb.Empty], error)
	// Role-Permission Management RPCs
	ListRolePermissions(context.Context, *connect.Request[roles.ListRolePermissionsRequest]) (*connect.Response[roles.ListRolePermissionsResponse], error)
	AddPermissionsToRole(context.Context, *connect.Request[roles.AddPermissionsToRoleRequest]) (*connect.Response[roles.AddPermissionsToRoleResponse], error)
	RemovePermissionFromRole(context.Context, *connect.Request[roles.RemovePermissionFromRoleRequest]) (*connect.Response[emptypb.Empty], error)
	ListEffectiveRolePermissions(context.Context, *connect.Request[roles.ListEffectiveRolePermissionsRequest]) (*connect.Response[roles.ListEffectiveRolePermissionsResponse], error)
}

// NewRolesServiceClient constructs a client for the scalekit.v1.roles.RolesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRolesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RolesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	rolesServiceMethods := roles.File_scalekit_v1_roles_roles_proto.Services().ByName("RolesService").Methods()
	return &rolesServiceClient{
		createRole: connect.NewClient[roles.CreateRoleRequest, roles.CreateRoleResponse](
			httpClient,
			baseURL+RolesServiceCreateRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[roles.UpdateRoleRequest, roles.UpdateRoleResponse](
			httpClient,
			baseURL+RolesServiceUpdateRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[roles.GetRoleRequest, roles.GetRoleResponse](
			httpClient,
			baseURL+RolesServiceGetRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("GetRole")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[roles.ListRolesRequest, roles.ListRolesResponse](
			httpClient,
			baseURL+RolesServiceListRolesProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[roles.DeleteRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+RolesServiceDeleteRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		createOrganizationRole: connect.NewClient[roles.CreateOrganizationRoleRequest, roles.CreateOrganizationRoleResponse](
			httpClient,
			baseURL+RolesServiceCreateOrganizationRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("CreateOrganizationRole")),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationRole: connect.NewClient[roles.UpdateOrganizationRoleRequest, roles.UpdateOrganizationRoleResponse](
			httpClient,
			baseURL+RolesServiceUpdateOrganizationRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("UpdateOrganizationRole")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationRole: connect.NewClient[roles.GetOrganizationRoleRequest, roles.GetOrganizationRoleResponse](
			httpClient,
			baseURL+RolesServiceGetOrganizationRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("GetOrganizationRole")),
			connect.WithClientOptions(opts...),
		),
		listOrganizationRoles: connect.NewClient[roles.ListOrganizationRolesRequest, roles.ListOrganizationRolesResponse](
			httpClient,
			baseURL+RolesServiceListOrganizationRolesProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("ListOrganizationRoles")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationRole: connect.NewClient[roles.DeleteOrganizationRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+RolesServiceDeleteOrganizationRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("DeleteOrganizationRole")),
			connect.WithClientOptions(opts...),
		),
		getRoleUsersCount: connect.NewClient[roles.GetRoleUsersCountRequest, roles.GetRoleUsersCountResponse](
			httpClient,
			baseURL+RolesServiceGetRoleUsersCountProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("GetRoleUsersCount")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationRoleUsersCount: connect.NewClient[roles.GetOrganizationRoleUsersCountRequest, roles.GetOrganizationRoleUsersCountResponse](
			httpClient,
			baseURL+RolesServiceGetOrganizationRoleUsersCountProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("GetOrganizationRoleUsersCount")),
			connect.WithClientOptions(opts...),
		),
		updateDefaultRoles: connect.NewClient[roles.UpdateDefaultRolesRequest, roles.UpdateDefaultRolesResponse](
			httpClient,
			baseURL+RolesServiceUpdateDefaultRolesProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("UpdateDefaultRoles")),
			connect.WithClientOptions(opts...),
		),
		updateDefaultOrganizationRoles: connect.NewClient[roles.UpdateDefaultOrganizationRolesRequest, roles.UpdateDefaultOrganizationRolesResponse](
			httpClient,
			baseURL+RolesServiceUpdateDefaultOrganizationRolesProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("UpdateDefaultOrganizationRoles")),
			connect.WithClientOptions(opts...),
		),
		listDependentRoles: connect.NewClient[roles.ListDependentRolesRequest, roles.ListDependentRolesResponse](
			httpClient,
			baseURL+RolesServiceListDependentRolesProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("ListDependentRoles")),
			connect.WithClientOptions(opts...),
		),
		deleteRoleBase: connect.NewClient[roles.DeleteRoleBaseRequest, emptypb.Empty](
			httpClient,
			baseURL+RolesServiceDeleteRoleBaseProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("DeleteRoleBase")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationRoleBase: connect.NewClient[roles.DeleteOrganizationRoleBaseRequest, emptypb.Empty](
			httpClient,
			baseURL+RolesServiceDeleteOrganizationRoleBaseProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("DeleteOrganizationRoleBase")),
			connect.WithClientOptions(opts...),
		),
		createPermission: connect.NewClient[roles.CreatePermissionRequest, roles.CreatePermissionResponse](
			httpClient,
			baseURL+RolesServiceCreatePermissionProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("CreatePermission")),
			connect.WithClientOptions(opts...),
		),
		getPermission: connect.NewClient[roles.GetPermissionRequest, roles.GetPermissionResponse](
			httpClient,
			baseURL+RolesServiceGetPermissionProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("GetPermission")),
			connect.WithClientOptions(opts...),
		),
		updatePermission: connect.NewClient[roles.UpdatePermissionRequest, roles.UpdatePermissionResponse](
			httpClient,
			baseURL+RolesServiceUpdatePermissionProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("UpdatePermission")),
			connect.WithClientOptions(opts...),
		),
		listPermissions: connect.NewClient[roles.ListPermissionsRequest, roles.ListPermissionsResponse](
			httpClient,
			baseURL+RolesServiceListPermissionsProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("ListPermissions")),
			connect.WithClientOptions(opts...),
		),
		deletePermission: connect.NewClient[roles.DeletePermissionRequest, emptypb.Empty](
			httpClient,
			baseURL+RolesServiceDeletePermissionProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("DeletePermission")),
			connect.WithClientOptions(opts...),
		),
		listRolePermissions: connect.NewClient[roles.ListRolePermissionsRequest, roles.ListRolePermissionsResponse](
			httpClient,
			baseURL+RolesServiceListRolePermissionsProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("ListRolePermissions")),
			connect.WithClientOptions(opts...),
		),
		addPermissionsToRole: connect.NewClient[roles.AddPermissionsToRoleRequest, roles.AddPermissionsToRoleResponse](
			httpClient,
			baseURL+RolesServiceAddPermissionsToRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("AddPermissionsToRole")),
			connect.WithClientOptions(opts...),
		),
		removePermissionFromRole: connect.NewClient[roles.RemovePermissionFromRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+RolesServiceRemovePermissionFromRoleProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("RemovePermissionFromRole")),
			connect.WithClientOptions(opts...),
		),
		listEffectiveRolePermissions: connect.NewClient[roles.ListEffectiveRolePermissionsRequest, roles.ListEffectiveRolePermissionsResponse](
			httpClient,
			baseURL+RolesServiceListEffectiveRolePermissionsProcedure,
			connect.WithSchema(rolesServiceMethods.ByName("ListEffectiveRolePermissions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// rolesServiceClient implements RolesServiceClient.
type rolesServiceClient struct {
	createRole                     *connect.Client[roles.CreateRoleRequest, roles.CreateRoleResponse]
	updateRole                     *connect.Client[roles.UpdateRoleRequest, roles.UpdateRoleResponse]
	getRole                        *connect.Client[roles.GetRoleRequest, roles.GetRoleResponse]
	listRoles                      *connect.Client[roles.ListRolesRequest, roles.ListRolesResponse]
	deleteRole                     *connect.Client[roles.DeleteRoleRequest, emptypb.Empty]
	createOrganizationRole         *connect.Client[roles.CreateOrganizationRoleRequest, roles.CreateOrganizationRoleResponse]
	updateOrganizationRole         *connect.Client[roles.UpdateOrganizationRoleRequest, roles.UpdateOrganizationRoleResponse]
	getOrganizationRole            *connect.Client[roles.GetOrganizationRoleRequest, roles.GetOrganizationRoleResponse]
	listOrganizationRoles          *connect.Client[roles.ListOrganizationRolesRequest, roles.ListOrganizationRolesResponse]
	deleteOrganizationRole         *connect.Client[roles.DeleteOrganizationRoleRequest, emptypb.Empty]
	getRoleUsersCount              *connect.Client[roles.GetRoleUsersCountRequest, roles.GetRoleUsersCountResponse]
	getOrganizationRoleUsersCount  *connect.Client[roles.GetOrganizationRoleUsersCountRequest, roles.GetOrganizationRoleUsersCountResponse]
	updateDefaultRoles             *connect.Client[roles.UpdateDefaultRolesRequest, roles.UpdateDefaultRolesResponse]
	updateDefaultOrganizationRoles *connect.Client[roles.UpdateDefaultOrganizationRolesRequest, roles.UpdateDefaultOrganizationRolesResponse]
	listDependentRoles             *connect.Client[roles.ListDependentRolesRequest, roles.ListDependentRolesResponse]
	deleteRoleBase                 *connect.Client[roles.DeleteRoleBaseRequest, emptypb.Empty]
	deleteOrganizationRoleBase     *connect.Client[roles.DeleteOrganizationRoleBaseRequest, emptypb.Empty]
	createPermission               *connect.Client[roles.CreatePermissionRequest, roles.CreatePermissionResponse]
	getPermission                  *connect.Client[roles.GetPermissionRequest, roles.GetPermissionResponse]
	updatePermission               *connect.Client[roles.UpdatePermissionRequest, roles.UpdatePermissionResponse]
	listPermissions                *connect.Client[roles.ListPermissionsRequest, roles.ListPermissionsResponse]
	deletePermission               *connect.Client[roles.DeletePermissionRequest, emptypb.Empty]
	listRolePermissions            *connect.Client[roles.ListRolePermissionsRequest, roles.ListRolePermissionsResponse]
	addPermissionsToRole           *connect.Client[roles.AddPermissionsToRoleRequest, roles.AddPermissionsToRoleResponse]
	removePermissionFromRole       *connect.Client[roles.RemovePermissionFromRoleRequest, emptypb.Empty]
	listEffectiveRolePermissions   *connect.Client[roles.ListEffectiveRolePermissionsRequest, roles.ListEffectiveRolePermissionsResponse]
}

// CreateRole calls scalekit.v1.roles.RolesService.CreateRole.
func (c *rolesServiceClient) CreateRole(ctx context.Context, req *connect.Request[roles.CreateRoleRequest]) (*connect.Response[roles.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// UpdateRole calls scalekit.v1.roles.RolesService.UpdateRole.
func (c *rolesServiceClient) UpdateRole(ctx context.Context, req *connect.Request[roles.UpdateRoleRequest]) (*connect.Response[roles.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// GetRole calls scalekit.v1.roles.RolesService.GetRole.
func (c *rolesServiceClient) GetRole(ctx context.Context, req *connect.Request[roles.GetRoleRequest]) (*connect.Response[roles.GetRoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// ListRoles calls scalekit.v1.roles.RolesService.ListRoles.
func (c *rolesServiceClient) ListRoles(ctx context.Context, req *connect.Request[roles.ListRolesRequest]) (*connect.Response[roles.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// DeleteRole calls scalekit.v1.roles.RolesService.DeleteRole.
func (c *rolesServiceClient) DeleteRole(ctx context.Context, req *connect.Request[roles.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// CreateOrganizationRole calls scalekit.v1.roles.RolesService.CreateOrganizationRole.
func (c *rolesServiceClient) CreateOrganizationRole(ctx context.Context, req *connect.Request[roles.CreateOrganizationRoleRequest]) (*connect.Response[roles.CreateOrganizationRoleResponse], error) {
	return c.createOrganizationRole.CallUnary(ctx, req)
}

// UpdateOrganizationRole calls scalekit.v1.roles.RolesService.UpdateOrganizationRole.
func (c *rolesServiceClient) UpdateOrganizationRole(ctx context.Context, req *connect.Request[roles.UpdateOrganizationRoleRequest]) (*connect.Response[roles.UpdateOrganizationRoleResponse], error) {
	return c.updateOrganizationRole.CallUnary(ctx, req)
}

// GetOrganizationRole calls scalekit.v1.roles.RolesService.GetOrganizationRole.
func (c *rolesServiceClient) GetOrganizationRole(ctx context.Context, req *connect.Request[roles.GetOrganizationRoleRequest]) (*connect.Response[roles.GetOrganizationRoleResponse], error) {
	return c.getOrganizationRole.CallUnary(ctx, req)
}

// ListOrganizationRoles calls scalekit.v1.roles.RolesService.ListOrganizationRoles.
func (c *rolesServiceClient) ListOrganizationRoles(ctx context.Context, req *connect.Request[roles.ListOrganizationRolesRequest]) (*connect.Response[roles.ListOrganizationRolesResponse], error) {
	return c.listOrganizationRoles.CallUnary(ctx, req)
}

// DeleteOrganizationRole calls scalekit.v1.roles.RolesService.DeleteOrganizationRole.
func (c *rolesServiceClient) DeleteOrganizationRole(ctx context.Context, req *connect.Request[roles.DeleteOrganizationRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteOrganizationRole.CallUnary(ctx, req)
}

// GetRoleUsersCount calls scalekit.v1.roles.RolesService.GetRoleUsersCount.
func (c *rolesServiceClient) GetRoleUsersCount(ctx context.Context, req *connect.Request[roles.GetRoleUsersCountRequest]) (*connect.Response[roles.GetRoleUsersCountResponse], error) {
	return c.getRoleUsersCount.CallUnary(ctx, req)
}

// GetOrganizationRoleUsersCount calls scalekit.v1.roles.RolesService.GetOrganizationRoleUsersCount.
func (c *rolesServiceClient) GetOrganizationRoleUsersCount(ctx context.Context, req *connect.Request[roles.GetOrganizationRoleUsersCountRequest]) (*connect.Response[roles.GetOrganizationRoleUsersCountResponse], error) {
	return c.getOrganizationRoleUsersCount.CallUnary(ctx, req)
}

// UpdateDefaultRoles calls scalekit.v1.roles.RolesService.UpdateDefaultRoles.
func (c *rolesServiceClient) UpdateDefaultRoles(ctx context.Context, req *connect.Request[roles.UpdateDefaultRolesRequest]) (*connect.Response[roles.UpdateDefaultRolesResponse], error) {
	return c.updateDefaultRoles.CallUnary(ctx, req)
}

// UpdateDefaultOrganizationRoles calls
// scalekit.v1.roles.RolesService.UpdateDefaultOrganizationRoles.
func (c *rolesServiceClient) UpdateDefaultOrganizationRoles(ctx context.Context, req *connect.Request[roles.UpdateDefaultOrganizationRolesRequest]) (*connect.Response[roles.UpdateDefaultOrganizationRolesResponse], error) {
	return c.updateDefaultOrganizationRoles.CallUnary(ctx, req)
}

// ListDependentRoles calls scalekit.v1.roles.RolesService.ListDependentRoles.
func (c *rolesServiceClient) ListDependentRoles(ctx context.Context, req *connect.Request[roles.ListDependentRolesRequest]) (*connect.Response[roles.ListDependentRolesResponse], error) {
	return c.listDependentRoles.CallUnary(ctx, req)
}

// DeleteRoleBase calls scalekit.v1.roles.RolesService.DeleteRoleBase.
func (c *rolesServiceClient) DeleteRoleBase(ctx context.Context, req *connect.Request[roles.DeleteRoleBaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRoleBase.CallUnary(ctx, req)
}

// DeleteOrganizationRoleBase calls scalekit.v1.roles.RolesService.DeleteOrganizationRoleBase.
func (c *rolesServiceClient) DeleteOrganizationRoleBase(ctx context.Context, req *connect.Request[roles.DeleteOrganizationRoleBaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteOrganizationRoleBase.CallUnary(ctx, req)
}

// CreatePermission calls scalekit.v1.roles.RolesService.CreatePermission.
func (c *rolesServiceClient) CreatePermission(ctx context.Context, req *connect.Request[roles.CreatePermissionRequest]) (*connect.Response[roles.CreatePermissionResponse], error) {
	return c.createPermission.CallUnary(ctx, req)
}

// GetPermission calls scalekit.v1.roles.RolesService.GetPermission.
func (c *rolesServiceClient) GetPermission(ctx context.Context, req *connect.Request[roles.GetPermissionRequest]) (*connect.Response[roles.GetPermissionResponse], error) {
	return c.getPermission.CallUnary(ctx, req)
}

// UpdatePermission calls scalekit.v1.roles.RolesService.UpdatePermission.
func (c *rolesServiceClient) UpdatePermission(ctx context.Context, req *connect.Request[roles.UpdatePermissionRequest]) (*connect.Response[roles.UpdatePermissionResponse], error) {
	return c.updatePermission.CallUnary(ctx, req)
}

// ListPermissions calls scalekit.v1.roles.RolesService.ListPermissions.
func (c *rolesServiceClient) ListPermissions(ctx context.Context, req *connect.Request[roles.ListPermissionsRequest]) (*connect.Response[roles.ListPermissionsResponse], error) {
	return c.listPermissions.CallUnary(ctx, req)
}

// DeletePermission calls scalekit.v1.roles.RolesService.DeletePermission.
func (c *rolesServiceClient) DeletePermission(ctx context.Context, req *connect.Request[roles.DeletePermissionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deletePermission.CallUnary(ctx, req)
}

// ListRolePermissions calls scalekit.v1.roles.RolesService.ListRolePermissions.
func (c *rolesServiceClient) ListRolePermissions(ctx context.Context, req *connect.Request[roles.ListRolePermissionsRequest]) (*connect.Response[roles.ListRolePermissionsResponse], error) {
	return c.listRolePermissions.CallUnary(ctx, req)
}

// AddPermissionsToRole calls scalekit.v1.roles.RolesService.AddPermissionsToRole.
func (c *rolesServiceClient) AddPermissionsToRole(ctx context.Context, req *connect.Request[roles.AddPermissionsToRoleRequest]) (*connect.Response[roles.AddPermissionsToRoleResponse], error) {
	return c.addPermissionsToRole.CallUnary(ctx, req)
}

// RemovePermissionFromRole calls scalekit.v1.roles.RolesService.RemovePermissionFromRole.
func (c *rolesServiceClient) RemovePermissionFromRole(ctx context.Context, req *connect.Request[roles.RemovePermissionFromRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removePermissionFromRole.CallUnary(ctx, req)
}

// ListEffectiveRolePermissions calls scalekit.v1.roles.RolesService.ListEffectiveRolePermissions.
func (c *rolesServiceClient) ListEffectiveRolePermissions(ctx context.Context, req *connect.Request[roles.ListEffectiveRolePermissionsRequest]) (*connect.Response[roles.ListEffectiveRolePermissionsResponse], error) {
	return c.listEffectiveRolePermissions.CallUnary(ctx, req)
}

// RolesServiceHandler is an implementation of the scalekit.v1.roles.RolesService service.
type RolesServiceHandler interface {
	CreateRole(context.Context, *connect.Request[roles.CreateRoleRequest]) (*connect.Response[roles.CreateRoleResponse], error)
	UpdateRole(context.Context, *connect.Request[roles.UpdateRoleRequest]) (*connect.Response[roles.UpdateRoleResponse], error)
	GetRole(context.Context, *connect.Request[roles.GetRoleRequest]) (*connect.Response[roles.GetRoleResponse], error)
	ListRoles(context.Context, *connect.Request[roles.ListRolesRequest]) (*connect.Response[roles.ListRolesResponse], error)
	DeleteRole(context.Context, *connect.Request[roles.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error)
	CreateOrganizationRole(context.Context, *connect.Request[roles.CreateOrganizationRoleRequest]) (*connect.Response[roles.CreateOrganizationRoleResponse], error)
	UpdateOrganizationRole(context.Context, *connect.Request[roles.UpdateOrganizationRoleRequest]) (*connect.Response[roles.UpdateOrganizationRoleResponse], error)
	GetOrganizationRole(context.Context, *connect.Request[roles.GetOrganizationRoleRequest]) (*connect.Response[roles.GetOrganizationRoleResponse], error)
	ListOrganizationRoles(context.Context, *connect.Request[roles.ListOrganizationRolesRequest]) (*connect.Response[roles.ListOrganizationRolesResponse], error)
	DeleteOrganizationRole(context.Context, *connect.Request[roles.DeleteOrganizationRoleRequest]) (*connect.Response[emptypb.Empty], error)
	GetRoleUsersCount(context.Context, *connect.Request[roles.GetRoleUsersCountRequest]) (*connect.Response[roles.GetRoleUsersCountResponse], error)
	GetOrganizationRoleUsersCount(context.Context, *connect.Request[roles.GetOrganizationRoleUsersCountRequest]) (*connect.Response[roles.GetOrganizationRoleUsersCountResponse], error)
	UpdateDefaultRoles(context.Context, *connect.Request[roles.UpdateDefaultRolesRequest]) (*connect.Response[roles.UpdateDefaultRolesResponse], error)
	UpdateDefaultOrganizationRoles(context.Context, *connect.Request[roles.UpdateDefaultOrganizationRolesRequest]) (*connect.Response[roles.UpdateDefaultOrganizationRolesResponse], error)
	// Role Hierarchy Management RPCs
	ListDependentRoles(context.Context, *connect.Request[roles.ListDependentRolesRequest]) (*connect.Response[roles.ListDependentRolesResponse], error)
	DeleteRoleBase(context.Context, *connect.Request[roles.DeleteRoleBaseRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteOrganizationRoleBase(context.Context, *connect.Request[roles.DeleteOrganizationRoleBaseRequest]) (*connect.Response[emptypb.Empty], error)
	// Permission Management RPCs
	CreatePermission(context.Context, *connect.Request[roles.CreatePermissionRequest]) (*connect.Response[roles.CreatePermissionResponse], error)
	GetPermission(context.Context, *connect.Request[roles.GetPermissionRequest]) (*connect.Response[roles.GetPermissionResponse], error)
	UpdatePermission(context.Context, *connect.Request[roles.UpdatePermissionRequest]) (*connect.Response[roles.UpdatePermissionResponse], error)
	ListPermissions(context.Context, *connect.Request[roles.ListPermissionsRequest]) (*connect.Response[roles.ListPermissionsResponse], error)
	DeletePermission(context.Context, *connect.Request[roles.DeletePermissionRequest]) (*connect.Response[emptypb.Empty], error)
	// Role-Permission Management RPCs
	ListRolePermissions(context.Context, *connect.Request[roles.ListRolePermissionsRequest]) (*connect.Response[roles.ListRolePermissionsResponse], error)
	AddPermissionsToRole(context.Context, *connect.Request[roles.AddPermissionsToRoleRequest]) (*connect.Response[roles.AddPermissionsToRoleResponse], error)
	RemovePermissionFromRole(context.Context, *connect.Request[roles.RemovePermissionFromRoleRequest]) (*connect.Response[emptypb.Empty], error)
	ListEffectiveRolePermissions(context.Context, *connect.Request[roles.ListEffectiveRolePermissionsRequest]) (*connect.Response[roles.ListEffectiveRolePermissionsResponse], error)
}

// NewRolesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRolesServiceHandler(svc RolesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rolesServiceMethods := roles.File_scalekit_v1_roles_roles_proto.Services().ByName("RolesService").Methods()
	rolesServiceCreateRoleHandler := connect.NewUnaryHandler(
		RolesServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(rolesServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceUpdateRoleHandler := connect.NewUnaryHandler(
		RolesServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(rolesServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceGetRoleHandler := connect.NewUnaryHandler(
		RolesServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(rolesServiceMethods.ByName("GetRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceListRolesHandler := connect.NewUnaryHandler(
		RolesServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(rolesServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceDeleteRoleHandler := connect.NewUnaryHandler(
		RolesServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(rolesServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceCreateOrganizationRoleHandler := connect.NewUnaryHandler(
		RolesServiceCreateOrganizationRoleProcedure,
		svc.CreateOrganizationRole,
		connect.WithSchema(rolesServiceMethods.ByName("CreateOrganizationRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceUpdateOrganizationRoleHandler := connect.NewUnaryHandler(
		RolesServiceUpdateOrganizationRoleProcedure,
		svc.UpdateOrganizationRole,
		connect.WithSchema(rolesServiceMethods.ByName("UpdateOrganizationRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceGetOrganizationRoleHandler := connect.NewUnaryHandler(
		RolesServiceGetOrganizationRoleProcedure,
		svc.GetOrganizationRole,
		connect.WithSchema(rolesServiceMethods.ByName("GetOrganizationRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceListOrganizationRolesHandler := connect.NewUnaryHandler(
		RolesServiceListOrganizationRolesProcedure,
		svc.ListOrganizationRoles,
		connect.WithSchema(rolesServiceMethods.ByName("ListOrganizationRoles")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceDeleteOrganizationRoleHandler := connect.NewUnaryHandler(
		RolesServiceDeleteOrganizationRoleProcedure,
		svc.DeleteOrganizationRole,
		connect.WithSchema(rolesServiceMethods.ByName("DeleteOrganizationRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceGetRoleUsersCountHandler := connect.NewUnaryHandler(
		RolesServiceGetRoleUsersCountProcedure,
		svc.GetRoleUsersCount,
		connect.WithSchema(rolesServiceMethods.ByName("GetRoleUsersCount")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceGetOrganizationRoleUsersCountHandler := connect.NewUnaryHandler(
		RolesServiceGetOrganizationRoleUsersCountProcedure,
		svc.GetOrganizationRoleUsersCount,
		connect.WithSchema(rolesServiceMethods.ByName("GetOrganizationRoleUsersCount")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceUpdateDefaultRolesHandler := connect.NewUnaryHandler(
		RolesServiceUpdateDefaultRolesProcedure,
		svc.UpdateDefaultRoles,
		connect.WithSchema(rolesServiceMethods.ByName("UpdateDefaultRoles")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceUpdateDefaultOrganizationRolesHandler := connect.NewUnaryHandler(
		RolesServiceUpdateDefaultOrganizationRolesProcedure,
		svc.UpdateDefaultOrganizationRoles,
		connect.WithSchema(rolesServiceMethods.ByName("UpdateDefaultOrganizationRoles")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceListDependentRolesHandler := connect.NewUnaryHandler(
		RolesServiceListDependentRolesProcedure,
		svc.ListDependentRoles,
		connect.WithSchema(rolesServiceMethods.ByName("ListDependentRoles")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceDeleteRoleBaseHandler := connect.NewUnaryHandler(
		RolesServiceDeleteRoleBaseProcedure,
		svc.DeleteRoleBase,
		connect.WithSchema(rolesServiceMethods.ByName("DeleteRoleBase")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceDeleteOrganizationRoleBaseHandler := connect.NewUnaryHandler(
		RolesServiceDeleteOrganizationRoleBaseProcedure,
		svc.DeleteOrganizationRoleBase,
		connect.WithSchema(rolesServiceMethods.ByName("DeleteOrganizationRoleBase")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceCreatePermissionHandler := connect.NewUnaryHandler(
		RolesServiceCreatePermissionProcedure,
		svc.CreatePermission,
		connect.WithSchema(rolesServiceMethods.ByName("CreatePermission")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceGetPermissionHandler := connect.NewUnaryHandler(
		RolesServiceGetPermissionProcedure,
		svc.GetPermission,
		connect.WithSchema(rolesServiceMethods.ByName("GetPermission")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceUpdatePermissionHandler := connect.NewUnaryHandler(
		RolesServiceUpdatePermissionProcedure,
		svc.UpdatePermission,
		connect.WithSchema(rolesServiceMethods.ByName("UpdatePermission")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceListPermissionsHandler := connect.NewUnaryHandler(
		RolesServiceListPermissionsProcedure,
		svc.ListPermissions,
		connect.WithSchema(rolesServiceMethods.ByName("ListPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceDeletePermissionHandler := connect.NewUnaryHandler(
		RolesServiceDeletePermissionProcedure,
		svc.DeletePermission,
		connect.WithSchema(rolesServiceMethods.ByName("DeletePermission")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceListRolePermissionsHandler := connect.NewUnaryHandler(
		RolesServiceListRolePermissionsProcedure,
		svc.ListRolePermissions,
		connect.WithSchema(rolesServiceMethods.ByName("ListRolePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceAddPermissionsToRoleHandler := connect.NewUnaryHandler(
		RolesServiceAddPermissionsToRoleProcedure,
		svc.AddPermissionsToRole,
		connect.WithSchema(rolesServiceMethods.ByName("AddPermissionsToRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceRemovePermissionFromRoleHandler := connect.NewUnaryHandler(
		RolesServiceRemovePermissionFromRoleProcedure,
		svc.RemovePermissionFromRole,
		connect.WithSchema(rolesServiceMethods.ByName("RemovePermissionFromRole")),
		connect.WithHandlerOptions(opts...),
	)
	rolesServiceListEffectiveRolePermissionsHandler := connect.NewUnaryHandler(
		RolesServiceListEffectiveRolePermissionsProcedure,
		svc.ListEffectiveRolePermissions,
		connect.WithSchema(rolesServiceMethods.ByName("ListEffectiveRolePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.roles.RolesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RolesServiceCreateRoleProcedure:
			rolesServiceCreateRoleHandler.ServeHTTP(w, r)
		case RolesServiceUpdateRoleProcedure:
			rolesServiceUpdateRoleHandler.ServeHTTP(w, r)
		case RolesServiceGetRoleProcedure:
			rolesServiceGetRoleHandler.ServeHTTP(w, r)
		case RolesServiceListRolesProcedure:
			rolesServiceListRolesHandler.ServeHTTP(w, r)
		case RolesServiceDeleteRoleProcedure:
			rolesServiceDeleteRoleHandler.ServeHTTP(w, r)
		case RolesServiceCreateOrganizationRoleProcedure:
			rolesServiceCreateOrganizationRoleHandler.ServeHTTP(w, r)
		case RolesServiceUpdateOrganizationRoleProcedure:
			rolesServiceUpdateOrganizationRoleHandler.ServeHTTP(w, r)
		case RolesServiceGetOrganizationRoleProcedure:
			rolesServiceGetOrganizationRoleHandler.ServeHTTP(w, r)
		case RolesServiceListOrganizationRolesProcedure:
			rolesServiceListOrganizationRolesHandler.ServeHTTP(w, r)
		case RolesServiceDeleteOrganizationRoleProcedure:
			rolesServiceDeleteOrganizationRoleHandler.ServeHTTP(w, r)
		case RolesServiceGetRoleUsersCountProcedure:
			rolesServiceGetRoleUsersCountHandler.ServeHTTP(w, r)
		case RolesServiceGetOrganizationRoleUsersCountProcedure:
			rolesServiceGetOrganizationRoleUsersCountHandler.ServeHTTP(w, r)
		case RolesServiceUpdateDefaultRolesProcedure:
			rolesServiceUpdateDefaultRolesHandler.ServeHTTP(w, r)
		case RolesServiceUpdateDefaultOrganizationRolesProcedure:
			rolesServiceUpdateDefaultOrganizationRolesHandler.ServeHTTP(w, r)
		case RolesServiceListDependentRolesProcedure:
			rolesServiceListDependentRolesHandler.ServeHTTP(w, r)
		case RolesServiceDeleteRoleBaseProcedure:
			rolesServiceDeleteRoleBaseHandler.ServeHTTP(w, r)
		case RolesServiceDeleteOrganizationRoleBaseProcedure:
			rolesServiceDeleteOrganizationRoleBaseHandler.ServeHTTP(w, r)
		case RolesServiceCreatePermissionProcedure:
			rolesServiceCreatePermissionHandler.ServeHTTP(w, r)
		case RolesServiceGetPermissionProcedure:
			rolesServiceGetPermissionHandler.ServeHTTP(w, r)
		case RolesServiceUpdatePermissionProcedure:
			rolesServiceUpdatePermissionHandler.ServeHTTP(w, r)
		case RolesServiceListPermissionsProcedure:
			rolesServiceListPermissionsHandler.ServeHTTP(w, r)
		case RolesServiceDeletePermissionProcedure:
			rolesServiceDeletePermissionHandler.ServeHTTP(w, r)
		case RolesServiceListRolePermissionsProcedure:
			rolesServiceListRolePermissionsHandler.ServeHTTP(w, r)
		case RolesServiceAddPermissionsToRoleProcedure:
			rolesServiceAddPermissionsToRoleHandler.ServeHTTP(w, r)
		case RolesServiceRemovePermissionFromRoleProcedure:
			rolesServiceRemovePermissionFromRoleHandler.ServeHTTP(w, r)
		case RolesServiceListEffectiveRolePermissionsProcedure:
			rolesServiceListEffectiveRolePermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRolesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRolesServiceHandler struct{}

func (UnimplementedRolesServiceHandler) CreateRole(context.Context, *connect.Request[roles.CreateRoleRequest]) (*connect.Response[roles.CreateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.CreateRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) UpdateRole(context.Context, *connect.Request[roles.UpdateRoleRequest]) (*connect.Response[roles.UpdateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.UpdateRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) GetRole(context.Context, *connect.Request[roles.GetRoleRequest]) (*connect.Response[roles.GetRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.GetRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) ListRoles(context.Context, *connect.Request[roles.ListRolesRequest]) (*connect.Response[roles.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.ListRoles is not implemented"))
}

func (UnimplementedRolesServiceHandler) DeleteRole(context.Context, *connect.Request[roles.DeleteRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.DeleteRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) CreateOrganizationRole(context.Context, *connect.Request[roles.CreateOrganizationRoleRequest]) (*connect.Response[roles.CreateOrganizationRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.CreateOrganizationRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) UpdateOrganizationRole(context.Context, *connect.Request[roles.UpdateOrganizationRoleRequest]) (*connect.Response[roles.UpdateOrganizationRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.UpdateOrganizationRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) GetOrganizationRole(context.Context, *connect.Request[roles.GetOrganizationRoleRequest]) (*connect.Response[roles.GetOrganizationRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.GetOrganizationRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) ListOrganizationRoles(context.Context, *connect.Request[roles.ListOrganizationRolesRequest]) (*connect.Response[roles.ListOrganizationRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.ListOrganizationRoles is not implemented"))
}

func (UnimplementedRolesServiceHandler) DeleteOrganizationRole(context.Context, *connect.Request[roles.DeleteOrganizationRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.DeleteOrganizationRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) GetRoleUsersCount(context.Context, *connect.Request[roles.GetRoleUsersCountRequest]) (*connect.Response[roles.GetRoleUsersCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.GetRoleUsersCount is not implemented"))
}

func (UnimplementedRolesServiceHandler) GetOrganizationRoleUsersCount(context.Context, *connect.Request[roles.GetOrganizationRoleUsersCountRequest]) (*connect.Response[roles.GetOrganizationRoleUsersCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.GetOrganizationRoleUsersCount is not implemented"))
}

func (UnimplementedRolesServiceHandler) UpdateDefaultRoles(context.Context, *connect.Request[roles.UpdateDefaultRolesRequest]) (*connect.Response[roles.UpdateDefaultRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.UpdateDefaultRoles is not implemented"))
}

func (UnimplementedRolesServiceHandler) UpdateDefaultOrganizationRoles(context.Context, *connect.Request[roles.UpdateDefaultOrganizationRolesRequest]) (*connect.Response[roles.UpdateDefaultOrganizationRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.UpdateDefaultOrganizationRoles is not implemented"))
}

func (UnimplementedRolesServiceHandler) ListDependentRoles(context.Context, *connect.Request[roles.ListDependentRolesRequest]) (*connect.Response[roles.ListDependentRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.ListDependentRoles is not implemented"))
}

func (UnimplementedRolesServiceHandler) DeleteRoleBase(context.Context, *connect.Request[roles.DeleteRoleBaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.DeleteRoleBase is not implemented"))
}

func (UnimplementedRolesServiceHandler) DeleteOrganizationRoleBase(context.Context, *connect.Request[roles.DeleteOrganizationRoleBaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.DeleteOrganizationRoleBase is not implemented"))
}

func (UnimplementedRolesServiceHandler) CreatePermission(context.Context, *connect.Request[roles.CreatePermissionRequest]) (*connect.Response[roles.CreatePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.CreatePermission is not implemented"))
}

func (UnimplementedRolesServiceHandler) GetPermission(context.Context, *connect.Request[roles.GetPermissionRequest]) (*connect.Response[roles.GetPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.GetPermission is not implemented"))
}

func (UnimplementedRolesServiceHandler) UpdatePermission(context.Context, *connect.Request[roles.UpdatePermissionRequest]) (*connect.Response[roles.UpdatePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.UpdatePermission is not implemented"))
}

func (UnimplementedRolesServiceHandler) ListPermissions(context.Context, *connect.Request[roles.ListPermissionsRequest]) (*connect.Response[roles.ListPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.ListPermissions is not implemented"))
}

func (UnimplementedRolesServiceHandler) DeletePermission(context.Context, *connect.Request[roles.DeletePermissionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.DeletePermission is not implemented"))
}

func (UnimplementedRolesServiceHandler) ListRolePermissions(context.Context, *connect.Request[roles.ListRolePermissionsRequest]) (*connect.Response[roles.ListRolePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.ListRolePermissions is not implemented"))
}

func (UnimplementedRolesServiceHandler) AddPermissionsToRole(context.Context, *connect.Request[roles.AddPermissionsToRoleRequest]) (*connect.Response[roles.AddPermissionsToRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.AddPermissionsToRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) RemovePermissionFromRole(context.Context, *connect.Request[roles.RemovePermissionFromRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.RemovePermissionFromRole is not implemented"))
}

func (UnimplementedRolesServiceHandler) ListEffectiveRolePermissions(context.Context, *connect.Request[roles.ListEffectiveRolePermissionsRequest]) (*connect.Response[roles.ListEffectiveRolePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.roles.RolesService.ListEffectiveRolePermissions is not implemented"))
}
