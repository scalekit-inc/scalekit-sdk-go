// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/auth/passwordless.proto

package authconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	auth "github.com/scalekit-inc/scalekit-sdk-go/v2/pkg/grpc/scalekit/v1/auth"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PasswordlessServiceName is the fully-qualified name of the PasswordlessService service.
	PasswordlessServiceName = "scalekit.v1.auth.passwordless.PasswordlessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PasswordlessServiceSendPasswordlessEmailProcedure is the fully-qualified name of the
	// PasswordlessService's SendPasswordlessEmail RPC.
	PasswordlessServiceSendPasswordlessEmailProcedure = "/scalekit.v1.auth.passwordless.PasswordlessService/SendPasswordlessEmail"
	// PasswordlessServiceVerifyPasswordlessEmailProcedure is the fully-qualified name of the
	// PasswordlessService's VerifyPasswordlessEmail RPC.
	PasswordlessServiceVerifyPasswordlessEmailProcedure = "/scalekit.v1.auth.passwordless.PasswordlessService/VerifyPasswordlessEmail"
	// PasswordlessServiceResendPasswordlessEmailProcedure is the fully-qualified name of the
	// PasswordlessService's ResendPasswordlessEmail RPC.
	PasswordlessServiceResendPasswordlessEmailProcedure = "/scalekit.v1.auth.passwordless.PasswordlessService/ResendPasswordlessEmail"
)

// PasswordlessServiceClient is a client for the scalekit.v1.auth.passwordless.PasswordlessService
// service.
type PasswordlessServiceClient interface {
	SendPasswordlessEmail(context.Context, *connect.Request[auth.SendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error)
	VerifyPasswordlessEmail(context.Context, *connect.Request[auth.VerifyPasswordLessRequest]) (*connect.Response[auth.VerifyPasswordLessResponse], error)
	ResendPasswordlessEmail(context.Context, *connect.Request[auth.ResendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error)
}

// NewPasswordlessServiceClient constructs a client for the
// scalekit.v1.auth.passwordless.PasswordlessService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPasswordlessServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PasswordlessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	passwordlessServiceMethods := auth.File_scalekit_v1_auth_passwordless_proto.Services().ByName("PasswordlessService").Methods()
	return &passwordlessServiceClient{
		sendPasswordlessEmail: connect.NewClient[auth.SendPasswordlessRequest, auth.SendPasswordlessResponse](
			httpClient,
			baseURL+PasswordlessServiceSendPasswordlessEmailProcedure,
			connect.WithSchema(passwordlessServiceMethods.ByName("SendPasswordlessEmail")),
			connect.WithClientOptions(opts...),
		),
		verifyPasswordlessEmail: connect.NewClient[auth.VerifyPasswordLessRequest, auth.VerifyPasswordLessResponse](
			httpClient,
			baseURL+PasswordlessServiceVerifyPasswordlessEmailProcedure,
			connect.WithSchema(passwordlessServiceMethods.ByName("VerifyPasswordlessEmail")),
			connect.WithClientOptions(opts...),
		),
		resendPasswordlessEmail: connect.NewClient[auth.ResendPasswordlessRequest, auth.SendPasswordlessResponse](
			httpClient,
			baseURL+PasswordlessServiceResendPasswordlessEmailProcedure,
			connect.WithSchema(passwordlessServiceMethods.ByName("ResendPasswordlessEmail")),
			connect.WithClientOptions(opts...),
		),
	}
}

// passwordlessServiceClient implements PasswordlessServiceClient.
type passwordlessServiceClient struct {
	sendPasswordlessEmail   *connect.Client[auth.SendPasswordlessRequest, auth.SendPasswordlessResponse]
	verifyPasswordlessEmail *connect.Client[auth.VerifyPasswordLessRequest, auth.VerifyPasswordLessResponse]
	resendPasswordlessEmail *connect.Client[auth.ResendPasswordlessRequest, auth.SendPasswordlessResponse]
}

// SendPasswordlessEmail calls
// scalekit.v1.auth.passwordless.PasswordlessService.SendPasswordlessEmail.
func (c *passwordlessServiceClient) SendPasswordlessEmail(ctx context.Context, req *connect.Request[auth.SendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error) {
	return c.sendPasswordlessEmail.CallUnary(ctx, req)
}

// VerifyPasswordlessEmail calls
// scalekit.v1.auth.passwordless.PasswordlessService.VerifyPasswordlessEmail.
func (c *passwordlessServiceClient) VerifyPasswordlessEmail(ctx context.Context, req *connect.Request[auth.VerifyPasswordLessRequest]) (*connect.Response[auth.VerifyPasswordLessResponse], error) {
	return c.verifyPasswordlessEmail.CallUnary(ctx, req)
}

// ResendPasswordlessEmail calls
// scalekit.v1.auth.passwordless.PasswordlessService.ResendPasswordlessEmail.
func (c *passwordlessServiceClient) ResendPasswordlessEmail(ctx context.Context, req *connect.Request[auth.ResendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error) {
	return c.resendPasswordlessEmail.CallUnary(ctx, req)
}

// PasswordlessServiceHandler is an implementation of the
// scalekit.v1.auth.passwordless.PasswordlessService service.
type PasswordlessServiceHandler interface {
	SendPasswordlessEmail(context.Context, *connect.Request[auth.SendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error)
	VerifyPasswordlessEmail(context.Context, *connect.Request[auth.VerifyPasswordLessRequest]) (*connect.Response[auth.VerifyPasswordLessResponse], error)
	ResendPasswordlessEmail(context.Context, *connect.Request[auth.ResendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error)
}

// NewPasswordlessServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPasswordlessServiceHandler(svc PasswordlessServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	passwordlessServiceMethods := auth.File_scalekit_v1_auth_passwordless_proto.Services().ByName("PasswordlessService").Methods()
	passwordlessServiceSendPasswordlessEmailHandler := connect.NewUnaryHandler(
		PasswordlessServiceSendPasswordlessEmailProcedure,
		svc.SendPasswordlessEmail,
		connect.WithSchema(passwordlessServiceMethods.ByName("SendPasswordlessEmail")),
		connect.WithHandlerOptions(opts...),
	)
	passwordlessServiceVerifyPasswordlessEmailHandler := connect.NewUnaryHandler(
		PasswordlessServiceVerifyPasswordlessEmailProcedure,
		svc.VerifyPasswordlessEmail,
		connect.WithSchema(passwordlessServiceMethods.ByName("VerifyPasswordlessEmail")),
		connect.WithHandlerOptions(opts...),
	)
	passwordlessServiceResendPasswordlessEmailHandler := connect.NewUnaryHandler(
		PasswordlessServiceResendPasswordlessEmailProcedure,
		svc.ResendPasswordlessEmail,
		connect.WithSchema(passwordlessServiceMethods.ByName("ResendPasswordlessEmail")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.auth.passwordless.PasswordlessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PasswordlessServiceSendPasswordlessEmailProcedure:
			passwordlessServiceSendPasswordlessEmailHandler.ServeHTTP(w, r)
		case PasswordlessServiceVerifyPasswordlessEmailProcedure:
			passwordlessServiceVerifyPasswordlessEmailHandler.ServeHTTP(w, r)
		case PasswordlessServiceResendPasswordlessEmailProcedure:
			passwordlessServiceResendPasswordlessEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPasswordlessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPasswordlessServiceHandler struct{}

func (UnimplementedPasswordlessServiceHandler) SendPasswordlessEmail(context.Context, *connect.Request[auth.SendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auth.passwordless.PasswordlessService.SendPasswordlessEmail is not implemented"))
}

func (UnimplementedPasswordlessServiceHandler) VerifyPasswordlessEmail(context.Context, *connect.Request[auth.VerifyPasswordLessRequest]) (*connect.Response[auth.VerifyPasswordLessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auth.passwordless.PasswordlessService.VerifyPasswordlessEmail is not implemented"))
}

func (UnimplementedPasswordlessServiceHandler) ResendPasswordlessEmail(context.Context, *connect.Request[auth.ResendPasswordlessRequest]) (*connect.Response[auth.SendPasswordlessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auth.passwordless.PasswordlessService.ResendPasswordlessEmail is not implemented"))
}
