// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: scalekit/v1/auth/passwordless.proto

package auth

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TemplateType int32

const (
	TemplateType_UNSPECIFIED TemplateType = 0
	TemplateType_SIGNIN      TemplateType = 1
	TemplateType_SIGNUP      TemplateType = 2
)

// Enum value maps for TemplateType.
var (
	TemplateType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SIGNIN",
		2: "SIGNUP",
	}
	TemplateType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SIGNIN":      1,
		"SIGNUP":      2,
	}
)

func (x TemplateType) Enum() *TemplateType {
	p := new(TemplateType)
	*p = x
	return p
}

func (x TemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_auth_passwordless_proto_enumTypes[0].Descriptor()
}

func (TemplateType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_auth_passwordless_proto_enumTypes[0]
}

func (x TemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateType.Descriptor instead.
func (TemplateType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{0}
}

type PasswordlessType int32

const (
	PasswordlessType_PASSWORDLESS_TYPE_UNSPECIFIED PasswordlessType = 0
	PasswordlessType_OTP                           PasswordlessType = 1
	PasswordlessType_LINK                          PasswordlessType = 2
	PasswordlessType_LINK_OTP                      PasswordlessType = 3
)

// Enum value maps for PasswordlessType.
var (
	PasswordlessType_name = map[int32]string{
		0: "PASSWORDLESS_TYPE_UNSPECIFIED",
		1: "OTP",
		2: "LINK",
		3: "LINK_OTP",
	}
	PasswordlessType_value = map[string]int32{
		"PASSWORDLESS_TYPE_UNSPECIFIED": 0,
		"OTP":                           1,
		"LINK":                          2,
		"LINK_OTP":                      3,
	}
)

func (x PasswordlessType) Enum() *PasswordlessType {
	p := new(PasswordlessType)
	*p = x
	return p
}

func (x PasswordlessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordlessType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_auth_passwordless_proto_enumTypes[1].Descriptor()
}

func (PasswordlessType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_auth_passwordless_proto_enumTypes[1]
}

func (x PasswordlessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordlessType.Descriptor instead.
func (PasswordlessType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{1}
}

type SendPasswordlessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email             string            `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Template          *TemplateType     `protobuf:"varint,2,opt,name=template,proto3,enum=scalekit.v1.auth.passwordless.TemplateType,oneof" json:"template,omitempty"`
	MagiclinkAuthUri  *string           `protobuf:"bytes,3,opt,name=magiclink_auth_uri,json=magiclinkAuthUri,proto3,oneof" json:"magiclink_auth_uri,omitempty"`
	State             *string           `protobuf:"bytes,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	ExpiresIn         *uint32           `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`
	TemplateVariables map[string]string `protobuf:"bytes,6,rep,name=template_variables,json=templateVariables,proto3" json:"template_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendPasswordlessRequest) Reset() {
	*x = SendPasswordlessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPasswordlessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPasswordlessRequest) ProtoMessage() {}

func (x *SendPasswordlessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPasswordlessRequest.ProtoReflect.Descriptor instead.
func (*SendPasswordlessRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{0}
}

func (x *SendPasswordlessRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SendPasswordlessRequest) GetTemplate() TemplateType {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return TemplateType_UNSPECIFIED
}

func (x *SendPasswordlessRequest) GetMagiclinkAuthUri() string {
	if x != nil && x.MagiclinkAuthUri != nil {
		return *x.MagiclinkAuthUri
	}
	return ""
}

func (x *SendPasswordlessRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *SendPasswordlessRequest) GetExpiresIn() uint32 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *SendPasswordlessRequest) GetTemplateVariables() map[string]string {
	if x != nil {
		return x.TemplateVariables
	}
	return nil
}

type SendPasswordlessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequestId    string           `protobuf:"bytes,1,opt,name=auth_request_id,json=authRequestId,proto3" json:"auth_request_id,omitempty"`
	ExpiresAt        int64            `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	ExpiresIn        uint32           `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	PasswordlessType PasswordlessType `protobuf:"varint,4,opt,name=passwordless_type,json=passwordlessType,proto3,enum=scalekit.v1.auth.passwordless.PasswordlessType" json:"passwordless_type,omitempty"`
}

func (x *SendPasswordlessResponse) Reset() {
	*x = SendPasswordlessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPasswordlessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPasswordlessResponse) ProtoMessage() {}

func (x *SendPasswordlessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPasswordlessResponse.ProtoReflect.Descriptor instead.
func (*SendPasswordlessResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{1}
}

func (x *SendPasswordlessResponse) GetAuthRequestId() string {
	if x != nil {
		return x.AuthRequestId
	}
	return ""
}

func (x *SendPasswordlessResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *SendPasswordlessResponse) GetExpiresIn() uint32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *SendPasswordlessResponse) GetPasswordlessType() PasswordlessType {
	if x != nil {
		return x.PasswordlessType
	}
	return PasswordlessType_PASSWORDLESS_TYPE_UNSPECIFIED
}

type VerifyPasswordLessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthCredential:
	//
	//	*VerifyPasswordLessRequest_Code
	//	*VerifyPasswordLessRequest_LinkToken
	AuthCredential isVerifyPasswordLessRequest_AuthCredential `protobuf_oneof:"auth_credential"`
	AuthRequestId  *string                                    `protobuf:"bytes,3,opt,name=auth_request_id,json=authRequestId,proto3,oneof" json:"auth_request_id,omitempty"`
}

func (x *VerifyPasswordLessRequest) Reset() {
	*x = VerifyPasswordLessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPasswordLessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasswordLessRequest) ProtoMessage() {}

func (x *VerifyPasswordLessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasswordLessRequest.ProtoReflect.Descriptor instead.
func (*VerifyPasswordLessRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{2}
}

func (m *VerifyPasswordLessRequest) GetAuthCredential() isVerifyPasswordLessRequest_AuthCredential {
	if m != nil {
		return m.AuthCredential
	}
	return nil
}

func (x *VerifyPasswordLessRequest) GetCode() string {
	if x, ok := x.GetAuthCredential().(*VerifyPasswordLessRequest_Code); ok {
		return x.Code
	}
	return ""
}

func (x *VerifyPasswordLessRequest) GetLinkToken() string {
	if x, ok := x.GetAuthCredential().(*VerifyPasswordLessRequest_LinkToken); ok {
		return x.LinkToken
	}
	return ""
}

func (x *VerifyPasswordLessRequest) GetAuthRequestId() string {
	if x != nil && x.AuthRequestId != nil {
		return *x.AuthRequestId
	}
	return ""
}

type isVerifyPasswordLessRequest_AuthCredential interface {
	isVerifyPasswordLessRequest_AuthCredential()
}

type VerifyPasswordLessRequest_Code struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3,oneof"`
}

type VerifyPasswordLessRequest_LinkToken struct {
	LinkToken string `protobuf:"bytes,2,opt,name=link_token,json=linkToken,proto3,oneof"`
}

func (*VerifyPasswordLessRequest_Code) isVerifyPasswordLessRequest_AuthCredential() {}

func (*VerifyPasswordLessRequest_LinkToken) isVerifyPasswordLessRequest_AuthCredential() {}

type ResendPasswordlessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequestId string `protobuf:"bytes,1,opt,name=auth_request_id,json=authRequestId,proto3" json:"auth_request_id,omitempty"`
}

func (x *ResendPasswordlessRequest) Reset() {
	*x = ResendPasswordlessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendPasswordlessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendPasswordlessRequest) ProtoMessage() {}

func (x *ResendPasswordlessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendPasswordlessRequest.ProtoReflect.Descriptor instead.
func (*ResendPasswordlessRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{3}
}

func (x *ResendPasswordlessRequest) GetAuthRequestId() string {
	if x != nil {
		return x.AuthRequestId
	}
	return ""
}

type VerifyPasswordLessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string           `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	State            *string          `protobuf:"bytes,2,opt,name=state,proto3,oneof" json:"state,omitempty"`
	Template         *TemplateType    `protobuf:"varint,3,opt,name=template,proto3,enum=scalekit.v1.auth.passwordless.TemplateType,oneof" json:"template,omitempty"`
	PasswordlessType PasswordlessType `protobuf:"varint,4,opt,name=passwordless_type,json=passwordlessType,proto3,enum=scalekit.v1.auth.passwordless.PasswordlessType" json:"passwordless_type,omitempty"`
}

func (x *VerifyPasswordLessResponse) Reset() {
	*x = VerifyPasswordLessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPasswordLessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasswordLessResponse) ProtoMessage() {}

func (x *VerifyPasswordLessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_auth_passwordless_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasswordLessResponse.ProtoReflect.Descriptor instead.
func (*VerifyPasswordLessResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_auth_passwordless_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyPasswordLessResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyPasswordLessResponse) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *VerifyPasswordLessResponse) GetTemplate() TemplateType {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return TemplateType_UNSPECIFIED
}

func (x *VerifyPasswordLessResponse) GetPasswordlessType() PasswordlessType {
	if x != nil {
		return x.PasswordlessType
	}
	return PasswordlessType_PASSWORDLESS_TYPE_UNSPECIFIED
}

var File_scalekit_v1_auth_passwordless_proto protoreflect.FileDescriptor

var file_scalekit_v1_auth_passwordless_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x10, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0xad, 0x01, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x96, 0x01, 0x92, 0x41, 0x85, 0x01, 0x32, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
	0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4a, 0x16, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x2e, 0x64, 0x6f, 0x65,
	0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xba, 0x48, 0x0a,
	0xc8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc0, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0xa6, 0x02, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0xd7, 0x01, 0x92, 0x41, 0xcb, 0x01, 0x32, 0xbe, 0x01, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x55, 0x73, 0x65,
	0x20, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x53, 0x49,
	0x47, 0x4e, 0x55, 0x50, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x08, 0x22, 0x53, 0x49, 0x47, 0x4e,
	0x49, 0x4e, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa9, 0x02, 0x0a, 0x12, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x01, 0x92, 0x41, 0xe4, 0x01, 0x32, 0xaf,
	0x01, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x27, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x55, 0x52, 0x4c,
	0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x20, 0x54, 0x68,
	0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73,
	0x20, 0x61, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x20, 0x61, 0x73, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4a, 0x30, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x22, 0xe0, 0x41, 0x01, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xe8, 0x07, 0x48,
	0x01, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x9b, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xff, 0x01, 0x92, 0x41, 0xee, 0x01, 0x32, 0xd9, 0x01,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2c, 0x20, 0x73, 0x75, 0x63,
	0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4a, 0x10, 0x22, 0x64, 0x36, 0x32, 0x69,
	0x76, 0x61, 0x73, 0x72, 0x79, 0x32, 0x39, 0x6c, 0x73, 0x6f, 0x22, 0xe0, 0x41, 0x01, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xe8, 0x07, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x81, 0x01, 0x92, 0x41, 0x7b, 0x32,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2e, 0x20,
	0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x33, 0x30,
	0x30, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x28, 0x35, 0x20, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x29, 0x4a, 0x03, 0x33, 0x30, 0x30, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0xdd, 0x05,
	0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xde, 0x04, 0x92, 0x41, 0xcf, 0x04,
	0x32, 0x9a, 0x04, 0x41, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6b, 0x65, 0x79, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x0a,
	0x2a, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x33, 0x30, 0x20, 0x6b, 0x65, 0x79, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2e, 0x0a, 0x2a, 0x20, 0x54, 0x68,
	0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x3a, 0x20, 0x60, 0x6f,
	0x74, 0x70, 0x60, 0x2c, 0x20, 0x60, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x60, 0x2c, 0x20, 0x60, 0x6c, 0x69,
	0x6e, 0x6b, 0x60, 0x2c, 0x20, 0x60, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x60, 0x2c, 0x20, 0x60, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x60, 0x2e, 0x0a, 0x2a, 0x20, 0x45, 0x76, 0x65, 0x72, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73,
	0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x20, 0x49,
	0x44, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x72, 0x65, 0x67, 0x61,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4a, 0x30, 0x7b,
	0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0xe0,
	0x41, 0x01, 0xba, 0x48, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x1e, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x44, 0x0a,
	0x16, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x22, 0x9c, 0x07, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc5, 0x01,
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9c, 0x01, 0x92, 0x41, 0x95, 0x01, 0x32, 0x5d,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20,
	0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4a, 0x34, 0x22,
	0x68, 0x35, 0x59, 0x38, 0x6b, 0x54, 0x35, 0x52, 0x56, 0x77, 0x61, 0x65, 0x61, 0x35, 0x57, 0x45,
	0x67, 0x57, 0x34, 0x6e, 0x2d, 0x36, 0x43, 0x2d, 0x61, 0x4f, 0x5f, 0x2d, 0x66, 0x75, 0x54, 0x55,
	0x57, 0x37, 0x56, 0x62, 0x39, 0x2d, 0x52, 0x68, 0x33, 0x41, 0x63, 0x59, 0x39, 0x71, 0x78, 0x5a,
	0x71, 0x51, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0xac, 0x01, 0x92, 0x41, 0xa5,
	0x01, 0x32, 0x96, 0x01, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x20, 0x28, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x29, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x20, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x4f, 0x54, 0x50, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72,
	0x20, 0x62, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4a, 0x0a, 0x31, 0x37, 0x34, 0x38,
	0x36, 0x39, 0x36, 0x35, 0x37, 0x35, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x9e, 0x01, 0x92, 0x41, 0x97, 0x01,
	0x32, 0x8f, 0x01, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x4a, 0x03, 0x33, 0x30, 0x30, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0xa7, 0x02, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x42, 0xc8, 0x01, 0x92, 0x41, 0xbc, 0x01, 0x32, 0xb2, 0x01, 0x54, 0x79, 0x70, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x20, 0x4f, 0x54, 0x50, 0x20, 0x73, 0x65, 0x6e,
	0x64, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x2c, 0x20, 0x4c, 0x49, 0x4e, 0x4b, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x20,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x20,
	0x6c, 0x69, 0x6e, 0x6b, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4f,
	0x54, 0x50, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x62, 0x6f, 0x74, 0x68,
	0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x05,
	0x22, 0x4f, 0x54, 0x50, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xb4, 0x06, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbd, 0x01,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa6, 0x01, 0x92,
	0x41, 0x99, 0x01, 0x32, 0x8c, 0x01, 0x54, 0x68, 0x65, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x4f, 0x54, 0x50,
	0x29, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x79,
	0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x36, 0x2d, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x4a, 0x08, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0xba, 0x48, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x14, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x8a, 0x02,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xe8, 0x01, 0x92, 0x41, 0xdb, 0x01, 0x32, 0xb0, 0x01, 0x54, 0x68, 0x65, 0x20,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x20, 0x55, 0x52, 0x4c, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x20, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4a, 0x26, 0x22, 0x61,
	0x66, 0x65, 0x39, 0x64, 0x36, 0x31, 0x63, 0x2d, 0x64, 0x38, 0x30, 0x64, 0x2d, 0x34, 0x30, 0x32,
	0x30, 0x2d, 0x61, 0x38, 0x65, 0x65, 0x2d, 0x36, 0x31, 0x37, 0x36, 0x35, 0x61, 0x62, 0x37, 0x31,
	0x63, 0x62, 0x33, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xa2, 0x02, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xf4, 0x01, 0x92, 0x41, 0xe8, 0x01, 0x32, 0xaf, 0x01, 0x54, 0x68,
	0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20,
	0x4f, 0x54, 0x50, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x34, 0x22,
	0x68, 0x35, 0x59, 0x38, 0x6b, 0x54, 0x35, 0x52, 0x56, 0x77, 0x61, 0x65, 0x61, 0x35, 0x57, 0x45,
	0x67, 0x57, 0x34, 0x6e, 0x2d, 0x36, 0x43, 0x2d, 0x61, 0x4f, 0x5f, 0x2d, 0x66, 0x75, 0x54, 0x55,
	0x57, 0x37, 0x56, 0x62, 0x39, 0x2d, 0x52, 0x68, 0x33, 0x41, 0x63, 0x59, 0x39, 0x71, 0x78, 0x5a,
	0x71, 0x51, 0x22, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x01, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x11, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0xa3, 0x02, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xfa,
	0x01, 0x92, 0x41, 0xe9, 0x01, 0x32, 0xb0, 0x01, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20,
	0x73, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x4f, 0x54, 0x50, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4a, 0x34, 0x22, 0x68, 0x35, 0x59, 0x38, 0x6b,
	0x54, 0x35, 0x52, 0x56, 0x77, 0x61, 0x65, 0x61, 0x35, 0x57, 0x45, 0x67, 0x57, 0x34, 0x6e, 0x2d,
	0x36, 0x43, 0x2d, 0x61, 0x4f, 0x5f, 0x2d, 0x66, 0x75, 0x54, 0x55, 0x57, 0x37, 0x56, 0x62, 0x39,
	0x2d, 0x52, 0x68, 0x33, 0x41, 0x63, 0x59, 0x39, 0x71, 0x78, 0x5a, 0x71, 0x51, 0x22, 0xba, 0x48,
	0x0a, 0xc8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x94, 0x07, 0x0a, 0x1a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa5, 0x01, 0x92, 0x41, 0x9e, 0x01,
	0x32, 0x83, 0x01, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x16, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x2e, 0x64, 0x6f,
	0x65, 0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xe0, 0x41,
	0x03, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xe8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xcc, 0x01, 0x92, 0x41, 0xc5, 0x01, 0x32,
	0xad, 0x01, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a,
	0x13, 0x22, 0x6b, 0x64, 0x74, 0x37, 0x79, 0x69, 0x61, 0x67, 0x32, 0x38, 0x74, 0x33, 0x34, 0x31,
	0x66, 0x72, 0x31, 0x22, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0xcb, 0x01, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x7d, 0x92, 0x41, 0x72, 0x32, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x49,
	0x4e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x20, 0x75, 0x73, 0x65, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50,
	0x4a, 0x08, 0x22, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0xe6, 0x01, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x87,
	0x01, 0x92, 0x41, 0x7c, 0x32, 0x73, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x4a, 0x05, 0x22, 0x4f, 0x54, 0x50, 0x22,
	0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2a, 0x37, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x10, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x54, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4f, 0x54, 0x50,
	0x10, 0x03, 0x32, 0xf0, 0x15, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcb, 0x07, 0x0a, 0x15, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x06, 0x92, 0x41, 0x8c, 0x06, 0x0a, 0x11, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x17, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x61,
	0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x65,
	0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x4f, 0x54, 0x50, 0x29, 0x2c,
	0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2c, 0x20, 0x6f, 0x72, 0x20,
	0x62, 0x6f, 0x74, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73,
	0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4a, 0xd0,
	0x01, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0xc8, 0x01, 0x0a, 0x8d, 0x01, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x6a, 0x94, 0x03, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x82, 0x03, 0x32, 0xff, 0x02, 0x0a, 0xfc, 0x02, 0x2a, 0xf9, 0x02, 0x0a,
	0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0xc8, 0x02,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xbd, 0x02, 0x1a, 0xba, 0x02, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x61,
	0x77, 0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x0a, 0x20, 0x20, 0x73, 0x65,
	0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x28, 0x0a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x2e, 0x64, 0x6f, 0x65, 0x40,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x0a, 0x09, 0x7b,
	0x0a, 0x09, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x22, 0x53, 0x49,
	0x47, 0x4e, 0x49, 0x4e, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x0a, 0x09, 0x09, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x55, 0x72, 0x69, 0x3a, 0x20, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x7b, 0x0a, 0x09, 0x09,
	0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x3a, 0x20, 0x22, 0x45, 0x4d,
	0x50, 0x35, 0x32, 0x33, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x3a, 0x20, 0x22, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x22,
	0x2c, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x3a, 0x20, 0x22, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x79, 0x6f, 0x75, 0x72,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x0a, 0x09, 0x09,
	0x7d, 0x2c, 0x0a, 0x09, 0x7d, 0x0a, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x04, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x12, 0xa0, 0x06, 0x0a, 0x17, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x05, 0x92, 0x41, 0xd9, 0x04,
	0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x4d,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x65,
	0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x92, 0x01,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x8a, 0x01, 0x0a, 0x49, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x3b, 0x1a, 0x39, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x6a, 0xc4, 0x02, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x12, 0xb2, 0x02, 0x32, 0xaf, 0x02, 0x0a, 0xac, 0x02, 0x2a, 0xa9, 0x02,
	0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0xf8,
	0x01, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xed, 0x01, 0x1a, 0xea, 0x01, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x3d, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x61, 0x77,
	0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x0a, 0x20, 0x20, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x28, 0x0a, 0x09, 0x2f, 0x2f, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x4f, 0x54, 0x50,
	0x29, 0x0a, 0x09, 0x7b, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x22, 0x20, 0x7d, 0x2c, 0x0a, 0x09, 0x2f, 0x2f, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x0a, 0x09, 0x7b, 0x20, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7d, 0x2c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x0a, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x04, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x8b, 0x06, 0x0a, 0x17,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x04, 0x92, 0x41, 0xc6,
	0x04, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x19, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a,
	0x62, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x69, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x69, 0x64, 0x6e, 0x27, 0x74, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x69, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x61, 0x73, 0x20, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x4a, 0xcb, 0x01, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0xc3, 0x01, 0x0a, 0x83,
	0x01, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x6a, 0xe3, 0x01, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0xd1, 0x01, 0x32, 0xce, 0x01, 0x0a, 0xcb, 0x01, 0x2a, 0xc8, 0x01, 0x0a,
	0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0x97, 0x01,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x1a, 0x89, 0x01, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x3d, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x61, 0x77, 0x61,
	0x69, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x28, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x0a, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x04, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x1a, 0xd9, 0x01, 0x92, 0x41, 0xd5, 0x01,
	0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x41,
	0x75, 0x74, 0x68, 0x12, 0xbf, 0x01, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x20, 0x54, 0x68,
	0x65, 0x73, 0x65, 0x20, 0x41, 0x50, 0x49, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x42, 0x91, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x11, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6e, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0xa2, 0x02, 0x04, 0x53, 0x56, 0x41, 0x50, 0xaa, 0x02, 0x1d, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0xca, 0x02, 0x1d, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x5c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0xe2, 0x02, 0x29, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x5c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x3a, 0x3a, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_scalekit_v1_auth_passwordless_proto_rawDescOnce sync.Once
	file_scalekit_v1_auth_passwordless_proto_rawDescData = file_scalekit_v1_auth_passwordless_proto_rawDesc
)

func file_scalekit_v1_auth_passwordless_proto_rawDescGZIP() []byte {
	file_scalekit_v1_auth_passwordless_proto_rawDescOnce.Do(func() {
		file_scalekit_v1_auth_passwordless_proto_rawDescData = protoimpl.X.CompressGZIP(file_scalekit_v1_auth_passwordless_proto_rawDescData)
	})
	return file_scalekit_v1_auth_passwordless_proto_rawDescData
}

var file_scalekit_v1_auth_passwordless_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_scalekit_v1_auth_passwordless_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_scalekit_v1_auth_passwordless_proto_goTypes = []interface{}{
	(TemplateType)(0),                  // 0: scalekit.v1.auth.passwordless.TemplateType
	(PasswordlessType)(0),              // 1: scalekit.v1.auth.passwordless.PasswordlessType
	(*SendPasswordlessRequest)(nil),    // 2: scalekit.v1.auth.passwordless.SendPasswordlessRequest
	(*SendPasswordlessResponse)(nil),   // 3: scalekit.v1.auth.passwordless.SendPasswordlessResponse
	(*VerifyPasswordLessRequest)(nil),  // 4: scalekit.v1.auth.passwordless.VerifyPasswordLessRequest
	(*ResendPasswordlessRequest)(nil),  // 5: scalekit.v1.auth.passwordless.ResendPasswordlessRequest
	(*VerifyPasswordLessResponse)(nil), // 6: scalekit.v1.auth.passwordless.VerifyPasswordLessResponse
	nil,                                // 7: scalekit.v1.auth.passwordless.SendPasswordlessRequest.TemplateVariablesEntry
}
var file_scalekit_v1_auth_passwordless_proto_depIdxs = []int32{
	0, // 0: scalekit.v1.auth.passwordless.SendPasswordlessRequest.template:type_name -> scalekit.v1.auth.passwordless.TemplateType
	7, // 1: scalekit.v1.auth.passwordless.SendPasswordlessRequest.template_variables:type_name -> scalekit.v1.auth.passwordless.SendPasswordlessRequest.TemplateVariablesEntry
	1, // 2: scalekit.v1.auth.passwordless.SendPasswordlessResponse.passwordless_type:type_name -> scalekit.v1.auth.passwordless.PasswordlessType
	0, // 3: scalekit.v1.auth.passwordless.VerifyPasswordLessResponse.template:type_name -> scalekit.v1.auth.passwordless.TemplateType
	1, // 4: scalekit.v1.auth.passwordless.VerifyPasswordLessResponse.passwordless_type:type_name -> scalekit.v1.auth.passwordless.PasswordlessType
	2, // 5: scalekit.v1.auth.passwordless.PasswordlessService.SendPasswordlessEmail:input_type -> scalekit.v1.auth.passwordless.SendPasswordlessRequest
	4, // 6: scalekit.v1.auth.passwordless.PasswordlessService.VerifyPasswordlessEmail:input_type -> scalekit.v1.auth.passwordless.VerifyPasswordLessRequest
	5, // 7: scalekit.v1.auth.passwordless.PasswordlessService.ResendPasswordlessEmail:input_type -> scalekit.v1.auth.passwordless.ResendPasswordlessRequest
	3, // 8: scalekit.v1.auth.passwordless.PasswordlessService.SendPasswordlessEmail:output_type -> scalekit.v1.auth.passwordless.SendPasswordlessResponse
	6, // 9: scalekit.v1.auth.passwordless.PasswordlessService.VerifyPasswordlessEmail:output_type -> scalekit.v1.auth.passwordless.VerifyPasswordLessResponse
	3, // 10: scalekit.v1.auth.passwordless.PasswordlessService.ResendPasswordlessEmail:output_type -> scalekit.v1.auth.passwordless.SendPasswordlessResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_scalekit_v1_auth_passwordless_proto_init() }
func file_scalekit_v1_auth_passwordless_proto_init() {
	if File_scalekit_v1_auth_passwordless_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scalekit_v1_auth_passwordless_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPasswordlessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_auth_passwordless_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPasswordlessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_auth_passwordless_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPasswordLessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_auth_passwordless_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendPasswordlessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_auth_passwordless_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPasswordLessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scalekit_v1_auth_passwordless_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_scalekit_v1_auth_passwordless_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*VerifyPasswordLessRequest_Code)(nil),
		(*VerifyPasswordLessRequest_LinkToken)(nil),
	}
	file_scalekit_v1_auth_passwordless_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scalekit_v1_auth_passwordless_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scalekit_v1_auth_passwordless_proto_goTypes,
		DependencyIndexes: file_scalekit_v1_auth_passwordless_proto_depIdxs,
		EnumInfos:         file_scalekit_v1_auth_passwordless_proto_enumTypes,
		MessageInfos:      file_scalekit_v1_auth_passwordless_proto_msgTypes,
	}.Build()
	File_scalekit_v1_auth_passwordless_proto = out.File
	file_scalekit_v1_auth_passwordless_proto_rawDesc = nil
	file_scalekit_v1_auth_passwordless_proto_goTypes = nil
	file_scalekit_v1_auth_passwordless_proto_depIdxs = nil
}
