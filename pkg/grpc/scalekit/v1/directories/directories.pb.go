// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: scalekit/v1/directories/directories.proto

package directories

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DirectoryType int32

const (
	DirectoryType_DIRECTORY_TYPE_UNSPECIFIED DirectoryType = 0
	DirectoryType_SCIM                       DirectoryType = 1
	DirectoryType_LDAP                       DirectoryType = 2
)

// Enum value maps for DirectoryType.
var (
	DirectoryType_name = map[int32]string{
		0: "DIRECTORY_TYPE_UNSPECIFIED",
		1: "SCIM",
		2: "LDAP",
	}
	DirectoryType_value = map[string]int32{
		"DIRECTORY_TYPE_UNSPECIFIED": 0,
		"SCIM":                       1,
		"LDAP":                       2,
	}
)

func (x DirectoryType) Enum() *DirectoryType {
	p := new(DirectoryType)
	*p = x
	return p
}

func (x DirectoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_directories_directories_proto_enumTypes[0].Descriptor()
}

func (DirectoryType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_directories_directories_proto_enumTypes[0]
}

func (x DirectoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectoryType.Descriptor instead.
func (DirectoryType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{0}
}

type DirectoryProvider int32

const (
	DirectoryProvider_DIRECTORY_PROVIDER_UNSPECIFIED DirectoryProvider = 0
	DirectoryProvider_OKTA                           DirectoryProvider = 1
	DirectoryProvider_GOOGLE                         DirectoryProvider = 2
	DirectoryProvider_MICROSOFT_AD                   DirectoryProvider = 3
	DirectoryProvider_AUTH0                          DirectoryProvider = 4
	DirectoryProvider_ONELOGIN                       DirectoryProvider = 5
)

// Enum value maps for DirectoryProvider.
var (
	DirectoryProvider_name = map[int32]string{
		0: "DIRECTORY_PROVIDER_UNSPECIFIED",
		1: "OKTA",
		2: "GOOGLE",
		3: "MICROSOFT_AD",
		4: "AUTH0",
		5: "ONELOGIN",
	}
	DirectoryProvider_value = map[string]int32{
		"DIRECTORY_PROVIDER_UNSPECIFIED": 0,
		"OKTA":                           1,
		"GOOGLE":                         2,
		"MICROSOFT_AD":                   3,
		"AUTH0":                          4,
		"ONELOGIN":                       5,
	}
)

func (x DirectoryProvider) Enum() *DirectoryProvider {
	p := new(DirectoryProvider)
	*p = x
	return p
}

func (x DirectoryProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectoryProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_directories_directories_proto_enumTypes[1].Descriptor()
}

func (DirectoryProvider) Type() protoreflect.EnumType {
	return &file_scalekit_v1_directories_directories_proto_enumTypes[1]
}

func (x DirectoryProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectoryProvider.Descriptor instead.
func (DirectoryProvider) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{1}
}

type DirectoryStatus int32

const (
	DirectoryStatus_DIRECTORY_STATUS_UNSPECIFIED DirectoryStatus = 0
	DirectoryStatus_DRAFT                        DirectoryStatus = 1
	DirectoryStatus_IN_PROGRESS                  DirectoryStatus = 2
	DirectoryStatus_COMPLETED                    DirectoryStatus = 3
)

// Enum value maps for DirectoryStatus.
var (
	DirectoryStatus_name = map[int32]string{
		0: "DIRECTORY_STATUS_UNSPECIFIED",
		1: "DRAFT",
		2: "IN_PROGRESS",
		3: "COMPLETED",
	}
	DirectoryStatus_value = map[string]int32{
		"DIRECTORY_STATUS_UNSPECIFIED": 0,
		"DRAFT":                        1,
		"IN_PROGRESS":                  2,
		"COMPLETED":                    3,
	}
)

func (x DirectoryStatus) Enum() *DirectoryStatus {
	p := new(DirectoryStatus)
	*p = x
	return p
}

func (x DirectoryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectoryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_directories_directories_proto_enumTypes[2].Descriptor()
}

func (DirectoryStatus) Type() protoreflect.EnumType {
	return &file_scalekit_v1_directories_directories_proto_enumTypes[2]
}

func (x DirectoryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectoryStatus.Descriptor instead.
func (DirectoryStatus) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{2}
}

type SecretStatus int32

const (
	SecretStatus_ACTIVE   SecretStatus = 0
	SecretStatus_INACTIVE SecretStatus = 1
)

// Enum value maps for SecretStatus.
var (
	SecretStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	SecretStatus_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x SecretStatus) Enum() *SecretStatus {
	p := new(SecretStatus)
	*p = x
	return p
}

func (x SecretStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_directories_directories_proto_enumTypes[3].Descriptor()
}

func (SecretStatus) Type() protoreflect.EnumType {
	return &file_scalekit_v1_directories_directories_proto_enumTypes[3]
}

func (x SecretStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretStatus.Descriptor instead.
func (SecretStatus) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{3}
}

type GetDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *GetDirectoryRequest) Reset() {
	*x = GetDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDirectoryRequest) ProtoMessage() {}

func (x *GetDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDirectoryRequest.ProtoReflect.Descriptor instead.
func (*GetDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{0}
}

func (x *GetDirectoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDirectoryRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory *Directory `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *GetDirectoryResponse) Reset() {
	*x = GetDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDirectoryResponse) ProtoMessage() {}

func (x *GetDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDirectoryResponse.ProtoReflect.Descriptor instead.
func (*GetDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{1}
}

func (x *GetDirectoryResponse) GetDirectory() *Directory {
	if x != nil {
		return x.Directory
	}
	return nil
}

type CreateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Directory      *CreateDirectory `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *CreateDirectoryRequest) Reset() {
	*x = CreateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRequest) ProtoMessage() {}

func (x *CreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDirectoryRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateDirectoryRequest) GetDirectory() *CreateDirectory {
	if x != nil {
		return x.Directory
	}
	return nil
}

type CreateDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryType     DirectoryType     `protobuf:"varint,1,opt,name=directory_type,json=directoryType,proto3,enum=scalekit.v1.directories.DirectoryType" json:"directory_type,omitempty"`
	DirectoryProvider DirectoryProvider `protobuf:"varint,2,opt,name=directory_provider,json=directoryProvider,proto3,enum=scalekit.v1.directories.DirectoryProvider" json:"directory_provider,omitempty"`
}

func (x *CreateDirectory) Reset() {
	*x = CreateDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectory) ProtoMessage() {}

func (x *CreateDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectory.ProtoReflect.Descriptor instead.
func (*CreateDirectory) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDirectory) GetDirectoryType() DirectoryType {
	if x != nil {
		return x.DirectoryType
	}
	return DirectoryType_DIRECTORY_TYPE_UNSPECIFIED
}

func (x *CreateDirectory) GetDirectoryProvider() DirectoryProvider {
	if x != nil {
		return x.DirectoryProvider
	}
	return DirectoryProvider_DIRECTORY_PROVIDER_UNSPECIFIED
}

type CreateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory *Directory `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *CreateDirectoryResponse) Reset() {
	*x = CreateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryResponse) ProtoMessage() {}

func (x *CreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDirectoryResponse) GetDirectory() *Directory {
	if x != nil {
		return x.Directory
	}
	return nil
}

type UpdateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string           `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Directory      *UpdateDirectory `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *UpdateDirectoryRequest) Reset() {
	*x = UpdateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDirectoryRequest) ProtoMessage() {}

func (x *UpdateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDirectoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDirectoryRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateDirectoryRequest) GetDirectory() *UpdateDirectory {
	if x != nil {
		return x.Directory
	}
	return nil
}

type UpdateDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DirectoryType     DirectoryType       `protobuf:"varint,3,opt,name=directory_type,json=directoryType,proto3,enum=scalekit.v1.directories.DirectoryType" json:"directory_type,omitempty"`
	Enabled           bool                `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DirectoryProvider DirectoryProvider   `protobuf:"varint,8,opt,name=directory_provider,json=directoryProvider,proto3,enum=scalekit.v1.directories.DirectoryProvider" json:"directory_provider,omitempty"`
	Status            DirectoryStatus     `protobuf:"varint,9,opt,name=status,proto3,enum=scalekit.v1.directories.DirectoryStatus" json:"status,omitempty"`
	Mappings          []*DirectoryMapping `protobuf:"bytes,10,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *UpdateDirectory) Reset() {
	*x = UpdateDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDirectory) ProtoMessage() {}

func (x *UpdateDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDirectory.ProtoReflect.Descriptor instead.
func (*UpdateDirectory) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDirectory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDirectory) GetDirectoryType() DirectoryType {
	if x != nil {
		return x.DirectoryType
	}
	return DirectoryType_DIRECTORY_TYPE_UNSPECIFIED
}

func (x *UpdateDirectory) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateDirectory) GetDirectoryProvider() DirectoryProvider {
	if x != nil {
		return x.DirectoryProvider
	}
	return DirectoryProvider_DIRECTORY_PROVIDER_UNSPECIFIED
}

func (x *UpdateDirectory) GetStatus() DirectoryStatus {
	if x != nil {
		return x.Status
	}
	return DirectoryStatus_DIRECTORY_STATUS_UNSPECIFIED
}

func (x *UpdateDirectory) GetMappings() []*DirectoryMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type UpdateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory *Directory `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *UpdateDirectoryResponse) Reset() {
	*x = UpdateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDirectoryResponse) ProtoMessage() {}

func (x *UpdateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*UpdateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDirectoryResponse) GetDirectory() *Directory {
	if x != nil {
		return x.Directory
	}
	return nil
}

type ListDirectoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ListDirectoriesRequest) Reset() {
	*x = ListDirectoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoriesRequest) ProtoMessage() {}

func (x *ListDirectoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoriesRequest.ProtoReflect.Descriptor instead.
func (*ListDirectoriesRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{8}
}

func (x *ListDirectoriesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type ListDirectoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directories []*Directory `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
}

func (x *ListDirectoriesResponse) Reset() {
	*x = ListDirectoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoriesResponse) ProtoMessage() {}

func (x *ListDirectoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoriesResponse.ProtoReflect.Descriptor instead.
func (*ListDirectoriesResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{9}
}

func (x *ListDirectoriesResponse) GetDirectories() []*Directory {
	if x != nil {
		return x.Directories
	}
	return nil
}

type ListDirectoryUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId   string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DirectoryId      string                 `protobuf:"bytes,2,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	PageSize         uint32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken        string                 `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	IncludeDetail    *bool                  `protobuf:"varint,5,opt,name=include_detail,json=includeDetail,proto3,oneof" json:"include_detail,omitempty"`
	DirectoryGroupId *string                `protobuf:"bytes,6,opt,name=directory_group_id,json=directoryGroupId,proto3,oneof" json:"directory_group_id,omitempty"`
	UpdatedAfter     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_after,json=updatedAfter,proto3,oneof" json:"updated_after,omitempty"`
}

func (x *ListDirectoryUsersRequest) Reset() {
	*x = ListDirectoryUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryUsersRequest) ProtoMessage() {}

func (x *ListDirectoryUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryUsersRequest.ProtoReflect.Descriptor instead.
func (*ListDirectoryUsersRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{10}
}

func (x *ListDirectoryUsersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDirectoryUsersRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ListDirectoryUsersRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDirectoryUsersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDirectoryUsersRequest) GetIncludeDetail() bool {
	if x != nil && x.IncludeDetail != nil {
		return *x.IncludeDetail
	}
	return false
}

func (x *ListDirectoryUsersRequest) GetDirectoryGroupId() string {
	if x != nil && x.DirectoryGroupId != nil {
		return *x.DirectoryGroupId
	}
	return ""
}

func (x *ListDirectoryUsersRequest) GetUpdatedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAfter
	}
	return nil
}

type ListDirectoryUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users         []*DirectoryUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	TotalSize     uint32           `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	NextPageToken string           `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PrevPageToken string           `protobuf:"bytes,4,opt,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
}

func (x *ListDirectoryUsersResponse) Reset() {
	*x = ListDirectoryUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryUsersResponse) ProtoMessage() {}

func (x *ListDirectoryUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryUsersResponse.ProtoReflect.Descriptor instead.
func (*ListDirectoryUsersResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{11}
}

func (x *ListDirectoryUsersResponse) GetUsers() []*DirectoryUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListDirectoryUsersResponse) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListDirectoryUsersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListDirectoryUsersResponse) GetPrevPageToken() string {
	if x != nil {
		return x.PrevPageToken
	}
	return ""
}

type ListDirectoryGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DirectoryId    string                 `protobuf:"bytes,2,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	PageSize       uint32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string                 `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	UpdatedAfter   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_after,json=updatedAfter,proto3,oneof" json:"updated_after,omitempty"`
	IncludeDetail  *bool                  `protobuf:"varint,6,opt,name=include_detail,json=includeDetail,proto3,oneof" json:"include_detail,omitempty"`
}

func (x *ListDirectoryGroupsRequest) Reset() {
	*x = ListDirectoryGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryGroupsRequest) ProtoMessage() {}

func (x *ListDirectoryGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListDirectoryGroupsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{12}
}

func (x *ListDirectoryGroupsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDirectoryGroupsRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

func (x *ListDirectoryGroupsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDirectoryGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDirectoryGroupsRequest) GetUpdatedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAfter
	}
	return nil
}

func (x *ListDirectoryGroupsRequest) GetIncludeDetail() bool {
	if x != nil && x.IncludeDetail != nil {
		return *x.IncludeDetail
	}
	return false
}

type ListDirectoryGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups        []*DirectoryGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	TotalSize     uint32            `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	NextPageToken string            `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PrevPageToken string            `protobuf:"bytes,4,opt,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
}

func (x *ListDirectoryGroupsResponse) Reset() {
	*x = ListDirectoryGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryGroupsResponse) ProtoMessage() {}

func (x *ListDirectoryGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListDirectoryGroupsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{13}
}

func (x *ListDirectoryGroupsResponse) GetGroups() []*DirectoryGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ListDirectoryGroupsResponse) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListDirectoryGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListDirectoryGroupsResponse) GetPrevPageToken() string {
	if x != nil {
		return x.PrevPageToken
	}
	return ""
}

type Directory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DirectoryType     DirectoryType          `protobuf:"varint,3,opt,name=directory_type,json=directoryType,proto3,enum=scalekit.v1.directories.DirectoryType" json:"directory_type,omitempty"`
	OrganizationId    string                 `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Enabled           bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DirectoryProvider DirectoryProvider      `protobuf:"varint,6,opt,name=directory_provider,json=directoryProvider,proto3,enum=scalekit.v1.directories.DirectoryProvider" json:"directory_provider,omitempty"`
	LastSyncedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_synced_at,json=lastSyncedAt,proto3" json:"last_synced_at,omitempty"`
	DirectoryEndpoint string                 `protobuf:"bytes,8,opt,name=directory_endpoint,json=directoryEndpoint,proto3" json:"directory_endpoint,omitempty"`
	TotalUsers        int32                  `protobuf:"varint,9,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	TotalGroups       int32                  `protobuf:"varint,10,opt,name=total_groups,json=totalGroups,proto3" json:"total_groups,omitempty"`
	Secrets           []*Secret              `protobuf:"bytes,11,rep,name=secrets,proto3" json:"secrets,omitempty"`
	Stats             *Stats                 `protobuf:"bytes,12,opt,name=stats,proto3" json:"stats,omitempty"`
	RoleAssignments   *RoleAssignments       `protobuf:"bytes,13,opt,name=role_assignments,json=roleAssignments,proto3" json:"role_assignments,omitempty"`
	AttributeMappings *AttributeMappings     `protobuf:"bytes,14,opt,name=attribute_mappings,json=attributeMappings,proto3" json:"attribute_mappings,omitempty"`
}

func (x *Directory) Reset() {
	*x = Directory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Directory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Directory) ProtoMessage() {}

func (x *Directory) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Directory.ProtoReflect.Descriptor instead.
func (*Directory) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{14}
}

func (x *Directory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Directory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Directory) GetDirectoryType() DirectoryType {
	if x != nil {
		return x.DirectoryType
	}
	return DirectoryType_DIRECTORY_TYPE_UNSPECIFIED
}

func (x *Directory) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Directory) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Directory) GetDirectoryProvider() DirectoryProvider {
	if x != nil {
		return x.DirectoryProvider
	}
	return DirectoryProvider_DIRECTORY_PROVIDER_UNSPECIFIED
}

func (x *Directory) GetLastSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSyncedAt
	}
	return nil
}

func (x *Directory) GetDirectoryEndpoint() string {
	if x != nil {
		return x.DirectoryEndpoint
	}
	return ""
}

func (x *Directory) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *Directory) GetTotalGroups() int32 {
	if x != nil {
		return x.TotalGroups
	}
	return 0
}

func (x *Directory) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Directory) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Directory) GetRoleAssignments() *RoleAssignments {
	if x != nil {
		return x.RoleAssignments
	}
	return nil
}

func (x *Directory) GetAttributeMappings() *AttributeMappings {
	if x != nil {
		return x.AttributeMappings
	}
	return nil
}

type ToggleDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ToggleDirectoryRequest) Reset() {
	*x = ToggleDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleDirectoryRequest) ProtoMessage() {}

func (x *ToggleDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleDirectoryRequest.ProtoReflect.Descriptor instead.
func (*ToggleDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{15}
}

func (x *ToggleDirectoryRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ToggleDirectoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ToggleDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *ToggleDirectoryResponse) Reset() {
	*x = ToggleDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleDirectoryResponse) ProtoMessage() {}

func (x *ToggleDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleDirectoryResponse.ProtoReflect.Descriptor instead.
func (*ToggleDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{16}
}

func (x *ToggleDirectoryResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleDirectoryResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type DirectoryMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	MapTo       string `protobuf:"bytes,2,opt,name=map_to,json=mapTo,proto3" json:"map_to,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *DirectoryMapping) Reset() {
	*x = DirectoryMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryMapping) ProtoMessage() {}

func (x *DirectoryMapping) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryMapping.ProtoReflect.Descriptor instead.
func (*DirectoryMapping) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{17}
}

func (x *DirectoryMapping) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DirectoryMapping) GetMapTo() string {
	if x != nil {
		return x.MapTo
	}
	return ""
}

func (x *DirectoryMapping) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type DirectoryUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email             string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PreferredUsername string                 `protobuf:"bytes,3,opt,name=preferred_username,json=preferredUsername,proto3" json:"preferred_username,omitempty"`
	GivenName         string                 `protobuf:"bytes,4,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	FamilyName        string                 `protobuf:"bytes,5,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Emails            []string               `protobuf:"bytes,16,rep,name=emails,proto3" json:"emails,omitempty"`
	Groups            []*DirectoryGroup      `protobuf:"bytes,17,rep,name=groups,proto3" json:"groups,omitempty"`
	UserDetail        *structpb.Struct       `protobuf:"bytes,18,opt,name=user_detail,json=userDetail,proto3" json:"user_detail,omitempty"`
}

func (x *DirectoryUser) Reset() {
	*x = DirectoryUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryUser) ProtoMessage() {}

func (x *DirectoryUser) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryUser.ProtoReflect.Descriptor instead.
func (*DirectoryUser) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{18}
}

func (x *DirectoryUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DirectoryUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DirectoryUser) GetPreferredUsername() string {
	if x != nil {
		return x.PreferredUsername
	}
	return ""
}

func (x *DirectoryUser) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *DirectoryUser) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *DirectoryUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DirectoryUser) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *DirectoryUser) GetGroups() []*DirectoryGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *DirectoryUser) GetUserDetail() *structpb.Struct {
	if x != nil {
		return x.UserDetail
	}
	return nil
}

type DirectoryGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	TotalUsers  int32                  `protobuf:"varint,3,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	GroupDetail *structpb.Struct       `protobuf:"bytes,5,opt,name=group_detail,json=groupDetail,proto3" json:"group_detail,omitempty"`
}

func (x *DirectoryGroup) Reset() {
	*x = DirectoryGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryGroup) ProtoMessage() {}

func (x *DirectoryGroup) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryGroup.ProtoReflect.Descriptor instead.
func (*DirectoryGroup) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{19}
}

func (x *DirectoryGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DirectoryGroup) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DirectoryGroup) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *DirectoryGroup) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DirectoryGroup) GetGroupDetail() *structpb.Struct {
	if x != nil {
		return x.GroupDetail
	}
	return nil
}

type CreateDirectorySecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DirectoryId    string `protobuf:"bytes,2,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
}

func (x *CreateDirectorySecretRequest) Reset() {
	*x = CreateDirectorySecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectorySecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectorySecretRequest) ProtoMessage() {}

func (x *CreateDirectorySecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectorySecretRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectorySecretRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{20}
}

func (x *CreateDirectorySecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateDirectorySecretRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

type CreateDirectorySecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainSecret string  `protobuf:"bytes,1,opt,name=plain_secret,json=plainSecret,proto3" json:"plain_secret,omitempty"`
	Secret      *Secret `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *CreateDirectorySecretResponse) Reset() {
	*x = CreateDirectorySecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectorySecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectorySecretResponse) ProtoMessage() {}

func (x *CreateDirectorySecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectorySecretResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectorySecretResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{21}
}

func (x *CreateDirectorySecretResponse) GetPlainSecret() string {
	if x != nil {
		return x.PlainSecret
	}
	return ""
}

func (x *CreateDirectorySecretResponse) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

type RegenerateDirectorySecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DirectoryId    string `protobuf:"bytes,2,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
}

func (x *RegenerateDirectorySecretRequest) Reset() {
	*x = RegenerateDirectorySecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateDirectorySecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateDirectorySecretRequest) ProtoMessage() {}

func (x *RegenerateDirectorySecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateDirectorySecretRequest.ProtoReflect.Descriptor instead.
func (*RegenerateDirectorySecretRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{22}
}

func (x *RegenerateDirectorySecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RegenerateDirectorySecretRequest) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

type RegenerateDirectorySecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainSecret string  `protobuf:"bytes,1,opt,name=plain_secret,json=plainSecret,proto3" json:"plain_secret,omitempty"`
	Secret      *Secret `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *RegenerateDirectorySecretResponse) Reset() {
	*x = RegenerateDirectorySecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateDirectorySecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateDirectorySecretResponse) ProtoMessage() {}

func (x *RegenerateDirectorySecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateDirectorySecretResponse.ProtoReflect.Descriptor instead.
func (*RegenerateDirectorySecretResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{23}
}

func (x *RegenerateDirectorySecretResponse) GetPlainSecret() string {
	if x != nil {
		return x.PlainSecret
	}
	return ""
}

func (x *RegenerateDirectorySecretResponse) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	SecretSuffix string                 `protobuf:"bytes,4,opt,name=secret_suffix,json=secretSuffix,proto3" json:"secret_suffix,omitempty"`
	Status       SecretStatus           `protobuf:"varint,5,opt,name=status,proto3,enum=scalekit.v1.directories.SecretStatus" json:"status,omitempty"`
	ExpireTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	LastUsedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_used_time,json=lastUsedTime,proto3" json:"last_used_time,omitempty"`
	DirectoryId  string                 `protobuf:"bytes,9,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{24}
}

func (x *Secret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Secret) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Secret) GetSecretSuffix() string {
	if x != nil {
		return x.SecretSuffix
	}
	return ""
}

func (x *Secret) GetStatus() SecretStatus {
	if x != nil {
		return x.Status
	}
	return SecretStatus_ACTIVE
}

func (x *Secret) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Secret) GetLastUsedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedTime
	}
	return nil
}

func (x *Secret) GetDirectoryId() string {
	if x != nil {
		return x.DirectoryId
	}
	return ""
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUsers     int32                  `protobuf:"varint,1,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	TotalGroups    int32                  `protobuf:"varint,2,opt,name=total_groups,json=totalGroups,proto3" json:"total_groups,omitempty"`
	GroupUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=group_updated_at,json=groupUpdatedAt,proto3" json:"group_updated_at,omitempty"`
	UserUpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=user_updated_at,json=userUpdatedAt,proto3" json:"user_updated_at,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{25}
}

func (x *Stats) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *Stats) GetTotalGroups() int32 {
	if x != nil {
		return x.TotalGroups
	}
	return 0
}

func (x *Stats) GetGroupUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GroupUpdatedAt
	}
	return nil
}

func (x *Stats) GetUserUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UserUpdatedAt
	}
	return nil
}

type AssignRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId  string           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id              string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RoleAssignments *RoleAssignments `protobuf:"bytes,3,opt,name=role_assignments,json=roleAssignments,proto3" json:"role_assignments,omitempty"`
}

func (x *AssignRolesRequest) Reset() {
	*x = AssignRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRolesRequest) ProtoMessage() {}

func (x *AssignRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRolesRequest.ProtoReflect.Descriptor instead.
func (*AssignRolesRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{26}
}

func (x *AssignRolesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *AssignRolesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssignRolesRequest) GetRoleAssignments() *RoleAssignments {
	if x != nil {
		return x.RoleAssignments
	}
	return nil
}

type RoleAssignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignments []*RoleAssignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
}

func (x *RoleAssignments) Reset() {
	*x = RoleAssignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignments) ProtoMessage() {}

func (x *RoleAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignments.ProtoReflect.Descriptor instead.
func (*RoleAssignments) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{27}
}

func (x *RoleAssignments) GetAssignments() []*RoleAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type AssignRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleAssignments *RoleAssignments `protobuf:"bytes,1,opt,name=role_assignments,json=roleAssignments,proto3" json:"role_assignments,omitempty"`
}

func (x *AssignRolesResponse) Reset() {
	*x = AssignRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRolesResponse) ProtoMessage() {}

func (x *AssignRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRolesResponse.ProtoReflect.Descriptor instead.
func (*AssignRolesResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{28}
}

func (x *AssignRolesResponse) GetRoleAssignments() *RoleAssignments {
	if x != nil {
		return x.RoleAssignments
	}
	return nil
}

type RoleAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RoleId  string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *RoleAssignment) Reset() {
	*x = RoleAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignment) ProtoMessage() {}

func (x *RoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignment.ProtoReflect.Descriptor instead.
func (*RoleAssignment) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{29}
}

func (x *RoleAssignment) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RoleAssignment) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type UpdateAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId   string             `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id               string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AttributeMapping *AttributeMappings `protobuf:"bytes,3,opt,name=attribute_mapping,json=attributeMapping,proto3" json:"attribute_mapping,omitempty"`
}

func (x *UpdateAttributesRequest) Reset() {
	*x = UpdateAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttributesRequest) ProtoMessage() {}

func (x *UpdateAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttributesRequest.ProtoReflect.Descriptor instead.
func (*UpdateAttributesRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateAttributesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateAttributesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAttributesRequest) GetAttributeMapping() *AttributeMappings {
	if x != nil {
		return x.AttributeMapping
	}
	return nil
}

type AttributeMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*AttributeMapping `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *AttributeMappings) Reset() {
	*x = AttributeMappings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeMappings) ProtoMessage() {}

func (x *AttributeMappings) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeMappings.ProtoReflect.Descriptor instead.
func (*AttributeMappings) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{31}
}

func (x *AttributeMappings) GetAttributes() []*AttributeMapping {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type AttributeMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	MapTo string `protobuf:"bytes,2,opt,name=map_to,json=mapTo,proto3" json:"map_to,omitempty"`
}

func (x *AttributeMapping) Reset() {
	*x = AttributeMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeMapping) ProtoMessage() {}

func (x *AttributeMapping) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeMapping.ProtoReflect.Descriptor instead.
func (*AttributeMapping) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{32}
}

func (x *AttributeMapping) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AttributeMapping) GetMapTo() string {
	if x != nil {
		return x.MapTo
	}
	return ""
}

type UpdateAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeMappings *AttributeMappings `protobuf:"bytes,1,opt,name=attribute_mappings,json=attributeMappings,proto3" json:"attribute_mappings,omitempty"`
}

func (x *UpdateAttributesResponse) Reset() {
	*x = UpdateAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_directories_directories_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttributesResponse) ProtoMessage() {}

func (x *UpdateAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_directories_directories_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttributesResponse.ProtoReflect.Descriptor instead.
func (*UpdateAttributesResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_directories_directories_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateAttributesResponse) GetAttributeMappings() *AttributeMappings {
	if x != nil {
		return x.AttributeMappings
	}
	return nil
}

var File_scalekit_v1_directories_directories_proto protoreflect.FileDescriptor

var file_scalekit_v1_directories_directories_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x39, 0x32, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x15, 0x22, 0x64, 0x69, 0x72, 0x5f,
	0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22,
	0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x12, 0x72, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x3d, 0x32, 0x24, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33,
	0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x20, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x98, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xff, 0x01, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0xbc, 0x01, 0x92, 0x41, 0xb8, 0x01, 0x32, 0xb5, 0x01, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xf7, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4e, 0x92, 0x41, 0x3f, 0x32, 0x24, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x17, 0x22, 0x6f, 0x72,
	0x67, 0x5f, 0x31, 0x32, 0x33, 0x36, 0x32, 0x34, 0x37, 0x34, 0x39, 0x30, 0x30, 0x36, 0x38, 0x34,
	0x38, 0x31, 0x34, 0x22, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x64, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x1c, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x0e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x0e, 0x32,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x06, 0x22, 0x53, 0x43, 0x49, 0x4d, 0x22, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42,
	0x1f, 0x92, 0x41, 0x11, 0x32, 0x07, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4a, 0x06, 0x22,
	0x4f, 0x4b, 0x54, 0x41, 0x22, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x1c, 0x92, 0x41, 0x13, 0x32, 0x11, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xd9,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20,
	0x3a, 0x04, 0x64, 0x69, 0x72, 0x5f, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04,
	0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x1c, 0x92, 0x41, 0x13, 0x32, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xb2, 0x04, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x12, 0x32, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x0a, 0x22, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20,
	0x41, 0x44, 0x22, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x19, 0x92, 0x41, 0x0e, 0x32, 0x04, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x06,
	0x22, 0x53, 0x43, 0x49, 0x4d, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x12, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x1d, 0x92, 0x41, 0x12, 0x32, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4a, 0x06, 0x22, 0x4f, 0x4b, 0x54, 0x41, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x26,
	0x92, 0x41, 0x1b, 0x32, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4a, 0x0b, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x22, 0xba, 0x48,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08,
	0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x22,
	0x79, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x1c, 0x92, 0x41, 0x13, 0x32, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xee, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xd3, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xa9, 0x01, 0x92, 0x41, 0x96, 0x01, 0x32, 0x7b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4a, 0x17, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x33, 0x36, 0x32, 0x34,
	0x37, 0x34, 0x39, 0x30, 0x30, 0x36, 0x38, 0x34, 0x38, 0x31, 0x34, 0x22, 0xba, 0x48, 0x0c, 0x72,
	0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x4e, 0x92, 0x41, 0x45, 0x32, 0x43, 0x41, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xda,
	0x09, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x3e, 0x32, 0x25, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33,
	0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18,
	0x20, 0x3a, 0x04, 0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65,
	0x92, 0x41, 0x53, 0x32, 0x3a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x15, 0x22, 0x64, 0x69, 0x72, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31,
	0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a,
	0x04, 0x64, 0x69, 0x72, 0x5f, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x69, 0x92, 0x41, 0x5f, 0x32, 0x59, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e,
	0x20, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x33, 0x30, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x4a, 0x02, 0x31, 0x30, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18,
	0x1e, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x90, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x32, 0x89, 0x01, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x27, 0x20,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xe1,
	0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0xb4, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x32, 0xa7,
	0x01, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x75, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x65, 0x73, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x70, 0x92, 0x41, 0x59, 0x32, 0x3e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4a, 0x17, 0x22, 0x64, 0x69, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x22, 0xba, 0x48, 0x11,
	0x72, 0x0f, 0x10, 0x01, 0x18, 0x25, 0x3a, 0x09, 0x64, 0x69, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x48, 0x01, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x6e, 0x92, 0x41,
	0x6b, 0x32, 0x51, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x20, 0x55, 0x73, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x36, 0x30, 0x31, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30,
	0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x48, 0x02, 0x52, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xeb, 0x05, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0xc4, 0x01, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0xa4, 0x01, 0x92, 0x41, 0xa0, 0x01, 0x32, 0x9d, 0x01, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x20,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2c, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x96, 0x01, 0x92, 0x41, 0x92, 0x01, 0x32, 0x8f, 0x01, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x27, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xbe, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x32, 0x8e, 0x01, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x27, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x27, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b, 0x07, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x50, 0x92, 0x41, 0x3e, 0x32, 0x25, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x15, 0x22,
	0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33,
	0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x6f,
	0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x53, 0x32,
	0x3a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x15, 0x22, 0x64, 0x69,
	0x72, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31,
	0x32, 0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x64, 0x69, 0x72,
	0x5f, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x67,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4a, 0x92, 0x41, 0x40, 0x32, 0x3a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x28, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x3a, 0x20, 0x33,
	0x30, 0x29, 0x4a, 0x02, 0x31, 0x30, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x1e, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6c, 0x92, 0x41,
	0x69, 0x32, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x32, 0x45,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x28, 0x52, 0x46, 0x43, 0x20, 0x33, 0x33, 0x33, 0x39, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x29, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x31, 0x2d,
	0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x48, 0x00, 0x52,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0xaf, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x32,
	0x77, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3b, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77,
	0x69, 0x73, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc1, 0x07, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x77, 0x92, 0x41, 0x74, 0x32, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69,
	0x74, 0x73, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x84, 0x01, 0x92, 0x41, 0x80, 0x01, 0x32, 0x7e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x90, 0x02, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xe7, 0x01, 0x92, 0x41, 0xe3, 0x01, 0x32, 0xe0, 0x01, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62,
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xac, 0x02, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x83, 0x02, 0x92, 0x41, 0xff, 0x01, 0x32, 0xfc, 0x01,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x20,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2c, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x20, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x11, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x3b, 0x32, 0x22, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x15,
	0x22, 0x64, 0x69, 0x72, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32,
	0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04,
	0x64, 0x69, 0x72, 0x5f, 0x52, 0x02, 0x69, 0x64, 0x12, 0x7d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x92, 0x41, 0x5c, 0x32, 0x4e, 0x4e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2c, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x0a, 0x22, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x20, 0x41, 0x44, 0x22, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x68, 0x92, 0x41, 0x5d, 0x32, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x6f, 0x72,
	0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x06, 0x22, 0x53, 0x43, 0x49, 0x4d, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41, 0x5d,
	0x32, 0x44, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31,
	0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x0c,
	0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6b,
	0x92, 0x41, 0x68, 0x32, 0x60, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0xd0, 0x01, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x75, 0x92,
	0x41, 0x6a, 0x32, 0x60, 0x54, 0x68, 0x65, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20,
	0x4f, 0x6b, 0x74, 0x61, 0x2c, 0x20, 0x4f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x6f,
	0x72, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x20, 0x49, 0x44, 0x4a, 0x06, 0x22, 0x4f, 0x4b, 0x54, 0x41, 0x22, 0xba, 0x48, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0xbf, 0x01, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x7d, 0x92, 0x41,
	0x7a, 0x32, 0x60, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x2d, 0x30, 0x31,
	0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x12, 0xed, 0x01, 0x0a, 0x12, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbd, 0x01, 0x92, 0x41, 0xaf, 0x01, 0x32, 0x65, 0x54,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x55, 0x52, 0x4c, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4a, 0x46, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79,
	0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x69, 0x72, 0x5f, 0x31, 0x32, 0x33, 0x32, 0x31, 0x32,
	0x33, 0x31, 0x32, 0x2f, 0x73, 0x63, 0x69, 0x6d, 0x2f, 0x76, 0x32, 0x22, 0xba, 0x48, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xd0, 0x0f, 0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f,
	0x92, 0x41, 0x2c, 0x32, 0x26, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x02, 0x31, 0x30, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a,
	0x02, 0x31, 0x30, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x95, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x55, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x92, 0x41, 0x62, 0x32, 0x60, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2c, 0x20,
	0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x5a, 0x92, 0x41, 0x57,
	0x32, 0x55, 0x52, 0x6f, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2c, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x12, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x32, 0x4c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x3e,
	0x32, 0x25, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32,
	0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48,
	0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x75, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x53, 0x32, 0x3a,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x15, 0x22, 0x64, 0x69, 0x72,
	0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32,
	0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x64, 0x69, 0x72, 0x5f,
	0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xd6, 0x04, 0x0a, 0x17, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x02, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0xf2, 0x01, 0x92, 0x41, 0xee, 0x01, 0x32,
	0xe5, 0x01, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49,
	0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x73, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x20, 0x49, 0x66,
	0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x98, 0x02, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xed,
	0x01, 0x92, 0x41, 0xe9, 0x01, 0x32, 0xc6, 0x01, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x4a, 0x1e,
	0x22, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x20, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xae, 0x05, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92,
	0x41, 0x24, 0x32, 0x07, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x4a, 0x19, 0x22, 0x64, 0x69,
	0x72, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31,
	0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x10, 0x01, 0x18, 0x24, 0x3a,
	0x08, 0x64, 0x69, 0x72, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x12, 0x32, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64,
	0x6f, 0x65, 0x22, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x5b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2c, 0x92, 0x41, 0x1f, 0x32, 0x12, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x20, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e,
	0x64, 0x6f, 0x65, 0x22, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x11,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x0a, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x06, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x22, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x12, 0x32, 0x09, 0x4c,
	0x61, 0x73, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x05, 0x22, 0x44, 0x6f, 0x65, 0x22, 0xba,
	0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x41, 0x74, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30,
	0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4c,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x5c, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32,
	0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x10,
	0x22, 0xb2, 0x03, 0x0a, 0x0e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x4d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3d, 0x92, 0x41, 0x26, 0x32, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44, 0x4a, 0x1a,
	0x22, 0x64, 0x69, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32,
	0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x11, 0x72, 0x0f, 0x10,
	0x01, 0x18, 0x24, 0x3a, 0x09, 0x64, 0x69, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x18, 0x32, 0x0c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x08, 0x22, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x22, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4a, 0x02, 0x31, 0x30, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x62, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x41,
	0x74, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x2d, 0x30, 0x31, 0x54, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0x92, 0x41, 0x2a, 0x32, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x49, 0x44, 0x4a, 0x17, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x33, 0x36,
	0x32, 0x34, 0x37, 0x34, 0x39, 0x30, 0x30, 0x36, 0x38, 0x34, 0x38, 0x31, 0x34, 0x22, 0xba, 0x48,
	0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04,
	0x64, 0x69, 0x72, 0x5f, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x22, 0xa4, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x90, 0x01, 0x92, 0x41, 0x8c,
	0x01, 0x32, 0x56, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e,
	0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x20,
	0x54, 0x65, 0x78, 0x74, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x32, 0x22, 0x64, 0x58, 0x4e, 0x6c,
	0x63, 0x6d, 0x35, 0x68, 0x62, 0x57, 0x55, 0x36, 0x63, 0x47, 0x46, 0x7a, 0x63, 0x33, 0x64, 0x76,
	0x63, 0x6d, 0x51, 0x36, 0x63, 0x32, 0x56, 0x6a, 0x63, 0x6d, 0x56, 0x30, 0x61, 0x32, 0x56, 0x35,
	0x4d, 0x54, 0x49, 0x7a, 0x4e, 0x44, 0x55, 0x32, 0x4e, 0x7a, 0x67, 0x35, 0x22, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18,
	0x20, 0x3a, 0x04, 0x6f, 0x72, 0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba,
	0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x64, 0x69, 0x72, 0x5f, 0x52, 0x0b,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x21,
	0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x90, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x32,
	0x56, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x20, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x54, 0x65,
	0x78, 0x74, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x32, 0x22, 0x64, 0x58, 0x4e, 0x6c, 0x63, 0x6d,
	0x35, 0x68, 0x62, 0x57, 0x55, 0x36, 0x63, 0x47, 0x46, 0x7a, 0x63, 0x33, 0x64, 0x76, 0x63, 0x6d,
	0x51, 0x36, 0x63, 0x32, 0x56, 0x6a, 0x63, 0x6d, 0x56, 0x30, 0x61, 0x32, 0x56, 0x35, 0x4d, 0x54,
	0x49, 0x7a, 0x4e, 0x44, 0x55, 0x32, 0x4e, 0x7a, 0x67, 0x35, 0x22, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xe4, 0x04, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba,
	0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x73, 0x65, 0x63, 0x5f, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x67, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31,
	0x30, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4a, 0x06, 0x22, 0x4e, 0x7a, 0x67, 0x35, 0x22, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x5b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x08, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32,
	0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x16, 0x22, 0x32,
	0x30, 0x32, 0x35, 0x2d, 0x31, 0x30, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
	0x30, 0x30, 0x5a, 0x22, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x6d, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x20,
	0x55, 0x73, 0x65, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34,
	0x2d, 0x31, 0x30, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a,
	0x22, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5c, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x27, 0x32, 0x0c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x49, 0x44, 0x4a, 0x17, 0x22, 0x64, 0x69, 0x72, 0x5f, 0x31,
	0x32, 0x33, 0x36, 0x32, 0x34, 0x37, 0x34, 0x39, 0x30, 0x30, 0x36, 0x38, 0x34, 0x38, 0x31, 0x34,
	0x22, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x64, 0x69, 0x72, 0x5f,
	0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb7, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x92, 0x41,
	0x22, 0x32, 0x1c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a,
	0x02, 0x31, 0x30, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x49, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32, 0x2a, 0x4d, 0x61, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x41, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x2d, 0x30, 0x31, 0x54,
	0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x29, 0x4d, 0x61, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x41, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x20, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a,
	0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x6a, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x6f, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a,
	0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x5f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0x92, 0x41, 0x38, 0x32, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x17, 0x22, 0x64, 0x69, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x22, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x5a, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x41, 0x92, 0x41, 0x35, 0x32, 0x1c, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4a, 0x15, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x31, 0x32, 0x31, 0x33,
	0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x6f, 0x72,
	0x67, 0x5f, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10, 0x01, 0x18, 0x20, 0x3a, 0x04, 0x64, 0x69, 0x72, 0x5f, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x5e, 0x0a, 0x11,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x10,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x54, 0x6f, 0x22, 0x75, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x43, 0x0a, 0x0d,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x43, 0x49, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x44, 0x41, 0x50, 0x10,
	0x02, 0x2a, 0x78, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4b,
	0x54, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x41, 0x44,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x54, 0x48, 0x30, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x4e, 0x45, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x05, 0x2a, 0x5e, 0x0a, 0x0f, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x1c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x28, 0x0a, 0x0c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x32, 0xb5, 0x23, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xd6,
	0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x45, 0x3a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x38, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe7, 0x01, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7d, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x3a,
	0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0xec, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x82, 0xb5, 0x18,
	0x02, 0x18, 0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x3a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x43, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xf4, 0x03, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86,
	0x03, 0x92, 0x41, 0xbc, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0xb5, 0x01, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x6f, 0x20,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x68, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x61,
	0x0a, 0x2c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x2f, 0x1a, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xdc, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe5,
	0x01, 0x92, 0x41, 0xa0, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x66, 0x0a,
	0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x32, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x83, 0x03, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02,
	0x92, 0x41, 0xbb, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x52, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x20, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x46, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3f,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82,
	0xb5, 0x18, 0x02, 0x18, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x32, 0x3f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xaa, 0x03, 0x0a,
	0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x02, 0x92, 0x41, 0xe0, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x61, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x5a, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x62, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5b,
	0x0a, 0x23, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x32, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xbe, 0x04, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x32, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x03, 0x92, 0x41, 0xe4, 0x02,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0xb2, 0x01, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73,
	0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x74, 0x6f, 0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x88, 0x01, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x80, 0x01, 0x0a, 0x45, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x35, 0x1a,
	0x33, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a,
	0x12, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xc4, 0x04, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x33, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x03,
	0x92, 0x41, 0xe6, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xb1, 0x01, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x8a, 0x01,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x82, 0x01, 0x0a, 0x46, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0xeb, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x92, 0x41, 0x78,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x4c, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x45, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x38,
	0x1a, 0x36, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x22, 0x4a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x8b, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x01, 0x92, 0x41, 0x80, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x50, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x49, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x3c, 0x1a,
	0x3a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18,
	0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x22, 0x55, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x3a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x0e, 0x92,
	0x41, 0x0b, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0xf7, 0x01,
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x10, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6e, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x56,
	0x44, 0xaa, 0x02, 0x17, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x56, 0x31, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0xca, 0x02, 0x17, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0xe2, 0x02, 0x23, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x5c, 0x56, 0x31, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scalekit_v1_directories_directories_proto_rawDescOnce sync.Once
	file_scalekit_v1_directories_directories_proto_rawDescData = file_scalekit_v1_directories_directories_proto_rawDesc
)

func file_scalekit_v1_directories_directories_proto_rawDescGZIP() []byte {
	file_scalekit_v1_directories_directories_proto_rawDescOnce.Do(func() {
		file_scalekit_v1_directories_directories_proto_rawDescData = protoimpl.X.CompressGZIP(file_scalekit_v1_directories_directories_proto_rawDescData)
	})
	return file_scalekit_v1_directories_directories_proto_rawDescData
}

var file_scalekit_v1_directories_directories_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_scalekit_v1_directories_directories_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_scalekit_v1_directories_directories_proto_goTypes = []interface{}{
	(DirectoryType)(0),                        // 0: scalekit.v1.directories.DirectoryType
	(DirectoryProvider)(0),                    // 1: scalekit.v1.directories.DirectoryProvider
	(DirectoryStatus)(0),                      // 2: scalekit.v1.directories.DirectoryStatus
	(SecretStatus)(0),                         // 3: scalekit.v1.directories.SecretStatus
	(*GetDirectoryRequest)(nil),               // 4: scalekit.v1.directories.GetDirectoryRequest
	(*GetDirectoryResponse)(nil),              // 5: scalekit.v1.directories.GetDirectoryResponse
	(*CreateDirectoryRequest)(nil),            // 6: scalekit.v1.directories.CreateDirectoryRequest
	(*CreateDirectory)(nil),                   // 7: scalekit.v1.directories.CreateDirectory
	(*CreateDirectoryResponse)(nil),           // 8: scalekit.v1.directories.CreateDirectoryResponse
	(*UpdateDirectoryRequest)(nil),            // 9: scalekit.v1.directories.UpdateDirectoryRequest
	(*UpdateDirectory)(nil),                   // 10: scalekit.v1.directories.UpdateDirectory
	(*UpdateDirectoryResponse)(nil),           // 11: scalekit.v1.directories.UpdateDirectoryResponse
	(*ListDirectoriesRequest)(nil),            // 12: scalekit.v1.directories.ListDirectoriesRequest
	(*ListDirectoriesResponse)(nil),           // 13: scalekit.v1.directories.ListDirectoriesResponse
	(*ListDirectoryUsersRequest)(nil),         // 14: scalekit.v1.directories.ListDirectoryUsersRequest
	(*ListDirectoryUsersResponse)(nil),        // 15: scalekit.v1.directories.ListDirectoryUsersResponse
	(*ListDirectoryGroupsRequest)(nil),        // 16: scalekit.v1.directories.ListDirectoryGroupsRequest
	(*ListDirectoryGroupsResponse)(nil),       // 17: scalekit.v1.directories.ListDirectoryGroupsResponse
	(*Directory)(nil),                         // 18: scalekit.v1.directories.Directory
	(*ToggleDirectoryRequest)(nil),            // 19: scalekit.v1.directories.ToggleDirectoryRequest
	(*ToggleDirectoryResponse)(nil),           // 20: scalekit.v1.directories.ToggleDirectoryResponse
	(*DirectoryMapping)(nil),                  // 21: scalekit.v1.directories.DirectoryMapping
	(*DirectoryUser)(nil),                     // 22: scalekit.v1.directories.DirectoryUser
	(*DirectoryGroup)(nil),                    // 23: scalekit.v1.directories.DirectoryGroup
	(*CreateDirectorySecretRequest)(nil),      // 24: scalekit.v1.directories.CreateDirectorySecretRequest
	(*CreateDirectorySecretResponse)(nil),     // 25: scalekit.v1.directories.CreateDirectorySecretResponse
	(*RegenerateDirectorySecretRequest)(nil),  // 26: scalekit.v1.directories.RegenerateDirectorySecretRequest
	(*RegenerateDirectorySecretResponse)(nil), // 27: scalekit.v1.directories.RegenerateDirectorySecretResponse
	(*Secret)(nil),                            // 28: scalekit.v1.directories.Secret
	(*Stats)(nil),                             // 29: scalekit.v1.directories.Stats
	(*AssignRolesRequest)(nil),                // 30: scalekit.v1.directories.AssignRolesRequest
	(*RoleAssignments)(nil),                   // 31: scalekit.v1.directories.RoleAssignments
	(*AssignRolesResponse)(nil),               // 32: scalekit.v1.directories.AssignRolesResponse
	(*RoleAssignment)(nil),                    // 33: scalekit.v1.directories.RoleAssignment
	(*UpdateAttributesRequest)(nil),           // 34: scalekit.v1.directories.UpdateAttributesRequest
	(*AttributeMappings)(nil),                 // 35: scalekit.v1.directories.AttributeMappings
	(*AttributeMapping)(nil),                  // 36: scalekit.v1.directories.AttributeMapping
	(*UpdateAttributesResponse)(nil),          // 37: scalekit.v1.directories.UpdateAttributesResponse
	(*timestamppb.Timestamp)(nil),             // 38: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                   // 39: google.protobuf.Struct
}
var file_scalekit_v1_directories_directories_proto_depIdxs = []int32{
	18, // 0: scalekit.v1.directories.GetDirectoryResponse.directory:type_name -> scalekit.v1.directories.Directory
	7,  // 1: scalekit.v1.directories.CreateDirectoryRequest.directory:type_name -> scalekit.v1.directories.CreateDirectory
	0,  // 2: scalekit.v1.directories.CreateDirectory.directory_type:type_name -> scalekit.v1.directories.DirectoryType
	1,  // 3: scalekit.v1.directories.CreateDirectory.directory_provider:type_name -> scalekit.v1.directories.DirectoryProvider
	18, // 4: scalekit.v1.directories.CreateDirectoryResponse.directory:type_name -> scalekit.v1.directories.Directory
	10, // 5: scalekit.v1.directories.UpdateDirectoryRequest.directory:type_name -> scalekit.v1.directories.UpdateDirectory
	0,  // 6: scalekit.v1.directories.UpdateDirectory.directory_type:type_name -> scalekit.v1.directories.DirectoryType
	1,  // 7: scalekit.v1.directories.UpdateDirectory.directory_provider:type_name -> scalekit.v1.directories.DirectoryProvider
	2,  // 8: scalekit.v1.directories.UpdateDirectory.status:type_name -> scalekit.v1.directories.DirectoryStatus
	21, // 9: scalekit.v1.directories.UpdateDirectory.mappings:type_name -> scalekit.v1.directories.DirectoryMapping
	18, // 10: scalekit.v1.directories.UpdateDirectoryResponse.directory:type_name -> scalekit.v1.directories.Directory
	18, // 11: scalekit.v1.directories.ListDirectoriesResponse.directories:type_name -> scalekit.v1.directories.Directory
	38, // 12: scalekit.v1.directories.ListDirectoryUsersRequest.updated_after:type_name -> google.protobuf.Timestamp
	22, // 13: scalekit.v1.directories.ListDirectoryUsersResponse.users:type_name -> scalekit.v1.directories.DirectoryUser
	38, // 14: scalekit.v1.directories.ListDirectoryGroupsRequest.updated_after:type_name -> google.protobuf.Timestamp
	23, // 15: scalekit.v1.directories.ListDirectoryGroupsResponse.groups:type_name -> scalekit.v1.directories.DirectoryGroup
	0,  // 16: scalekit.v1.directories.Directory.directory_type:type_name -> scalekit.v1.directories.DirectoryType
	1,  // 17: scalekit.v1.directories.Directory.directory_provider:type_name -> scalekit.v1.directories.DirectoryProvider
	38, // 18: scalekit.v1.directories.Directory.last_synced_at:type_name -> google.protobuf.Timestamp
	28, // 19: scalekit.v1.directories.Directory.secrets:type_name -> scalekit.v1.directories.Secret
	29, // 20: scalekit.v1.directories.Directory.stats:type_name -> scalekit.v1.directories.Stats
	31, // 21: scalekit.v1.directories.Directory.role_assignments:type_name -> scalekit.v1.directories.RoleAssignments
	35, // 22: scalekit.v1.directories.Directory.attribute_mappings:type_name -> scalekit.v1.directories.AttributeMappings
	38, // 23: scalekit.v1.directories.DirectoryUser.updated_at:type_name -> google.protobuf.Timestamp
	23, // 24: scalekit.v1.directories.DirectoryUser.groups:type_name -> scalekit.v1.directories.DirectoryGroup
	39, // 25: scalekit.v1.directories.DirectoryUser.user_detail:type_name -> google.protobuf.Struct
	38, // 26: scalekit.v1.directories.DirectoryGroup.updated_at:type_name -> google.protobuf.Timestamp
	39, // 27: scalekit.v1.directories.DirectoryGroup.group_detail:type_name -> google.protobuf.Struct
	28, // 28: scalekit.v1.directories.CreateDirectorySecretResponse.secret:type_name -> scalekit.v1.directories.Secret
	28, // 29: scalekit.v1.directories.RegenerateDirectorySecretResponse.secret:type_name -> scalekit.v1.directories.Secret
	38, // 30: scalekit.v1.directories.Secret.create_time:type_name -> google.protobuf.Timestamp
	3,  // 31: scalekit.v1.directories.Secret.status:type_name -> scalekit.v1.directories.SecretStatus
	38, // 32: scalekit.v1.directories.Secret.expire_time:type_name -> google.protobuf.Timestamp
	38, // 33: scalekit.v1.directories.Secret.last_used_time:type_name -> google.protobuf.Timestamp
	38, // 34: scalekit.v1.directories.Stats.group_updated_at:type_name -> google.protobuf.Timestamp
	38, // 35: scalekit.v1.directories.Stats.user_updated_at:type_name -> google.protobuf.Timestamp
	31, // 36: scalekit.v1.directories.AssignRolesRequest.role_assignments:type_name -> scalekit.v1.directories.RoleAssignments
	33, // 37: scalekit.v1.directories.RoleAssignments.assignments:type_name -> scalekit.v1.directories.RoleAssignment
	31, // 38: scalekit.v1.directories.AssignRolesResponse.role_assignments:type_name -> scalekit.v1.directories.RoleAssignments
	35, // 39: scalekit.v1.directories.UpdateAttributesRequest.attribute_mapping:type_name -> scalekit.v1.directories.AttributeMappings
	36, // 40: scalekit.v1.directories.AttributeMappings.attributes:type_name -> scalekit.v1.directories.AttributeMapping
	35, // 41: scalekit.v1.directories.UpdateAttributesResponse.attribute_mappings:type_name -> scalekit.v1.directories.AttributeMappings
	6,  // 42: scalekit.v1.directories.DirectoryService.CreateDirectory:input_type -> scalekit.v1.directories.CreateDirectoryRequest
	9,  // 43: scalekit.v1.directories.DirectoryService.UpdateDirectory:input_type -> scalekit.v1.directories.UpdateDirectoryRequest
	30, // 44: scalekit.v1.directories.DirectoryService.AssignRoles:input_type -> scalekit.v1.directories.AssignRolesRequest
	34, // 45: scalekit.v1.directories.DirectoryService.UpdateAttributes:input_type -> scalekit.v1.directories.UpdateAttributesRequest
	4,  // 46: scalekit.v1.directories.DirectoryService.GetDirectory:input_type -> scalekit.v1.directories.GetDirectoryRequest
	12, // 47: scalekit.v1.directories.DirectoryService.ListDirectories:input_type -> scalekit.v1.directories.ListDirectoriesRequest
	19, // 48: scalekit.v1.directories.DirectoryService.EnableDirectory:input_type -> scalekit.v1.directories.ToggleDirectoryRequest
	19, // 49: scalekit.v1.directories.DirectoryService.DisableDirectory:input_type -> scalekit.v1.directories.ToggleDirectoryRequest
	14, // 50: scalekit.v1.directories.DirectoryService.ListDirectoryUsers:input_type -> scalekit.v1.directories.ListDirectoryUsersRequest
	16, // 51: scalekit.v1.directories.DirectoryService.ListDirectoryGroups:input_type -> scalekit.v1.directories.ListDirectoryGroupsRequest
	24, // 52: scalekit.v1.directories.DirectoryService.CreateDirectorySecret:input_type -> scalekit.v1.directories.CreateDirectorySecretRequest
	26, // 53: scalekit.v1.directories.DirectoryService.RegenerateDirectorySecret:input_type -> scalekit.v1.directories.RegenerateDirectorySecretRequest
	8,  // 54: scalekit.v1.directories.DirectoryService.CreateDirectory:output_type -> scalekit.v1.directories.CreateDirectoryResponse
	11, // 55: scalekit.v1.directories.DirectoryService.UpdateDirectory:output_type -> scalekit.v1.directories.UpdateDirectoryResponse
	32, // 56: scalekit.v1.directories.DirectoryService.AssignRoles:output_type -> scalekit.v1.directories.AssignRolesResponse
	37, // 57: scalekit.v1.directories.DirectoryService.UpdateAttributes:output_type -> scalekit.v1.directories.UpdateAttributesResponse
	5,  // 58: scalekit.v1.directories.DirectoryService.GetDirectory:output_type -> scalekit.v1.directories.GetDirectoryResponse
	13, // 59: scalekit.v1.directories.DirectoryService.ListDirectories:output_type -> scalekit.v1.directories.ListDirectoriesResponse
	20, // 60: scalekit.v1.directories.DirectoryService.EnableDirectory:output_type -> scalekit.v1.directories.ToggleDirectoryResponse
	20, // 61: scalekit.v1.directories.DirectoryService.DisableDirectory:output_type -> scalekit.v1.directories.ToggleDirectoryResponse
	15, // 62: scalekit.v1.directories.DirectoryService.ListDirectoryUsers:output_type -> scalekit.v1.directories.ListDirectoryUsersResponse
	17, // 63: scalekit.v1.directories.DirectoryService.ListDirectoryGroups:output_type -> scalekit.v1.directories.ListDirectoryGroupsResponse
	25, // 64: scalekit.v1.directories.DirectoryService.CreateDirectorySecret:output_type -> scalekit.v1.directories.CreateDirectorySecretResponse
	27, // 65: scalekit.v1.directories.DirectoryService.RegenerateDirectorySecret:output_type -> scalekit.v1.directories.RegenerateDirectorySecretResponse
	54, // [54:66] is the sub-list for method output_type
	42, // [42:54] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_scalekit_v1_directories_directories_proto_init() }
func file_scalekit_v1_directories_directories_proto_init() {
	if File_scalekit_v1_directories_directories_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scalekit_v1_directories_directories_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoryUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoryUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoryGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoryGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Directory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectorySecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectorySecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateDirectorySecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateDirectorySecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAssignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeMappings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_directories_directories_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scalekit_v1_directories_directories_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_scalekit_v1_directories_directories_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_scalekit_v1_directories_directories_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scalekit_v1_directories_directories_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scalekit_v1_directories_directories_proto_goTypes,
		DependencyIndexes: file_scalekit_v1_directories_directories_proto_depIdxs,
		EnumInfos:         file_scalekit_v1_directories_directories_proto_enumTypes,
		MessageInfos:      file_scalekit_v1_directories_directories_proto_msgTypes,
	}.Build()
	File_scalekit_v1_directories_directories_proto = out.File
	file_scalekit_v1_directories_directories_proto_rawDesc = nil
	file_scalekit_v1_directories_directories_proto_goTypes = nil
	file_scalekit_v1_directories_directories_proto_depIdxs = nil
}
