// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/sessions/sessions.proto

package sessionsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sessions "github.com/scalekit-inc/scalekit-sdk-go/v2/pkg/grpc/scalekit/v1/sessions"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "scalekit.v1.auditlogs.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceGetSessionProcedure is the fully-qualified name of the SessionService's GetSession
	// RPC.
	SessionServiceGetSessionProcedure = "/scalekit.v1.auditlogs.SessionService/GetSession"
	// SessionServiceRevokeSessionProcedure is the fully-qualified name of the SessionService's
	// RevokeSession RPC.
	SessionServiceRevokeSessionProcedure = "/scalekit.v1.auditlogs.SessionService/RevokeSession"
	// SessionServiceGetUserSessionsProcedure is the fully-qualified name of the SessionService's
	// GetUserSessions RPC.
	SessionServiceGetUserSessionsProcedure = "/scalekit.v1.auditlogs.SessionService/GetUserSessions"
)

// SessionServiceClient is a client for the scalekit.v1.auditlogs.SessionService service.
type SessionServiceClient interface {
	GetSession(context.Context, *connect.Request[sessions.SessionDetailsRequest]) (*connect.Response[sessions.SessionDetails], error)
	RevokeSession(context.Context, *connect.Request[sessions.RevokeSessionRequest]) (*connect.Response[sessions.RevokeSessionResponse], error)
	GetUserSessions(context.Context, *connect.Request[sessions.UserSessionDetailsRequest]) (*connect.Response[sessions.UserSessionDetails], error)
}

// NewSessionServiceClient constructs a client for the scalekit.v1.auditlogs.SessionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sessionServiceMethods := sessions.File_scalekit_v1_sessions_sessions_proto.Services().ByName("SessionService").Methods()
	return &sessionServiceClient{
		getSession: connect.NewClient[sessions.SessionDetailsRequest, sessions.SessionDetails](
			httpClient,
			baseURL+SessionServiceGetSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("GetSession")),
			connect.WithClientOptions(opts...),
		),
		revokeSession: connect.NewClient[sessions.RevokeSessionRequest, sessions.RevokeSessionResponse](
			httpClient,
			baseURL+SessionServiceRevokeSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeSession")),
			connect.WithClientOptions(opts...),
		),
		getUserSessions: connect.NewClient[sessions.UserSessionDetailsRequest, sessions.UserSessionDetails](
			httpClient,
			baseURL+SessionServiceGetUserSessionsProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("GetUserSessions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	getSession      *connect.Client[sessions.SessionDetailsRequest, sessions.SessionDetails]
	revokeSession   *connect.Client[sessions.RevokeSessionRequest, sessions.RevokeSessionResponse]
	getUserSessions *connect.Client[sessions.UserSessionDetailsRequest, sessions.UserSessionDetails]
}

// GetSession calls scalekit.v1.auditlogs.SessionService.GetSession.
func (c *sessionServiceClient) GetSession(ctx context.Context, req *connect.Request[sessions.SessionDetailsRequest]) (*connect.Response[sessions.SessionDetails], error) {
	return c.getSession.CallUnary(ctx, req)
}

// RevokeSession calls scalekit.v1.auditlogs.SessionService.RevokeSession.
func (c *sessionServiceClient) RevokeSession(ctx context.Context, req *connect.Request[sessions.RevokeSessionRequest]) (*connect.Response[sessions.RevokeSessionResponse], error) {
	return c.revokeSession.CallUnary(ctx, req)
}

// GetUserSessions calls scalekit.v1.auditlogs.SessionService.GetUserSessions.
func (c *sessionServiceClient) GetUserSessions(ctx context.Context, req *connect.Request[sessions.UserSessionDetailsRequest]) (*connect.Response[sessions.UserSessionDetails], error) {
	return c.getUserSessions.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the scalekit.v1.auditlogs.SessionService service.
type SessionServiceHandler interface {
	GetSession(context.Context, *connect.Request[sessions.SessionDetailsRequest]) (*connect.Response[sessions.SessionDetails], error)
	RevokeSession(context.Context, *connect.Request[sessions.RevokeSessionRequest]) (*connect.Response[sessions.RevokeSessionResponse], error)
	GetUserSessions(context.Context, *connect.Request[sessions.UserSessionDetailsRequest]) (*connect.Response[sessions.UserSessionDetails], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceMethods := sessions.File_scalekit_v1_sessions_sessions_proto.Services().ByName("SessionService").Methods()
	sessionServiceGetSessionHandler := connect.NewUnaryHandler(
		SessionServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(sessionServiceMethods.ByName("GetSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeSessionHandler := connect.NewUnaryHandler(
		SessionServiceRevokeSessionProcedure,
		svc.RevokeSession,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceGetUserSessionsHandler := connect.NewUnaryHandler(
		SessionServiceGetUserSessionsProcedure,
		svc.GetUserSessions,
		connect.WithSchema(sessionServiceMethods.ByName("GetUserSessions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.auditlogs.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceGetSessionProcedure:
			sessionServiceGetSessionHandler.ServeHTTP(w, r)
		case SessionServiceRevokeSessionProcedure:
			sessionServiceRevokeSessionHandler.ServeHTTP(w, r)
		case SessionServiceGetUserSessionsProcedure:
			sessionServiceGetUserSessionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) GetSession(context.Context, *connect.Request[sessions.SessionDetailsRequest]) (*connect.Response[sessions.SessionDetails], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auditlogs.SessionService.GetSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeSession(context.Context, *connect.Request[sessions.RevokeSessionRequest]) (*connect.Response[sessions.RevokeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auditlogs.SessionService.RevokeSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) GetUserSessions(context.Context, *connect.Request[sessions.UserSessionDetailsRequest]) (*connect.Response[sessions.UserSessionDetails], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.auditlogs.SessionService.GetUserSessions is not implemented"))
}
