// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/domains/domains.proto

package domainsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	domains "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/domains"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DomainServiceName is the fully-qualified name of the DomainService service.
	DomainServiceName = "scalekit.v1.domains.DomainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DomainServiceCreateDomainProcedure is the fully-qualified name of the DomainService's
	// CreateDomain RPC.
	DomainServiceCreateDomainProcedure = "/scalekit.v1.domains.DomainService/CreateDomain"
	// DomainServiceUpdateDomainProcedure is the fully-qualified name of the DomainService's
	// UpdateDomain RPC.
	DomainServiceUpdateDomainProcedure = "/scalekit.v1.domains.DomainService/UpdateDomain"
	// DomainServiceVerifyDomainProcedure is the fully-qualified name of the DomainService's
	// VerifyDomain RPC.
	DomainServiceVerifyDomainProcedure = "/scalekit.v1.domains.DomainService/VerifyDomain"
	// DomainServiceGetDomainProcedure is the fully-qualified name of the DomainService's GetDomain RPC.
	DomainServiceGetDomainProcedure = "/scalekit.v1.domains.DomainService/GetDomain"
	// DomainServiceDeleteDomainProcedure is the fully-qualified name of the DomainService's
	// DeleteDomain RPC.
	DomainServiceDeleteDomainProcedure = "/scalekit.v1.domains.DomainService/DeleteDomain"
	// DomainServiceListDomainsProcedure is the fully-qualified name of the DomainService's ListDomains
	// RPC.
	DomainServiceListDomainsProcedure = "/scalekit.v1.domains.DomainService/ListDomains"
	// DomainServiceListAuthorizedDomainsProcedure is the fully-qualified name of the DomainService's
	// ListAuthorizedDomains RPC.
	DomainServiceListAuthorizedDomainsProcedure = "/scalekit.v1.domains.DomainService/ListAuthorizedDomains"
)

// DomainServiceClient is a client for the scalekit.v1.domains.DomainService service.
type DomainServiceClient interface {
	CreateDomain(context.Context, *connect.Request[domains.CreateDomainRequest]) (*connect.Response[domains.CreateDomainResponse], error)
	UpdateDomain(context.Context, *connect.Request[domains.UpdateDomainRequest]) (*connect.Response[domains.UpdateDomainResponse], error)
	VerifyDomain(context.Context, *connect.Request[domains.VerifyDomainRequest]) (*connect.Response[wrapperspb.BoolValue], error)
	GetDomain(context.Context, *connect.Request[domains.GetDomainRequest]) (*connect.Response[domains.GetDomainResponse], error)
	DeleteDomain(context.Context, *connect.Request[domains.DeleteDomainRequest]) (*connect.Response[emptypb.Empty], error)
	ListDomains(context.Context, *connect.Request[domains.ListDomainRequest]) (*connect.Response[domains.ListDomainResponse], error)
	ListAuthorizedDomains(context.Context, *connect.Request[domains.ListAuthorizedDomainRequest]) (*connect.Response[domains.ListAuthorizedDomainResponse], error)
}

// NewDomainServiceClient constructs a client for the scalekit.v1.domains.DomainService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDomainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DomainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	domainServiceMethods := domains.File_scalekit_v1_domains_domains_proto.Services().ByName("DomainService").Methods()
	return &domainServiceClient{
		createDomain: connect.NewClient[domains.CreateDomainRequest, domains.CreateDomainResponse](
			httpClient,
			baseURL+DomainServiceCreateDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("CreateDomain")),
			connect.WithClientOptions(opts...),
		),
		updateDomain: connect.NewClient[domains.UpdateDomainRequest, domains.UpdateDomainResponse](
			httpClient,
			baseURL+DomainServiceUpdateDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("UpdateDomain")),
			connect.WithClientOptions(opts...),
		),
		verifyDomain: connect.NewClient[domains.VerifyDomainRequest, wrapperspb.BoolValue](
			httpClient,
			baseURL+DomainServiceVerifyDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("VerifyDomain")),
			connect.WithClientOptions(opts...),
		),
		getDomain: connect.NewClient[domains.GetDomainRequest, domains.GetDomainResponse](
			httpClient,
			baseURL+DomainServiceGetDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("GetDomain")),
			connect.WithClientOptions(opts...),
		),
		deleteDomain: connect.NewClient[domains.DeleteDomainRequest, emptypb.Empty](
			httpClient,
			baseURL+DomainServiceDeleteDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("DeleteDomain")),
			connect.WithClientOptions(opts...),
		),
		listDomains: connect.NewClient[domains.ListDomainRequest, domains.ListDomainResponse](
			httpClient,
			baseURL+DomainServiceListDomainsProcedure,
			connect.WithSchema(domainServiceMethods.ByName("ListDomains")),
			connect.WithClientOptions(opts...),
		),
		listAuthorizedDomains: connect.NewClient[domains.ListAuthorizedDomainRequest, domains.ListAuthorizedDomainResponse](
			httpClient,
			baseURL+DomainServiceListAuthorizedDomainsProcedure,
			connect.WithSchema(domainServiceMethods.ByName("ListAuthorizedDomains")),
			connect.WithClientOptions(opts...),
		),
	}
}

// domainServiceClient implements DomainServiceClient.
type domainServiceClient struct {
	createDomain          *connect.Client[domains.CreateDomainRequest, domains.CreateDomainResponse]
	updateDomain          *connect.Client[domains.UpdateDomainRequest, domains.UpdateDomainResponse]
	verifyDomain          *connect.Client[domains.VerifyDomainRequest, wrapperspb.BoolValue]
	getDomain             *connect.Client[domains.GetDomainRequest, domains.GetDomainResponse]
	deleteDomain          *connect.Client[domains.DeleteDomainRequest, emptypb.Empty]
	listDomains           *connect.Client[domains.ListDomainRequest, domains.ListDomainResponse]
	listAuthorizedDomains *connect.Client[domains.ListAuthorizedDomainRequest, domains.ListAuthorizedDomainResponse]
}

// CreateDomain calls scalekit.v1.domains.DomainService.CreateDomain.
func (c *domainServiceClient) CreateDomain(ctx context.Context, req *connect.Request[domains.CreateDomainRequest]) (*connect.Response[domains.CreateDomainResponse], error) {
	return c.createDomain.CallUnary(ctx, req)
}

// UpdateDomain calls scalekit.v1.domains.DomainService.UpdateDomain.
func (c *domainServiceClient) UpdateDomain(ctx context.Context, req *connect.Request[domains.UpdateDomainRequest]) (*connect.Response[domains.UpdateDomainResponse], error) {
	return c.updateDomain.CallUnary(ctx, req)
}

// VerifyDomain calls scalekit.v1.domains.DomainService.VerifyDomain.
func (c *domainServiceClient) VerifyDomain(ctx context.Context, req *connect.Request[domains.VerifyDomainRequest]) (*connect.Response[wrapperspb.BoolValue], error) {
	return c.verifyDomain.CallUnary(ctx, req)
}

// GetDomain calls scalekit.v1.domains.DomainService.GetDomain.
func (c *domainServiceClient) GetDomain(ctx context.Context, req *connect.Request[domains.GetDomainRequest]) (*connect.Response[domains.GetDomainResponse], error) {
	return c.getDomain.CallUnary(ctx, req)
}

// DeleteDomain calls scalekit.v1.domains.DomainService.DeleteDomain.
func (c *domainServiceClient) DeleteDomain(ctx context.Context, req *connect.Request[domains.DeleteDomainRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDomain.CallUnary(ctx, req)
}

// ListDomains calls scalekit.v1.domains.DomainService.ListDomains.
func (c *domainServiceClient) ListDomains(ctx context.Context, req *connect.Request[domains.ListDomainRequest]) (*connect.Response[domains.ListDomainResponse], error) {
	return c.listDomains.CallUnary(ctx, req)
}

// ListAuthorizedDomains calls scalekit.v1.domains.DomainService.ListAuthorizedDomains.
func (c *domainServiceClient) ListAuthorizedDomains(ctx context.Context, req *connect.Request[domains.ListAuthorizedDomainRequest]) (*connect.Response[domains.ListAuthorizedDomainResponse], error) {
	return c.listAuthorizedDomains.CallUnary(ctx, req)
}

// DomainServiceHandler is an implementation of the scalekit.v1.domains.DomainService service.
type DomainServiceHandler interface {
	CreateDomain(context.Context, *connect.Request[domains.CreateDomainRequest]) (*connect.Response[domains.CreateDomainResponse], error)
	UpdateDomain(context.Context, *connect.Request[domains.UpdateDomainRequest]) (*connect.Response[domains.UpdateDomainResponse], error)
	VerifyDomain(context.Context, *connect.Request[domains.VerifyDomainRequest]) (*connect.Response[wrapperspb.BoolValue], error)
	GetDomain(context.Context, *connect.Request[domains.GetDomainRequest]) (*connect.Response[domains.GetDomainResponse], error)
	DeleteDomain(context.Context, *connect.Request[domains.DeleteDomainRequest]) (*connect.Response[emptypb.Empty], error)
	ListDomains(context.Context, *connect.Request[domains.ListDomainRequest]) (*connect.Response[domains.ListDomainResponse], error)
	ListAuthorizedDomains(context.Context, *connect.Request[domains.ListAuthorizedDomainRequest]) (*connect.Response[domains.ListAuthorizedDomainResponse], error)
}

// NewDomainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDomainServiceHandler(svc DomainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	domainServiceMethods := domains.File_scalekit_v1_domains_domains_proto.Services().ByName("DomainService").Methods()
	domainServiceCreateDomainHandler := connect.NewUnaryHandler(
		DomainServiceCreateDomainProcedure,
		svc.CreateDomain,
		connect.WithSchema(domainServiceMethods.ByName("CreateDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceUpdateDomainHandler := connect.NewUnaryHandler(
		DomainServiceUpdateDomainProcedure,
		svc.UpdateDomain,
		connect.WithSchema(domainServiceMethods.ByName("UpdateDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceVerifyDomainHandler := connect.NewUnaryHandler(
		DomainServiceVerifyDomainProcedure,
		svc.VerifyDomain,
		connect.WithSchema(domainServiceMethods.ByName("VerifyDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceGetDomainHandler := connect.NewUnaryHandler(
		DomainServiceGetDomainProcedure,
		svc.GetDomain,
		connect.WithSchema(domainServiceMethods.ByName("GetDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceDeleteDomainHandler := connect.NewUnaryHandler(
		DomainServiceDeleteDomainProcedure,
		svc.DeleteDomain,
		connect.WithSchema(domainServiceMethods.ByName("DeleteDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceListDomainsHandler := connect.NewUnaryHandler(
		DomainServiceListDomainsProcedure,
		svc.ListDomains,
		connect.WithSchema(domainServiceMethods.ByName("ListDomains")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceListAuthorizedDomainsHandler := connect.NewUnaryHandler(
		DomainServiceListAuthorizedDomainsProcedure,
		svc.ListAuthorizedDomains,
		connect.WithSchema(domainServiceMethods.ByName("ListAuthorizedDomains")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.domains.DomainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DomainServiceCreateDomainProcedure:
			domainServiceCreateDomainHandler.ServeHTTP(w, r)
		case DomainServiceUpdateDomainProcedure:
			domainServiceUpdateDomainHandler.ServeHTTP(w, r)
		case DomainServiceVerifyDomainProcedure:
			domainServiceVerifyDomainHandler.ServeHTTP(w, r)
		case DomainServiceGetDomainProcedure:
			domainServiceGetDomainHandler.ServeHTTP(w, r)
		case DomainServiceDeleteDomainProcedure:
			domainServiceDeleteDomainHandler.ServeHTTP(w, r)
		case DomainServiceListDomainsProcedure:
			domainServiceListDomainsHandler.ServeHTTP(w, r)
		case DomainServiceListAuthorizedDomainsProcedure:
			domainServiceListAuthorizedDomainsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDomainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDomainServiceHandler struct{}

func (UnimplementedDomainServiceHandler) CreateDomain(context.Context, *connect.Request[domains.CreateDomainRequest]) (*connect.Response[domains.CreateDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.CreateDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) UpdateDomain(context.Context, *connect.Request[domains.UpdateDomainRequest]) (*connect.Response[domains.UpdateDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.UpdateDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) VerifyDomain(context.Context, *connect.Request[domains.VerifyDomainRequest]) (*connect.Response[wrapperspb.BoolValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.VerifyDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) GetDomain(context.Context, *connect.Request[domains.GetDomainRequest]) (*connect.Response[domains.GetDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.GetDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) DeleteDomain(context.Context, *connect.Request[domains.DeleteDomainRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.DeleteDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) ListDomains(context.Context, *connect.Request[domains.ListDomainRequest]) (*connect.Response[domains.ListDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.ListDomains is not implemented"))
}

func (UnimplementedDomainServiceHandler) ListAuthorizedDomains(context.Context, *connect.Request[domains.ListAuthorizedDomainRequest]) (*connect.Response[domains.ListAuthorizedDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.domains.DomainService.ListAuthorizedDomains is not implemented"))
}
