// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/users/users.proto

package usersconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	users "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/users"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "scalekit.v1.users.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/scalekit.v1.users.UserService/GetUser"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/scalekit.v1.users.UserService/ListUsers"
	// UserServiceSearchUsersProcedure is the fully-qualified name of the UserService's SearchUsers RPC.
	UserServiceSearchUsersProcedure = "/scalekit.v1.users.UserService/SearchUsers"
	// UserServiceSearchOrganizationUsersProcedure is the fully-qualified name of the UserService's
	// SearchOrganizationUsers RPC.
	UserServiceSearchOrganizationUsersProcedure = "/scalekit.v1.users.UserService/SearchOrganizationUsers"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/scalekit.v1.users.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/scalekit.v1.users.UserService/DeleteUser"
	// UserServiceCreateMembershipProcedure is the fully-qualified name of the UserService's
	// CreateMembership RPC.
	UserServiceCreateMembershipProcedure = "/scalekit.v1.users.UserService/CreateMembership"
	// UserServiceDeleteMembershipProcedure is the fully-qualified name of the UserService's
	// DeleteMembership RPC.
	UserServiceDeleteMembershipProcedure = "/scalekit.v1.users.UserService/DeleteMembership"
	// UserServiceUpdateMembershipProcedure is the fully-qualified name of the UserService's
	// UpdateMembership RPC.
	UserServiceUpdateMembershipProcedure = "/scalekit.v1.users.UserService/UpdateMembership"
	// UserServiceCreateUserAndMembershipProcedure is the fully-qualified name of the UserService's
	// CreateUserAndMembership RPC.
	UserServiceCreateUserAndMembershipProcedure = "/scalekit.v1.users.UserService/CreateUserAndMembership"
	// UserServiceListOrganizationUsersProcedure is the fully-qualified name of the UserService's
	// ListOrganizationUsers RPC.
	UserServiceListOrganizationUsersProcedure = "/scalekit.v1.users.UserService/ListOrganizationUsers"
	// UserServiceResendInviteProcedure is the fully-qualified name of the UserService's ResendInvite
	// RPC.
	UserServiceResendInviteProcedure = "/scalekit.v1.users.UserService/ResendInvite"
	// UserServiceListUserRolesProcedure is the fully-qualified name of the UserService's ListUserRoles
	// RPC.
	UserServiceListUserRolesProcedure = "/scalekit.v1.users.UserService/ListUserRoles"
	// UserServiceAssignUserRolesProcedure is the fully-qualified name of the UserService's
	// AssignUserRoles RPC.
	UserServiceAssignUserRolesProcedure = "/scalekit.v1.users.UserService/AssignUserRoles"
	// UserServiceRemoveUserRoleProcedure is the fully-qualified name of the UserService's
	// RemoveUserRole RPC.
	UserServiceRemoveUserRoleProcedure = "/scalekit.v1.users.UserService/RemoveUserRole"
	// UserServiceListUserPermissionsProcedure is the fully-qualified name of the UserService's
	// ListUserPermissions RPC.
	UserServiceListUserPermissionsProcedure = "/scalekit.v1.users.UserService/ListUserPermissions"
)

// UserServiceClient is a client for the scalekit.v1.users.UserService service.
type UserServiceClient interface {
	// Users
	GetUser(context.Context, *connect.Request[users.GetUserRequest]) (*connect.Response[users.GetUserResponse], error)
	ListUsers(context.Context, *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error)
	SearchUsers(context.Context, *connect.Request[users.SearchUsersRequest]) (*connect.Response[users.SearchUsersResponse], error)
	SearchOrganizationUsers(context.Context, *connect.Request[users.SearchOrganizationUsersRequest]) (*connect.Response[users.SearchOrganizationUsersResponse], error)
	UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[users.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	// Memberships
	CreateMembership(context.Context, *connect.Request[users.CreateMembershipRequest]) (*connect.Response[users.CreateMembershipResponse], error)
	// TODO Check cascade behaviour currently its ignored
	DeleteMembership(context.Context, *connect.Request[users.DeleteMembershipRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateMembership(context.Context, *connect.Request[users.UpdateMembershipRequest]) (*connect.Response[users.UpdateMembershipResponse], error)
	CreateUserAndMembership(context.Context, *connect.Request[users.CreateUserAndMembershipRequest]) (*connect.Response[users.CreateUserAndMembershipResponse], error)
	// only memberships of the organization
	ListOrganizationUsers(context.Context, *connect.Request[users.ListOrganizationUsersRequest]) (*connect.Response[users.ListOrganizationUsersResponse], error)
	ResendInvite(context.Context, *connect.Request[users.ResendInviteRequest]) (*connect.Response[users.ResendInviteResponse], error)
	// User Role Management
	ListUserRoles(context.Context, *connect.Request[users.ListUserRolesRequest]) (*connect.Response[users.ListUserRolesResponse], error)
	AssignUserRoles(context.Context, *connect.Request[users.AssignUserRolesRequest]) (*connect.Response[users.AssignUserRolesResponse], error)
	RemoveUserRole(context.Context, *connect.Request[users.RemoveUserRoleRequest]) (*connect.Response[emptypb.Empty], error)
	ListUserPermissions(context.Context, *connect.Request[users.ListUserPermissionsRequest]) (*connect.Response[users.ListUserPermissionsResponse], error)
}

// NewUserServiceClient constructs a client for the scalekit.v1.users.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := users.File_scalekit_v1_users_users_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getUser: connect.NewClient[users.GetUserRequest, users.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[users.ListUsersRequest, users.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		searchUsers: connect.NewClient[users.SearchUsersRequest, users.SearchUsersResponse](
			httpClient,
			baseURL+UserServiceSearchUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("SearchUsers")),
			connect.WithClientOptions(opts...),
		),
		searchOrganizationUsers: connect.NewClient[users.SearchOrganizationUsersRequest, users.SearchOrganizationUsersResponse](
			httpClient,
			baseURL+UserServiceSearchOrganizationUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("SearchOrganizationUsers")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[users.UpdateUserRequest, users.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[users.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		createMembership: connect.NewClient[users.CreateMembershipRequest, users.CreateMembershipResponse](
			httpClient,
			baseURL+UserServiceCreateMembershipProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateMembership")),
			connect.WithClientOptions(opts...),
		),
		deleteMembership: connect.NewClient[users.DeleteMembershipRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceDeleteMembershipProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteMembership")),
			connect.WithClientOptions(opts...),
		),
		updateMembership: connect.NewClient[users.UpdateMembershipRequest, users.UpdateMembershipResponse](
			httpClient,
			baseURL+UserServiceUpdateMembershipProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateMembership")),
			connect.WithClientOptions(opts...),
		),
		createUserAndMembership: connect.NewClient[users.CreateUserAndMembershipRequest, users.CreateUserAndMembershipResponse](
			httpClient,
			baseURL+UserServiceCreateUserAndMembershipProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUserAndMembership")),
			connect.WithClientOptions(opts...),
		),
		listOrganizationUsers: connect.NewClient[users.ListOrganizationUsersRequest, users.ListOrganizationUsersResponse](
			httpClient,
			baseURL+UserServiceListOrganizationUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListOrganizationUsers")),
			connect.WithClientOptions(opts...),
		),
		resendInvite: connect.NewClient[users.ResendInviteRequest, users.ResendInviteResponse](
			httpClient,
			baseURL+UserServiceResendInviteProcedure,
			connect.WithSchema(userServiceMethods.ByName("ResendInvite")),
			connect.WithClientOptions(opts...),
		),
		listUserRoles: connect.NewClient[users.ListUserRolesRequest, users.ListUserRolesResponse](
			httpClient,
			baseURL+UserServiceListUserRolesProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUserRoles")),
			connect.WithClientOptions(opts...),
		),
		assignUserRoles: connect.NewClient[users.AssignUserRolesRequest, users.AssignUserRolesResponse](
			httpClient,
			baseURL+UserServiceAssignUserRolesProcedure,
			connect.WithSchema(userServiceMethods.ByName("AssignUserRoles")),
			connect.WithClientOptions(opts...),
		),
		removeUserRole: connect.NewClient[users.RemoveUserRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceRemoveUserRoleProcedure,
			connect.WithSchema(userServiceMethods.ByName("RemoveUserRole")),
			connect.WithClientOptions(opts...),
		),
		listUserPermissions: connect.NewClient[users.ListUserPermissionsRequest, users.ListUserPermissionsResponse](
			httpClient,
			baseURL+UserServiceListUserPermissionsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUserPermissions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUser                 *connect.Client[users.GetUserRequest, users.GetUserResponse]
	listUsers               *connect.Client[users.ListUsersRequest, users.ListUsersResponse]
	searchUsers             *connect.Client[users.SearchUsersRequest, users.SearchUsersResponse]
	searchOrganizationUsers *connect.Client[users.SearchOrganizationUsersRequest, users.SearchOrganizationUsersResponse]
	updateUser              *connect.Client[users.UpdateUserRequest, users.UpdateUserResponse]
	deleteUser              *connect.Client[users.DeleteUserRequest, emptypb.Empty]
	createMembership        *connect.Client[users.CreateMembershipRequest, users.CreateMembershipResponse]
	deleteMembership        *connect.Client[users.DeleteMembershipRequest, emptypb.Empty]
	updateMembership        *connect.Client[users.UpdateMembershipRequest, users.UpdateMembershipResponse]
	createUserAndMembership *connect.Client[users.CreateUserAndMembershipRequest, users.CreateUserAndMembershipResponse]
	listOrganizationUsers   *connect.Client[users.ListOrganizationUsersRequest, users.ListOrganizationUsersResponse]
	resendInvite            *connect.Client[users.ResendInviteRequest, users.ResendInviteResponse]
	listUserRoles           *connect.Client[users.ListUserRolesRequest, users.ListUserRolesResponse]
	assignUserRoles         *connect.Client[users.AssignUserRolesRequest, users.AssignUserRolesResponse]
	removeUserRole          *connect.Client[users.RemoveUserRoleRequest, emptypb.Empty]
	listUserPermissions     *connect.Client[users.ListUserPermissionsRequest, users.ListUserPermissionsResponse]
}

// GetUser calls scalekit.v1.users.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[users.GetUserRequest]) (*connect.Response[users.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ListUsers calls scalekit.v1.users.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// SearchUsers calls scalekit.v1.users.UserService.SearchUsers.
func (c *userServiceClient) SearchUsers(ctx context.Context, req *connect.Request[users.SearchUsersRequest]) (*connect.Response[users.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// SearchOrganizationUsers calls scalekit.v1.users.UserService.SearchOrganizationUsers.
func (c *userServiceClient) SearchOrganizationUsers(ctx context.Context, req *connect.Request[users.SearchOrganizationUsersRequest]) (*connect.Response[users.SearchOrganizationUsersResponse], error) {
	return c.searchOrganizationUsers.CallUnary(ctx, req)
}

// UpdateUser calls scalekit.v1.users.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls scalekit.v1.users.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[users.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// CreateMembership calls scalekit.v1.users.UserService.CreateMembership.
func (c *userServiceClient) CreateMembership(ctx context.Context, req *connect.Request[users.CreateMembershipRequest]) (*connect.Response[users.CreateMembershipResponse], error) {
	return c.createMembership.CallUnary(ctx, req)
}

// DeleteMembership calls scalekit.v1.users.UserService.DeleteMembership.
func (c *userServiceClient) DeleteMembership(ctx context.Context, req *connect.Request[users.DeleteMembershipRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteMembership.CallUnary(ctx, req)
}

// UpdateMembership calls scalekit.v1.users.UserService.UpdateMembership.
func (c *userServiceClient) UpdateMembership(ctx context.Context, req *connect.Request[users.UpdateMembershipRequest]) (*connect.Response[users.UpdateMembershipResponse], error) {
	return c.updateMembership.CallUnary(ctx, req)
}

// CreateUserAndMembership calls scalekit.v1.users.UserService.CreateUserAndMembership.
func (c *userServiceClient) CreateUserAndMembership(ctx context.Context, req *connect.Request[users.CreateUserAndMembershipRequest]) (*connect.Response[users.CreateUserAndMembershipResponse], error) {
	return c.createUserAndMembership.CallUnary(ctx, req)
}

// ListOrganizationUsers calls scalekit.v1.users.UserService.ListOrganizationUsers.
func (c *userServiceClient) ListOrganizationUsers(ctx context.Context, req *connect.Request[users.ListOrganizationUsersRequest]) (*connect.Response[users.ListOrganizationUsersResponse], error) {
	return c.listOrganizationUsers.CallUnary(ctx, req)
}

// ResendInvite calls scalekit.v1.users.UserService.ResendInvite.
func (c *userServiceClient) ResendInvite(ctx context.Context, req *connect.Request[users.ResendInviteRequest]) (*connect.Response[users.ResendInviteResponse], error) {
	return c.resendInvite.CallUnary(ctx, req)
}

// ListUserRoles calls scalekit.v1.users.UserService.ListUserRoles.
func (c *userServiceClient) ListUserRoles(ctx context.Context, req *connect.Request[users.ListUserRolesRequest]) (*connect.Response[users.ListUserRolesResponse], error) {
	return c.listUserRoles.CallUnary(ctx, req)
}

// AssignUserRoles calls scalekit.v1.users.UserService.AssignUserRoles.
func (c *userServiceClient) AssignUserRoles(ctx context.Context, req *connect.Request[users.AssignUserRolesRequest]) (*connect.Response[users.AssignUserRolesResponse], error) {
	return c.assignUserRoles.CallUnary(ctx, req)
}

// RemoveUserRole calls scalekit.v1.users.UserService.RemoveUserRole.
func (c *userServiceClient) RemoveUserRole(ctx context.Context, req *connect.Request[users.RemoveUserRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeUserRole.CallUnary(ctx, req)
}

// ListUserPermissions calls scalekit.v1.users.UserService.ListUserPermissions.
func (c *userServiceClient) ListUserPermissions(ctx context.Context, req *connect.Request[users.ListUserPermissionsRequest]) (*connect.Response[users.ListUserPermissionsResponse], error) {
	return c.listUserPermissions.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the scalekit.v1.users.UserService service.
type UserServiceHandler interface {
	// Users
	GetUser(context.Context, *connect.Request[users.GetUserRequest]) (*connect.Response[users.GetUserResponse], error)
	ListUsers(context.Context, *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error)
	SearchUsers(context.Context, *connect.Request[users.SearchUsersRequest]) (*connect.Response[users.SearchUsersResponse], error)
	SearchOrganizationUsers(context.Context, *connect.Request[users.SearchOrganizationUsersRequest]) (*connect.Response[users.SearchOrganizationUsersResponse], error)
	UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[users.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	// Memberships
	CreateMembership(context.Context, *connect.Request[users.CreateMembershipRequest]) (*connect.Response[users.CreateMembershipResponse], error)
	// TODO Check cascade behaviour currently its ignored
	DeleteMembership(context.Context, *connect.Request[users.DeleteMembershipRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateMembership(context.Context, *connect.Request[users.UpdateMembershipRequest]) (*connect.Response[users.UpdateMembershipResponse], error)
	CreateUserAndMembership(context.Context, *connect.Request[users.CreateUserAndMembershipRequest]) (*connect.Response[users.CreateUserAndMembershipResponse], error)
	// only memberships of the organization
	ListOrganizationUsers(context.Context, *connect.Request[users.ListOrganizationUsersRequest]) (*connect.Response[users.ListOrganizationUsersResponse], error)
	ResendInvite(context.Context, *connect.Request[users.ResendInviteRequest]) (*connect.Response[users.ResendInviteResponse], error)
	// User Role Management
	ListUserRoles(context.Context, *connect.Request[users.ListUserRolesRequest]) (*connect.Response[users.ListUserRolesResponse], error)
	AssignUserRoles(context.Context, *connect.Request[users.AssignUserRolesRequest]) (*connect.Response[users.AssignUserRolesResponse], error)
	RemoveUserRole(context.Context, *connect.Request[users.RemoveUserRoleRequest]) (*connect.Response[emptypb.Empty], error)
	ListUserPermissions(context.Context, *connect.Request[users.ListUserPermissionsRequest]) (*connect.Response[users.ListUserPermissionsResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := users.File_scalekit_v1_users_users_proto.Services().ByName("UserService").Methods()
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchUsersHandler := connect.NewUnaryHandler(
		UserServiceSearchUsersProcedure,
		svc.SearchUsers,
		connect.WithSchema(userServiceMethods.ByName("SearchUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchOrganizationUsersHandler := connect.NewUnaryHandler(
		UserServiceSearchOrganizationUsersProcedure,
		svc.SearchOrganizationUsers,
		connect.WithSchema(userServiceMethods.ByName("SearchOrganizationUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateMembershipHandler := connect.NewUnaryHandler(
		UserServiceCreateMembershipProcedure,
		svc.CreateMembership,
		connect.WithSchema(userServiceMethods.ByName("CreateMembership")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteMembershipHandler := connect.NewUnaryHandler(
		UserServiceDeleteMembershipProcedure,
		svc.DeleteMembership,
		connect.WithSchema(userServiceMethods.ByName("DeleteMembership")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateMembershipHandler := connect.NewUnaryHandler(
		UserServiceUpdateMembershipProcedure,
		svc.UpdateMembership,
		connect.WithSchema(userServiceMethods.ByName("UpdateMembership")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateUserAndMembershipHandler := connect.NewUnaryHandler(
		UserServiceCreateUserAndMembershipProcedure,
		svc.CreateUserAndMembership,
		connect.WithSchema(userServiceMethods.ByName("CreateUserAndMembership")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListOrganizationUsersHandler := connect.NewUnaryHandler(
		UserServiceListOrganizationUsersProcedure,
		svc.ListOrganizationUsers,
		connect.WithSchema(userServiceMethods.ByName("ListOrganizationUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceResendInviteHandler := connect.NewUnaryHandler(
		UserServiceResendInviteProcedure,
		svc.ResendInvite,
		connect.WithSchema(userServiceMethods.ByName("ResendInvite")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUserRolesHandler := connect.NewUnaryHandler(
		UserServiceListUserRolesProcedure,
		svc.ListUserRoles,
		connect.WithSchema(userServiceMethods.ByName("ListUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceAssignUserRolesHandler := connect.NewUnaryHandler(
		UserServiceAssignUserRolesProcedure,
		svc.AssignUserRoles,
		connect.WithSchema(userServiceMethods.ByName("AssignUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRemoveUserRoleHandler := connect.NewUnaryHandler(
		UserServiceRemoveUserRoleProcedure,
		svc.RemoveUserRole,
		connect.WithSchema(userServiceMethods.ByName("RemoveUserRole")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUserPermissionsHandler := connect.NewUnaryHandler(
		UserServiceListUserPermissionsProcedure,
		svc.ListUserPermissions,
		connect.WithSchema(userServiceMethods.ByName("ListUserPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.users.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceSearchUsersProcedure:
			userServiceSearchUsersHandler.ServeHTTP(w, r)
		case UserServiceSearchOrganizationUsersProcedure:
			userServiceSearchOrganizationUsersHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceCreateMembershipProcedure:
			userServiceCreateMembershipHandler.ServeHTTP(w, r)
		case UserServiceDeleteMembershipProcedure:
			userServiceDeleteMembershipHandler.ServeHTTP(w, r)
		case UserServiceUpdateMembershipProcedure:
			userServiceUpdateMembershipHandler.ServeHTTP(w, r)
		case UserServiceCreateUserAndMembershipProcedure:
			userServiceCreateUserAndMembershipHandler.ServeHTTP(w, r)
		case UserServiceListOrganizationUsersProcedure:
			userServiceListOrganizationUsersHandler.ServeHTTP(w, r)
		case UserServiceResendInviteProcedure:
			userServiceResendInviteHandler.ServeHTTP(w, r)
		case UserServiceListUserRolesProcedure:
			userServiceListUserRolesHandler.ServeHTTP(w, r)
		case UserServiceAssignUserRolesProcedure:
			userServiceAssignUserRolesHandler.ServeHTTP(w, r)
		case UserServiceRemoveUserRoleProcedure:
			userServiceRemoveUserRoleHandler.ServeHTTP(w, r)
		case UserServiceListUserPermissionsProcedure:
			userServiceListUserPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[users.GetUserRequest]) (*connect.Response[users.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) SearchUsers(context.Context, *connect.Request[users.SearchUsersRequest]) (*connect.Response[users.SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.SearchUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) SearchOrganizationUsers(context.Context, *connect.Request[users.SearchOrganizationUsersRequest]) (*connect.Response[users.SearchOrganizationUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.SearchOrganizationUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[users.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateMembership(context.Context, *connect.Request[users.CreateMembershipRequest]) (*connect.Response[users.CreateMembershipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.CreateMembership is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteMembership(context.Context, *connect.Request[users.DeleteMembershipRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.DeleteMembership is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateMembership(context.Context, *connect.Request[users.UpdateMembershipRequest]) (*connect.Response[users.UpdateMembershipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.UpdateMembership is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateUserAndMembership(context.Context, *connect.Request[users.CreateUserAndMembershipRequest]) (*connect.Response[users.CreateUserAndMembershipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.CreateUserAndMembership is not implemented"))
}

func (UnimplementedUserServiceHandler) ListOrganizationUsers(context.Context, *connect.Request[users.ListOrganizationUsersRequest]) (*connect.Response[users.ListOrganizationUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.ListOrganizationUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) ResendInvite(context.Context, *connect.Request[users.ResendInviteRequest]) (*connect.Response[users.ResendInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.ResendInvite is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUserRoles(context.Context, *connect.Request[users.ListUserRolesRequest]) (*connect.Response[users.ListUserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.ListUserRoles is not implemented"))
}

func (UnimplementedUserServiceHandler) AssignUserRoles(context.Context, *connect.Request[users.AssignUserRolesRequest]) (*connect.Response[users.AssignUserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.AssignUserRoles is not implemented"))
}

func (UnimplementedUserServiceHandler) RemoveUserRole(context.Context, *connect.Request[users.RemoveUserRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.RemoveUserRole is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUserPermissions(context.Context, *connect.Request[users.ListUserPermissionsRequest]) (*connect.Response[users.ListUserPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.users.UserService.ListUserPermissions is not implemented"))
}
