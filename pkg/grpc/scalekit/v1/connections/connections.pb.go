// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: scalekit/v1/connections/connections.proto

package connections

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigurationType int32

const (
	ConfigurationType_CONFIGURATION_TYPE_UNSPECIFIED ConfigurationType = 0
	ConfigurationType_DISCOVERY                      ConfigurationType = 1
	ConfigurationType_MANUAL                         ConfigurationType = 2
)

// Enum value maps for ConfigurationType.
var (
	ConfigurationType_name = map[int32]string{
		0: "CONFIGURATION_TYPE_UNSPECIFIED",
		1: "DISCOVERY",
		2: "MANUAL",
	}
	ConfigurationType_value = map[string]int32{
		"CONFIGURATION_TYPE_UNSPECIFIED": 0,
		"DISCOVERY":                      1,
		"MANUAL":                         2,
	}
)

func (x ConfigurationType) Enum() *ConfigurationType {
	p := new(ConfigurationType)
	*p = x
	return p
}

func (x ConfigurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[0].Descriptor()
}

func (ConfigurationType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[0]
}

func (x ConfigurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationType.Descriptor instead.
func (ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{0}
}

type NameIdFormat int32

const (
	NameIdFormat_NAME_ID_FORMAT_NIL NameIdFormat = 0
	NameIdFormat_UNSPECIFIED        NameIdFormat = 1
	NameIdFormat_EMAIL              NameIdFormat = 2
	NameIdFormat_TRANSIENT          NameIdFormat = 3
	NameIdFormat_PERSISTENT         NameIdFormat = 4
)

// Enum value maps for NameIdFormat.
var (
	NameIdFormat_name = map[int32]string{
		0: "NAME_ID_FORMAT_NIL",
		1: "UNSPECIFIED",
		2: "EMAIL",
		3: "TRANSIENT",
		4: "PERSISTENT",
	}
	NameIdFormat_value = map[string]int32{
		"NAME_ID_FORMAT_NIL": 0,
		"UNSPECIFIED":        1,
		"EMAIL":              2,
		"TRANSIENT":          3,
		"PERSISTENT":         4,
	}
)

func (x NameIdFormat) Enum() *NameIdFormat {
	p := new(NameIdFormat)
	*p = x
	return p
}

func (x NameIdFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameIdFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[1].Descriptor()
}

func (NameIdFormat) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[1]
}

func (x NameIdFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameIdFormat.Descriptor instead.
func (NameIdFormat) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{1}
}

// enums all
type SAMLSigningOptions int32

const (
	SAMLSigningOptions_SAML_SIGNING_OPTIONS_UNSPECIFIED SAMLSigningOptions = 0
	SAMLSigningOptions_NO_SIGNING                       SAMLSigningOptions = 1
	SAMLSigningOptions_SAML_ONLY_RESPONSE_SIGNING       SAMLSigningOptions = 2
	SAMLSigningOptions_SAML_ONLY_ASSERTION_SIGNING      SAMLSigningOptions = 3
	SAMLSigningOptions_SAML_RESPONSE_ASSERTION_SIGNING  SAMLSigningOptions = 4
)

// Enum value maps for SAMLSigningOptions.
var (
	SAMLSigningOptions_name = map[int32]string{
		0: "SAML_SIGNING_OPTIONS_UNSPECIFIED",
		1: "NO_SIGNING",
		2: "SAML_ONLY_RESPONSE_SIGNING",
		3: "SAML_ONLY_ASSERTION_SIGNING",
		4: "SAML_RESPONSE_ASSERTION_SIGNING",
	}
	SAMLSigningOptions_value = map[string]int32{
		"SAML_SIGNING_OPTIONS_UNSPECIFIED": 0,
		"NO_SIGNING":                       1,
		"SAML_ONLY_RESPONSE_SIGNING":       2,
		"SAML_ONLY_ASSERTION_SIGNING":      3,
		"SAML_RESPONSE_ASSERTION_SIGNING":  4,
	}
)

func (x SAMLSigningOptions) Enum() *SAMLSigningOptions {
	p := new(SAMLSigningOptions)
	*p = x
	return p
}

func (x SAMLSigningOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SAMLSigningOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[2].Descriptor()
}

func (SAMLSigningOptions) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[2]
}

func (x SAMLSigningOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SAMLSigningOptions.Descriptor instead.
func (SAMLSigningOptions) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{2}
}

type RequestBinding int32

const (
	RequestBinding_REQUEST_BINDING_UNSPECIFIED RequestBinding = 0
	RequestBinding_HTTP_POST                   RequestBinding = 1
	RequestBinding_HTTP_REDIRECT               RequestBinding = 2
)

// Enum value maps for RequestBinding.
var (
	RequestBinding_name = map[int32]string{
		0: "REQUEST_BINDING_UNSPECIFIED",
		1: "HTTP_POST",
		2: "HTTP_REDIRECT",
	}
	RequestBinding_value = map[string]int32{
		"REQUEST_BINDING_UNSPECIFIED": 0,
		"HTTP_POST":                   1,
		"HTTP_REDIRECT":               2,
	}
)

func (x RequestBinding) Enum() *RequestBinding {
	p := new(RequestBinding)
	*p = x
	return p
}

func (x RequestBinding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBinding) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[3].Descriptor()
}

func (RequestBinding) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[3]
}

func (x RequestBinding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestBinding.Descriptor instead.
func (RequestBinding) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{3}
}

type TokenAuthType int32

const (
	TokenAuthType_TOKEN_AUTH_TYPE_UNSPECIFIED TokenAuthType = 0
	TokenAuthType_URL_PARAMS                  TokenAuthType = 1
	TokenAuthType_BASIC_AUTH                  TokenAuthType = 2
)

// Enum value maps for TokenAuthType.
var (
	TokenAuthType_name = map[int32]string{
		0: "TOKEN_AUTH_TYPE_UNSPECIFIED",
		1: "URL_PARAMS",
		2: "BASIC_AUTH",
	}
	TokenAuthType_value = map[string]int32{
		"TOKEN_AUTH_TYPE_UNSPECIFIED": 0,
		"URL_PARAMS":                  1,
		"BASIC_AUTH":                  2,
	}
)

func (x TokenAuthType) Enum() *TokenAuthType {
	p := new(TokenAuthType)
	*p = x
	return p
}

func (x TokenAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[4].Descriptor()
}

func (TokenAuthType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[4]
}

func (x TokenAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAuthType.Descriptor instead.
func (TokenAuthType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{4}
}

type OIDCScope int32

const (
	OIDCScope_OIDC_SCOPE_UNSPECIFIED OIDCScope = 0
	OIDCScope_openid                 OIDCScope = 1
	OIDCScope_profile                OIDCScope = 2
	OIDCScope_email                  OIDCScope = 3
	OIDCScope_address                OIDCScope = 4
	OIDCScope_phone                  OIDCScope = 5
)

// Enum value maps for OIDCScope.
var (
	OIDCScope_name = map[int32]string{
		0: "OIDC_SCOPE_UNSPECIFIED",
		1: "openid",
		2: "profile",
		3: "email",
		4: "address",
		5: "phone",
	}
	OIDCScope_value = map[string]int32{
		"OIDC_SCOPE_UNSPECIFIED": 0,
		"openid":                 1,
		"profile":                2,
		"email":                  3,
		"address":                4,
		"phone":                  5,
	}
)

func (x OIDCScope) Enum() *OIDCScope {
	p := new(OIDCScope)
	*p = x
	return p
}

func (x OIDCScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCScope) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[5].Descriptor()
}

func (OIDCScope) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[5]
}

func (x OIDCScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCScope.Descriptor instead.
func (OIDCScope) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{5}
}

type ConnectionType int32

const (
	ConnectionType_INVALID  ConnectionType = 0
	ConnectionType_OIDC     ConnectionType = 1
	ConnectionType_SAML     ConnectionType = 2
	ConnectionType_PASSWORD ConnectionType = 3
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "INVALID",
		1: "OIDC",
		2: "SAML",
		3: "PASSWORD",
	}
	ConnectionType_value = map[string]int32{
		"INVALID":  0,
		"OIDC":     1,
		"SAML":     2,
		"PASSWORD": 3,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[6].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[6]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{6}
}

type ConnectionStatus int32

const (
	ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED ConnectionStatus = 0
	ConnectionStatus_DRAFT                         ConnectionStatus = 1
	ConnectionStatus_IN_PROGRESS                   ConnectionStatus = 2
	ConnectionStatus_COMPLETED                     ConnectionStatus = 3
)

// Enum value maps for ConnectionStatus.
var (
	ConnectionStatus_name = map[int32]string{
		0: "CONNECTION_STATUS_UNSPECIFIED",
		1: "DRAFT",
		2: "IN_PROGRESS",
		3: "COMPLETED",
	}
	ConnectionStatus_value = map[string]int32{
		"CONNECTION_STATUS_UNSPECIFIED": 0,
		"DRAFT":                         1,
		"IN_PROGRESS":                   2,
		"COMPLETED":                     3,
	}
)

func (x ConnectionStatus) Enum() *ConnectionStatus {
	p := new(ConnectionStatus)
	*p = x
	return p
}

func (x ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[7].Descriptor()
}

func (ConnectionStatus) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[7]
}

func (x ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionStatus.Descriptor instead.
func (ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{7}
}

type ConnectionProvider int32

const (
	ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED ConnectionProvider = 0
	ConnectionProvider_OKTA                            ConnectionProvider = 1
	ConnectionProvider_GOOGLE                          ConnectionProvider = 2
	ConnectionProvider_MICROSOFT_AD                    ConnectionProvider = 3
	ConnectionProvider_AUTH0                           ConnectionProvider = 4
	ConnectionProvider_ONELOGIN                        ConnectionProvider = 5
	ConnectionProvider_PING_IDENTITY                   ConnectionProvider = 6
	ConnectionProvider_JUMPCLOUD                       ConnectionProvider = 7
	ConnectionProvider_CUSTOM                          ConnectionProvider = 8
)

// Enum value maps for ConnectionProvider.
var (
	ConnectionProvider_name = map[int32]string{
		0: "CONNECTION_PROVIDER_UNSPECIFIED",
		1: "OKTA",
		2: "GOOGLE",
		3: "MICROSOFT_AD",
		4: "AUTH0",
		5: "ONELOGIN",
		6: "PING_IDENTITY",
		7: "JUMPCLOUD",
		8: "CUSTOM",
	}
	ConnectionProvider_value = map[string]int32{
		"CONNECTION_PROVIDER_UNSPECIFIED": 0,
		"OKTA":                            1,
		"GOOGLE":                          2,
		"MICROSOFT_AD":                    3,
		"AUTH0":                           4,
		"ONELOGIN":                        5,
		"PING_IDENTITY":                   6,
		"JUMPCLOUD":                       7,
		"CUSTOM":                          8,
	}
)

func (x ConnectionProvider) Enum() *ConnectionProvider {
	p := new(ConnectionProvider)
	*p = x
	return p
}

func (x ConnectionProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[8].Descriptor()
}

func (ConnectionProvider) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[8]
}

func (x ConnectionProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionProvider.Descriptor instead.
func (ConnectionProvider) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{8}
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identities:
	//
	//	*CreateConnectionRequest_OrganizationId
	//	*CreateConnectionRequest_ExternalId
	Identities isCreateConnectionRequest_Identities `protobuf_oneof:"identities"`
	Connection *CreateConnection                    `protobuf:"bytes,3,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{0}
}

func (m *CreateConnectionRequest) GetIdentities() isCreateConnectionRequest_Identities {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (x *CreateConnectionRequest) GetOrganizationId() string {
	if x, ok := x.GetIdentities().(*CreateConnectionRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateConnectionRequest) GetExternalId() string {
	if x, ok := x.GetIdentities().(*CreateConnectionRequest_ExternalId); ok {
		return x.ExternalId
	}
	return ""
}

func (x *CreateConnectionRequest) GetConnection() *CreateConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type isCreateConnectionRequest_Identities interface {
	isCreateConnectionRequest_Identities()
}

type CreateConnectionRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type CreateConnectionRequest_ExternalId struct {
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof"`
}

func (*CreateConnectionRequest_OrganizationId) isCreateConnectionRequest_Identities() {}

func (*CreateConnectionRequest_ExternalId) isCreateConnectionRequest_Identities() {}

type CreateConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider ConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type     ConnectionType     `protobuf:"varint,2,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
}

func (x *CreateConnection) Reset() {
	*x = CreateConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnection) ProtoMessage() {}

func (x *CreateConnection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnection.ProtoReflect.Descriptor instead.
func (*CreateConnection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{1}
}

func (x *CreateConnection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *CreateConnection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider           ConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type               ConnectionType     `protobuf:"varint,3,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
	Status             ConnectionStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=scalekit.v1.connections.ConnectionStatus" json:"status,omitempty"`
	Enabled            bool               `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DebugEnabled       bool               `protobuf:"varint,6,opt,name=debug_enabled,json=debugEnabled,proto3" json:"debug_enabled,omitempty"`
	OrganizationId     string             `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UiButtonTitle      string             `protobuf:"bytes,8,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	LoginInitiationUri string             `protobuf:"bytes,9,opt,name=login_initiation_uri,json=loginInitiationUri,proto3" json:"login_initiation_uri,omitempty"`
	LogoutUri          string             `protobuf:"bytes,10,opt,name=logout_uri,json=logoutUri,proto3" json:"logout_uri,omitempty"`
	ConfigurationType  ConfigurationType  `protobuf:"varint,11,opt,name=configuration_type,json=configurationType,proto3,enum=scalekit.v1.connections.ConfigurationType" json:"configuration_type,omitempty"`
	TestConnectionUri  string             `protobuf:"bytes,12,opt,name=test_connection_uri,json=testConnectionUri,proto3" json:"test_connection_uri,omitempty"`
	// Types that are assignable to Settings:
	//
	//	*Connection_OidcConfig
	//	*Connection_SamlConfig
	Settings         isConnection_Settings  `protobuf_oneof:"settings"`
	AttributeMapping map[string]string      `protobuf:"bytes,15,rep,name=attribute_mapping,json=attributeMapping,proto3" json:"attribute_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *Connection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

func (x *Connection) GetStatus() ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *Connection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Connection) GetDebugEnabled() bool {
	if x != nil {
		return x.DebugEnabled
	}
	return false
}

func (x *Connection) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Connection) GetUiButtonTitle() string {
	if x != nil {
		return x.UiButtonTitle
	}
	return ""
}

func (x *Connection) GetLoginInitiationUri() string {
	if x != nil {
		return x.LoginInitiationUri
	}
	return ""
}

func (x *Connection) GetLogoutUri() string {
	if x != nil {
		return x.LogoutUri
	}
	return ""
}

func (x *Connection) GetConfigurationType() ConfigurationType {
	if x != nil {
		return x.ConfigurationType
	}
	return ConfigurationType_CONFIGURATION_TYPE_UNSPECIFIED
}

func (x *Connection) GetTestConnectionUri() string {
	if x != nil {
		return x.TestConnectionUri
	}
	return ""
}

func (m *Connection) GetSettings() isConnection_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *Connection) GetOidcConfig() *OIDCConnectionConfig {
	if x, ok := x.GetSettings().(*Connection_OidcConfig); ok {
		return x.OidcConfig
	}
	return nil
}

func (x *Connection) GetSamlConfig() *SAMLConnectionConfigResponse {
	if x, ok := x.GetSettings().(*Connection_SamlConfig); ok {
		return x.SamlConfig
	}
	return nil
}

func (x *Connection) GetAttributeMapping() map[string]string {
	if x != nil {
		return x.AttributeMapping
	}
	return nil
}

func (x *Connection) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Connection) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type isConnection_Settings interface {
	isConnection_Settings()
}

type Connection_OidcConfig struct {
	OidcConfig *OIDCConnectionConfig `protobuf:"bytes,13,opt,name=oidc_config,json=oidcConfig,proto3,oneof"`
}

type Connection_SamlConfig struct {
	SamlConfig *SAMLConnectionConfigResponse `protobuf:"bytes,14,opt,name=saml_config,json=samlConfig,proto3,oneof"`
}

func (*Connection_OidcConfig) isConnection_Settings() {}

func (*Connection_SamlConfig) isConnection_Settings() {}

type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{3}
}

func (x *CreateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identities:
	//
	//	*UpdateConnectionRequest_OrganizationId
	//	*UpdateConnectionRequest_ExternalId
	Identities isUpdateConnectionRequest_Identities `protobuf_oneof:"identities"`
	Id         string                               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Connection *UpdateConnection                    `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionRequest) Reset() {
	*x = UpdateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionRequest) ProtoMessage() {}

func (x *UpdateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{4}
}

func (m *UpdateConnectionRequest) GetIdentities() isUpdateConnectionRequest_Identities {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (x *UpdateConnectionRequest) GetOrganizationId() string {
	if x, ok := x.GetIdentities().(*UpdateConnectionRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateConnectionRequest) GetExternalId() string {
	if x, ok := x.GetIdentities().(*UpdateConnectionRequest_ExternalId); ok {
		return x.ExternalId
	}
	return ""
}

func (x *UpdateConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConnectionRequest) GetConnection() *UpdateConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type isUpdateConnectionRequest_Identities interface {
	isUpdateConnectionRequest_Identities()
}

type UpdateConnectionRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type UpdateConnectionRequest_ExternalId struct {
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof"`
}

func (*UpdateConnectionRequest_OrganizationId) isUpdateConnectionRequest_Identities() {}

func (*UpdateConnectionRequest_ExternalId) isUpdateConnectionRequest_Identities() {}

type UpdateConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          ConnectionProvider      `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type              ConnectionType          `protobuf:"varint,3,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
	DebugEnabled      *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=debug_enabled,json=debugEnabled,proto3" json:"debug_enabled,omitempty"`
	UiButtonTitle     *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	LogoutUri         *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=logout_uri,json=logoutUri,proto3" json:"logout_uri,omitempty"`
	ConfigurationType ConfigurationType       `protobuf:"varint,11,opt,name=configuration_type,json=configurationType,proto3,enum=scalekit.v1.connections.ConfigurationType" json:"configuration_type,omitempty"`
	// Types that are assignable to Settings:
	//
	//	*UpdateConnection_OidcConfig
	//	*UpdateConnection_SamlConfig
	Settings         isUpdateConnection_Settings `protobuf_oneof:"settings"`
	AttributeMapping map[string]string           `protobuf:"bytes,15,rep,name=attribute_mapping,json=attributeMapping,proto3" json:"attribute_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateConnection) Reset() {
	*x = UpdateConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnection) ProtoMessage() {}

func (x *UpdateConnection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnection.ProtoReflect.Descriptor instead.
func (*UpdateConnection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateConnection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *UpdateConnection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

func (x *UpdateConnection) GetDebugEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.DebugEnabled
	}
	return nil
}

func (x *UpdateConnection) GetUiButtonTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.UiButtonTitle
	}
	return nil
}

func (x *UpdateConnection) GetLogoutUri() *wrapperspb.StringValue {
	if x != nil {
		return x.LogoutUri
	}
	return nil
}

func (x *UpdateConnection) GetConfigurationType() ConfigurationType {
	if x != nil {
		return x.ConfigurationType
	}
	return ConfigurationType_CONFIGURATION_TYPE_UNSPECIFIED
}

func (m *UpdateConnection) GetSettings() isUpdateConnection_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *UpdateConnection) GetOidcConfig() *OIDCConnectionConfig {
	if x, ok := x.GetSettings().(*UpdateConnection_OidcConfig); ok {
		return x.OidcConfig
	}
	return nil
}

func (x *UpdateConnection) GetSamlConfig() *SAMLConnectionConfigRequest {
	if x, ok := x.GetSettings().(*UpdateConnection_SamlConfig); ok {
		return x.SamlConfig
	}
	return nil
}

func (x *UpdateConnection) GetAttributeMapping() map[string]string {
	if x != nil {
		return x.AttributeMapping
	}
	return nil
}

type isUpdateConnection_Settings interface {
	isUpdateConnection_Settings()
}

type UpdateConnection_OidcConfig struct {
	OidcConfig *OIDCConnectionConfig `protobuf:"bytes,13,opt,name=oidc_config,json=oidcConfig,proto3,oneof"`
}

type UpdateConnection_SamlConfig struct {
	SamlConfig *SAMLConnectionConfigRequest `protobuf:"bytes,14,opt,name=saml_config,json=samlConfig,proto3,oneof"`
}

func (*UpdateConnection_OidcConfig) isUpdateConnection_Settings() {}

func (*UpdateConnection_SamlConfig) isUpdateConnection_Settings() {}

type UpdateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionResponse) Reset() {
	*x = UpdateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionResponse) ProtoMessage() {}

func (x *UpdateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type DeleteConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identities:
	//
	//	*DeleteConnectionRequest_OrganizationId
	//	*DeleteConnectionRequest_ExternalId
	Identities isDeleteConnectionRequest_Identities `protobuf_oneof:"identities"`
	Id         string                               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteConnectionRequest) Reset() {
	*x = DeleteConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{7}
}

func (m *DeleteConnectionRequest) GetIdentities() isDeleteConnectionRequest_Identities {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (x *DeleteConnectionRequest) GetOrganizationId() string {
	if x, ok := x.GetIdentities().(*DeleteConnectionRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteConnectionRequest) GetExternalId() string {
	if x, ok := x.GetIdentities().(*DeleteConnectionRequest_ExternalId); ok {
		return x.ExternalId
	}
	return ""
}

func (x *DeleteConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isDeleteConnectionRequest_Identities interface {
	isDeleteConnectionRequest_Identities()
}

type DeleteConnectionRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type DeleteConnectionRequest_ExternalId struct {
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof"`
}

func (*DeleteConnectionRequest_OrganizationId) isDeleteConnectionRequest_Identities() {}

func (*DeleteConnectionRequest_ExternalId) isDeleteConnectionRequest_Identities() {}

type GetConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identities:
	//
	//	*GetConnectionRequest_OrganizationId
	//	*GetConnectionRequest_ExternalId
	Identities isGetConnectionRequest_Identities `protobuf_oneof:"identities"`
	Id         string                            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConnectionRequest) Reset() {
	*x = GetConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionRequest) ProtoMessage() {}

func (x *GetConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{8}
}

func (m *GetConnectionRequest) GetIdentities() isGetConnectionRequest_Identities {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (x *GetConnectionRequest) GetOrganizationId() string {
	if x, ok := x.GetIdentities().(*GetConnectionRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *GetConnectionRequest) GetExternalId() string {
	if x, ok := x.GetIdentities().(*GetConnectionRequest_ExternalId); ok {
		return x.ExternalId
	}
	return ""
}

func (x *GetConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isGetConnectionRequest_Identities interface {
	isGetConnectionRequest_Identities()
}

type GetConnectionRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type GetConnectionRequest_ExternalId struct {
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof"`
}

func (*GetConnectionRequest_OrganizationId) isGetConnectionRequest_Identities() {}

func (*GetConnectionRequest_ExternalId) isGetConnectionRequest_Identities() {}

type GetConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *GetConnectionResponse) Reset() {
	*x = GetConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionResponse) ProtoMessage() {}

func (x *GetConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{9}
}

func (x *GetConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type ListConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identities:
	//
	//	*ListConnectionsRequest_OrganizationId
	//	*ListConnectionsRequest_ExternalId
	//	*ListConnectionsRequest_Domain
	Identities isListConnectionsRequest_Identities `protobuf_oneof:"identities"`
	Include    *string                             `protobuf:"bytes,4,opt,name=include,proto3,oneof" json:"include,omitempty"`
}

func (x *ListConnectionsRequest) Reset() {
	*x = ListConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsRequest) ProtoMessage() {}

func (x *ListConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{10}
}

func (m *ListConnectionsRequest) GetIdentities() isListConnectionsRequest_Identities {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (x *ListConnectionsRequest) GetOrganizationId() string {
	if x, ok := x.GetIdentities().(*ListConnectionsRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *ListConnectionsRequest) GetExternalId() string {
	if x, ok := x.GetIdentities().(*ListConnectionsRequest_ExternalId); ok {
		return x.ExternalId
	}
	return ""
}

func (x *ListConnectionsRequest) GetDomain() string {
	if x, ok := x.GetIdentities().(*ListConnectionsRequest_Domain); ok {
		return x.Domain
	}
	return ""
}

func (x *ListConnectionsRequest) GetInclude() string {
	if x != nil && x.Include != nil {
		return *x.Include
	}
	return ""
}

type isListConnectionsRequest_Identities interface {
	isListConnectionsRequest_Identities()
}

type ListConnectionsRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type ListConnectionsRequest_ExternalId struct {
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof"`
}

type ListConnectionsRequest_Domain struct {
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3,oneof"`
}

func (*ListConnectionsRequest_OrganizationId) isListConnectionsRequest_Identities() {}

func (*ListConnectionsRequest_ExternalId) isListConnectionsRequest_Identities() {}

func (*ListConnectionsRequest_Domain) isListConnectionsRequest_Identities() {}

type ListConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*ListConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ListConnectionsResponse) Reset() {
	*x = ListConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsResponse) ProtoMessage() {}

func (x *ListConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{11}
}

func (x *ListConnectionsResponse) GetConnections() []*ListConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ListConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider       ConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type           ConnectionType     `protobuf:"varint,3,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
	Status         ConnectionStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=scalekit.v1.connections.ConnectionStatus" json:"status,omitempty"`
	Enabled        bool               `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OrganizationId string             `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UiButtonTitle  string             `protobuf:"bytes,7,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
}

func (x *ListConnection) Reset() {
	*x = ListConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnection) ProtoMessage() {}

func (x *ListConnection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnection.ProtoReflect.Descriptor instead.
func (*ListConnection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{12}
}

func (x *ListConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListConnection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *ListConnection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

func (x *ListConnection) GetStatus() ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *ListConnection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ListConnection) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListConnection) GetUiButtonTitle() string {
	if x != nil {
		return x.UiButtonTitle
	}
	return ""
}

type ToggleConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identities:
	//
	//	*ToggleConnectionRequest_OrganizationId
	//	*ToggleConnectionRequest_ExternalId
	Identities isToggleConnectionRequest_Identities `protobuf_oneof:"identities"`
	Id         string                               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ToggleConnectionRequest) Reset() {
	*x = ToggleConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleConnectionRequest) ProtoMessage() {}

func (x *ToggleConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleConnectionRequest.ProtoReflect.Descriptor instead.
func (*ToggleConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{13}
}

func (m *ToggleConnectionRequest) GetIdentities() isToggleConnectionRequest_Identities {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (x *ToggleConnectionRequest) GetOrganizationId() string {
	if x, ok := x.GetIdentities().(*ToggleConnectionRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *ToggleConnectionRequest) GetExternalId() string {
	if x, ok := x.GetIdentities().(*ToggleConnectionRequest_ExternalId); ok {
		return x.ExternalId
	}
	return ""
}

func (x *ToggleConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isToggleConnectionRequest_Identities interface {
	isToggleConnectionRequest_Identities()
}

type ToggleConnectionRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type ToggleConnectionRequest_ExternalId struct {
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof"`
}

func (*ToggleConnectionRequest_OrganizationId) isToggleConnectionRequest_Identities() {}

func (*ToggleConnectionRequest_ExternalId) isToggleConnectionRequest_Identities() {}

type ToggleConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *ToggleConnectionResponse) Reset() {
	*x = ToggleConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleConnectionResponse) ProtoMessage() {}

func (x *ToggleConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleConnectionResponse.ProtoReflect.Descriptor instead.
func (*ToggleConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{14}
}

func (x *ToggleConnectionResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleConnectionResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type OIDCConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	DiscoveryEndpoint *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=discovery_endpoint,json=discoveryEndpoint,proto3" json:"discovery_endpoint,omitempty"`
	AuthorizeUri      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=authorize_uri,json=authorizeUri,proto3" json:"authorize_uri,omitempty"`
	TokenUri          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	UserInfoUri       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=user_info_uri,json=userInfoUri,proto3" json:"user_info_uri,omitempty"`
	JwksUri           *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	ClientId          *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret      *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scopes            []OIDCScope             `protobuf:"varint,10,rep,packed,name=scopes,proto3,enum=scalekit.v1.connections.OIDCScope" json:"scopes,omitempty"`
	TokenAuthType     TokenAuthType           `protobuf:"varint,11,opt,name=token_auth_type,json=tokenAuthType,proto3,enum=scalekit.v1.connections.TokenAuthType" json:"token_auth_type,omitempty"`
	RedirectUri       string                  `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	PkceEnabled       *wrapperspb.BoolValue   `protobuf:"bytes,13,opt,name=pkce_enabled,json=pkceEnabled,proto3" json:"pkce_enabled,omitempty"`
}

func (x *OIDCConnectionConfig) Reset() {
	*x = OIDCConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCConnectionConfig) ProtoMessage() {}

func (x *OIDCConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCConnectionConfig.ProtoReflect.Descriptor instead.
func (*OIDCConnectionConfig) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{15}
}

func (x *OIDCConnectionConfig) GetIssuer() *wrapperspb.StringValue {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *OIDCConnectionConfig) GetDiscoveryEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.DiscoveryEndpoint
	}
	return nil
}

func (x *OIDCConnectionConfig) GetAuthorizeUri() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthorizeUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetTokenUri() *wrapperspb.StringValue {
	if x != nil {
		return x.TokenUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetUserInfoUri() *wrapperspb.StringValue {
	if x != nil {
		return x.UserInfoUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetJwksUri() *wrapperspb.StringValue {
	if x != nil {
		return x.JwksUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetClientId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *OIDCConnectionConfig) GetClientSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *OIDCConnectionConfig) GetScopes() []OIDCScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OIDCConnectionConfig) GetTokenAuthType() TokenAuthType {
	if x != nil {
		return x.TokenAuthType
	}
	return TokenAuthType_TOKEN_AUTH_TYPE_UNSPECIFIED
}

func (x *OIDCConnectionConfig) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *OIDCConnectionConfig) GetPkceEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.PkceEnabled
	}
	return nil
}

type SAMLConnectionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpMetadataUrl         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=idp_metadata_url,json=idpMetadataUrl,proto3" json:"idp_metadata_url,omitempty"`
	IdpEntityId            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	IdpSsoUrl              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=idp_sso_url,json=idpSsoUrl,proto3" json:"idp_sso_url,omitempty"`
	IdpCertificate         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=idp_certificate,json=idpCertificate,proto3" json:"idp_certificate,omitempty"`
	IdpSloUrl              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=idp_slo_url,json=idpSloUrl,proto3" json:"idp_slo_url,omitempty"`
	UiButtonTitle          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	IdpNameIdFormat        NameIdFormat            `protobuf:"varint,7,opt,name=idp_name_id_format,json=idpNameIdFormat,proto3,enum=scalekit.v1.connections.NameIdFormat" json:"idp_name_id_format,omitempty"`
	IdpSsoRequestBinding   RequestBinding          `protobuf:"varint,8,opt,name=idp_sso_request_binding,json=idpSsoRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_sso_request_binding,omitempty"`
	IdpSloRequestBinding   RequestBinding          `protobuf:"varint,9,opt,name=idp_slo_request_binding,json=idpSloRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_slo_request_binding,omitempty"`
	SamlSigningOption      SAMLSigningOptions      `protobuf:"varint,10,opt,name=saml_signing_option,json=samlSigningOption,proto3,enum=scalekit.v1.connections.SAMLSigningOptions" json:"saml_signing_option,omitempty"`
	AllowIdpInitiatedLogin *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=allow_idp_initiated_login,json=allowIdpInitiatedLogin,proto3" json:"allow_idp_initiated_login,omitempty"`
	ForceAuthn             *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=force_authn,json=forceAuthn,proto3" json:"force_authn,omitempty"`
	DefaultRedirectUri     *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	AssertionEncrypted     *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=assertion_encrypted,json=assertionEncrypted,proto3" json:"assertion_encrypted,omitempty"`
	WantRequestSigned      *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=want_request_signed,json=wantRequestSigned,proto3" json:"want_request_signed,omitempty"`
}

func (x *SAMLConnectionConfigRequest) Reset() {
	*x = SAMLConnectionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLConnectionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConnectionConfigRequest) ProtoMessage() {}

func (x *SAMLConnectionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConnectionConfigRequest.ProtoReflect.Descriptor instead.
func (*SAMLConnectionConfigRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{16}
}

func (x *SAMLConnectionConfigRequest) GetIdpMetadataUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpMetadataUrl
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpEntityId
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpSsoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSsoUrl
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpCertificate() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpCertificate
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpSloUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSloUrl
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetUiButtonTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.UiButtonTitle
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpNameIdFormat() NameIdFormat {
	if x != nil {
		return x.IdpNameIdFormat
	}
	return NameIdFormat_NAME_ID_FORMAT_NIL
}

func (x *SAMLConnectionConfigRequest) GetIdpSsoRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSsoRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigRequest) GetIdpSloRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSloRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigRequest) GetSamlSigningOption() SAMLSigningOptions {
	if x != nil {
		return x.SamlSigningOption
	}
	return SAMLSigningOptions_SAML_SIGNING_OPTIONS_UNSPECIFIED
}

func (x *SAMLConnectionConfigRequest) GetAllowIdpInitiatedLogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowIdpInitiatedLogin
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetForceAuthn() *wrapperspb.BoolValue {
	if x != nil {
		return x.ForceAuthn
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetDefaultRedirectUri() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetAssertionEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.AssertionEncrypted
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetWantRequestSigned() *wrapperspb.BoolValue {
	if x != nil {
		return x.WantRequestSigned
	}
	return nil
}

type SAMLConnectionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpEntityId             string                  `protobuf:"bytes,1,opt,name=sp_entity_id,json=spEntityId,proto3" json:"sp_entity_id,omitempty"`
	SpAssertionUrl         string                  `protobuf:"bytes,2,opt,name=sp_assertion_url,json=spAssertionUrl,proto3" json:"sp_assertion_url,omitempty"`
	SpMetadataUrl          string                  `protobuf:"bytes,3,opt,name=sp_metadata_url,json=spMetadataUrl,proto3" json:"sp_metadata_url,omitempty"`
	IdpMetadataUrl         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=idp_metadata_url,json=idpMetadataUrl,proto3" json:"idp_metadata_url,omitempty"`
	IdpEntityId            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	IdpSsoUrl              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=idp_sso_url,json=idpSsoUrl,proto3" json:"idp_sso_url,omitempty"`
	IdpCertificates        []*IDPCertificate       `protobuf:"bytes,7,rep,name=idp_certificates,json=idpCertificates,proto3" json:"idp_certificates,omitempty"`
	IdpSloUrl              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=idp_slo_url,json=idpSloUrl,proto3" json:"idp_slo_url,omitempty"`
	UiButtonTitle          *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	IdpNameIdFormat        NameIdFormat            `protobuf:"varint,10,opt,name=idp_name_id_format,json=idpNameIdFormat,proto3,enum=scalekit.v1.connections.NameIdFormat" json:"idp_name_id_format,omitempty"`
	IdpSsoRequestBinding   RequestBinding          `protobuf:"varint,11,opt,name=idp_sso_request_binding,json=idpSsoRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_sso_request_binding,omitempty"`
	IdpSloRequestBinding   RequestBinding          `protobuf:"varint,12,opt,name=idp_slo_request_binding,json=idpSloRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_slo_request_binding,omitempty"`
	SamlSigningOption      SAMLSigningOptions      `protobuf:"varint,13,opt,name=saml_signing_option,json=samlSigningOption,proto3,enum=scalekit.v1.connections.SAMLSigningOptions" json:"saml_signing_option,omitempty"`
	AllowIdpInitiatedLogin *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=allow_idp_initiated_login,json=allowIdpInitiatedLogin,proto3" json:"allow_idp_initiated_login,omitempty"`
	ForceAuthn             *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=force_authn,json=forceAuthn,proto3" json:"force_authn,omitempty"`
	DefaultRedirectUri     *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	AssertionEncrypted     *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=assertion_encrypted,json=assertionEncrypted,proto3" json:"assertion_encrypted,omitempty"`
	WantRequestSigned      *wrapperspb.BoolValue   `protobuf:"bytes,18,opt,name=want_request_signed,json=wantRequestSigned,proto3" json:"want_request_signed,omitempty"`
}

func (x *SAMLConnectionConfigResponse) Reset() {
	*x = SAMLConnectionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLConnectionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConnectionConfigResponse) ProtoMessage() {}

func (x *SAMLConnectionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConnectionConfigResponse.ProtoReflect.Descriptor instead.
func (*SAMLConnectionConfigResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{17}
}

func (x *SAMLConnectionConfigResponse) GetSpEntityId() string {
	if x != nil {
		return x.SpEntityId
	}
	return ""
}

func (x *SAMLConnectionConfigResponse) GetSpAssertionUrl() string {
	if x != nil {
		return x.SpAssertionUrl
	}
	return ""
}

func (x *SAMLConnectionConfigResponse) GetSpMetadataUrl() string {
	if x != nil {
		return x.SpMetadataUrl
	}
	return ""
}

func (x *SAMLConnectionConfigResponse) GetIdpMetadataUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpMetadataUrl
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpEntityId
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpSsoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSsoUrl
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpCertificates() []*IDPCertificate {
	if x != nil {
		return x.IdpCertificates
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpSloUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSloUrl
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetUiButtonTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.UiButtonTitle
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpNameIdFormat() NameIdFormat {
	if x != nil {
		return x.IdpNameIdFormat
	}
	return NameIdFormat_NAME_ID_FORMAT_NIL
}

func (x *SAMLConnectionConfigResponse) GetIdpSsoRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSsoRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigResponse) GetIdpSloRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSloRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigResponse) GetSamlSigningOption() SAMLSigningOptions {
	if x != nil {
		return x.SamlSigningOption
	}
	return SAMLSigningOptions_SAML_SIGNING_OPTIONS_UNSPECIFIED
}

func (x *SAMLConnectionConfigResponse) GetAllowIdpInitiatedLogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowIdpInitiatedLogin
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetForceAuthn() *wrapperspb.BoolValue {
	if x != nil {
		return x.ForceAuthn
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetDefaultRedirectUri() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetAssertionEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.AssertionEncrypted
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetWantRequestSigned() *wrapperspb.BoolValue {
	if x != nil {
		return x.WantRequestSigned
	}
	return nil
}

type IDPCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate string                 `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpiryTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Id          string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Issuer      string                 `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *IDPCertificate) Reset() {
	*x = IDPCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPCertificate) ProtoMessage() {}

func (x *IDPCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPCertificate.ProtoReflect.Descriptor instead.
func (*IDPCertificate) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{18}
}

func (x *IDPCertificate) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *IDPCertificate) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *IDPCertificate) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *IDPCertificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDPCertificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type GetOIDCMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *OIDCMetadataRequest `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetOIDCMetadataRequest) Reset() {
	*x = GetOIDCMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOIDCMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOIDCMetadataRequest) ProtoMessage() {}

func (x *GetOIDCMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOIDCMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetOIDCMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{19}
}

func (x *GetOIDCMetadataRequest) GetMetadata() *OIDCMetadataRequest {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type OIDCMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *OIDCMetadataRequest) Reset() {
	*x = OIDCMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCMetadataRequest) ProtoMessage() {}

func (x *OIDCMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCMetadataRequest.ProtoReflect.Descriptor instead.
func (*OIDCMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{20}
}

func (x *OIDCMetadataRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type GetOIDCMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer                string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorizationEndpoint string `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	TokenEndpoint         string `protobuf:"bytes,3,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	UserinfoEndpoint      string `protobuf:"bytes,4,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	JwksUri               string `protobuf:"bytes,5,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
}

func (x *GetOIDCMetadataResponse) Reset() {
	*x = GetOIDCMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOIDCMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOIDCMetadataResponse) ProtoMessage() {}

func (x *GetOIDCMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOIDCMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetOIDCMetadataResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{21}
}

func (x *GetOIDCMetadataResponse) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

type GetSAMLMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SAMLMetadataRequest `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetSAMLMetadataRequest) Reset() {
	*x = GetSAMLMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLMetadataRequest) ProtoMessage() {}

func (x *GetSAMLMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetSAMLMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{22}
}

func (x *GetSAMLMetadataRequest) GetMetadata() *SAMLMetadataRequest {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SAMLMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataUrl string `protobuf:"bytes,1,opt,name=metadata_url,json=metadataUrl,proto3" json:"metadata_url,omitempty"`
}

func (x *SAMLMetadataRequest) Reset() {
	*x = SAMLMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLMetadataRequest) ProtoMessage() {}

func (x *SAMLMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLMetadataRequest.ProtoReflect.Descriptor instead.
func (*SAMLMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{23}
}

func (x *SAMLMetadataRequest) GetMetadataUrl() string {
	if x != nil {
		return x.MetadataUrl
	}
	return ""
}

type GetSAMLMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpEntityId          string   `protobuf:"bytes,1,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	IdpSsoUrl            string   `protobuf:"bytes,2,opt,name=idp_sso_url,json=idpSsoUrl,proto3" json:"idp_sso_url,omitempty"`
	IdpSloUrl            string   `protobuf:"bytes,3,opt,name=idp_slo_url,json=idpSloUrl,proto3" json:"idp_slo_url,omitempty"`
	IdpCertificates      []string `protobuf:"bytes,4,rep,name=idp_certificates,json=idpCertificates,proto3" json:"idp_certificates,omitempty"`
	IdpNameIdFormat      string   `protobuf:"bytes,5,opt,name=idp_name_id_format,json=idpNameIdFormat,proto3" json:"idp_name_id_format,omitempty"`
	RequestBinding       string   `protobuf:"bytes,6,opt,name=request_binding,json=requestBinding,proto3" json:"request_binding,omitempty"`
	WantAssertionsSigned bool     `protobuf:"varint,7,opt,name=want_assertions_signed,json=wantAssertionsSigned,proto3" json:"want_assertions_signed,omitempty"`
}

func (x *GetSAMLMetadataResponse) Reset() {
	*x = GetSAMLMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLMetadataResponse) ProtoMessage() {}

func (x *GetSAMLMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetSAMLMetadataResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{24}
}

func (x *GetSAMLMetadataResponse) GetIdpEntityId() string {
	if x != nil {
		return x.IdpEntityId
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetIdpSsoUrl() string {
	if x != nil {
		return x.IdpSsoUrl
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetIdpSloUrl() string {
	if x != nil {
		return x.IdpSloUrl
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetIdpCertificates() []string {
	if x != nil {
		return x.IdpCertificates
	}
	return nil
}

func (x *GetSAMLMetadataResponse) GetIdpNameIdFormat() string {
	if x != nil {
		return x.IdpNameIdFormat
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetRequestBinding() string {
	if x != nil {
		return x.RequestBinding
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetWantAssertionsSigned() bool {
	if x != nil {
		return x.WantAssertionsSigned
	}
	return false
}

type GetSAMLCertificateDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *SAMLCertificateRequest `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetSAMLCertificateDetailsRequest) Reset() {
	*x = GetSAMLCertificateDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLCertificateDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLCertificateDetailsRequest) ProtoMessage() {}

func (x *GetSAMLCertificateDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLCertificateDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetSAMLCertificateDetailsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{25}
}

func (x *GetSAMLCertificateDetailsRequest) GetCertificate() *SAMLCertificateRequest {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type SAMLCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SAMLCertificateRequest) Reset() {
	*x = SAMLCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLCertificateRequest) ProtoMessage() {}

func (x *SAMLCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLCertificateRequest.ProtoReflect.Descriptor instead.
func (*SAMLCertificateRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{26}
}

func (x *SAMLCertificateRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetSAMLCertificateDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	NotAfter  int64  `protobuf:"varint,2,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	NotBefore int64  `protobuf:"varint,3,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	Subject   string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Issuer    string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *GetSAMLCertificateDetailsResponse) Reset() {
	*x = GetSAMLCertificateDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLCertificateDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLCertificateDetailsResponse) ProtoMessage() {}

func (x *GetSAMLCertificateDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLCertificateDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetSAMLCertificateDetailsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{27}
}

func (x *GetSAMLCertificateDetailsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GetSAMLCertificateDetailsResponse) GetNotAfter() int64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

func (x *GetSAMLCertificateDetailsResponse) GetNotBefore() int64 {
	if x != nil {
		return x.NotBefore
	}
	return 0
}

func (x *GetSAMLCertificateDetailsResponse) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSAMLCertificateDetailsResponse) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type PasswordConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasswordConnectionConfig) Reset() {
	*x = PasswordConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordConnectionConfig) ProtoMessage() {}

func (x *PasswordConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordConnectionConfig.ProtoReflect.Descriptor instead.
func (*PasswordConnectionConfig) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{28}
}

var File_scalekit_v1_connections_connections_proto protoreflect.FileDescriptor

var file_scalekit_v1_connections_connections_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5,
	0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x2a, 0x32, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x4a, 0x17, 0x22, 0x6f, 0x72, 0x67, 0x5f,
	0x31, 0x32, 0x33, 0x36, 0x32, 0x34, 0x37, 0x34, 0x39, 0x30, 0x30, 0x36, 0x38, 0x34, 0x38, 0x31,
	0x34, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x56, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x27, 0x32, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x49, 0x44, 0x4a, 0x18, 0x22, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x90, 0x10, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x49, 0x44, 0x4a, 0x17, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x32, 0x31, 0x32, 0x33,
	0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33, 0x33, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x6d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x17, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x06,
	0x22, 0x4f, 0x4b, 0x54, 0x41, 0x22, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x6a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x20, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x2f, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x4a, 0x06,
	0x22, 0x4f, 0x49, 0x44, 0x43, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x28, 0x92, 0x41, 0x22, 0x32, 0x11, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x0d, 0x22, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x22, 0xe0, 0x41,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32,
	0x31, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32,
	0x62, 0x44, 0x65, 0x62, 0x75, 0x67, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x4a, 0x16, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x32, 0x31, 0x32,
	0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33, 0x33, 0x22, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6f,
	0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x35, 0x32, 0x21, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4a,
	0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f,
	0x22, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0xc3, 0x01, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x90,
	0x01, 0x92, 0x41, 0x7b, 0x32, 0x26, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x53, 0x53,
	0x4f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x51, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d,
	0x3a, 0x38, 0x38, 0x38, 0x38, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x69, 0x64,
	0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x33, 0x38, 0x38, 0x37, 0x31, 0x36, 0x36,
	0x39, 0x37, 0x39, 0x30, 0x39, 0x39, 0x39, 0x34, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0xe0,
	0x41, 0x03, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x61, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x2d, 0x32, 0x27,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x02, 0x22, 0x22, 0xe0, 0x41, 0x03, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x69, 0x12, 0x7e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x4a, 0x08, 0x22, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x22, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x14, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x20,
	0x4a, 0x08, 0x22, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x22, 0x52, 0x11, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x83, 0x01,
	0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x49,
	0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d,
	0x20, 0x4f, 0x49, 0x44, 0x43, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x53,
	0x41, 0x4d, 0x4c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41, 0x13, 0x32, 0x11, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0xba, 0x48, 0x16, 0x9a, 0x01, 0x13, 0x10, 0x0a, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x19,
	0x2a, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x27, 0x92, 0x41,
	0x12, 0x32, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x4a,
	0x02, 0x22, 0x22, 0xe0, 0x41, 0x03, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x64, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x27, 0x92, 0x41, 0x12, 0x32, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x02, 0x22, 0x22, 0xe0, 0x41, 0x03, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x77, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xac, 0x05, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbf, 0x01,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01, 0x92, 0x41, 0x86, 0x01, 0x32, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4a, 0x15, 0x22,
	0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33,
	0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0xbf, 0x01, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9b, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x32, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x4a, 0x14, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x22, 0xca, 0x3e, 0x0e, 0xfa, 0x02, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x72, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x92,
	0x41, 0x56, 0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49,
	0x44, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34,
	0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xca, 0x3e, 0x0e, 0xfa, 0x02, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x20, 0x52, 0x02, 0x69, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3f, 0x92, 0x41, 0x36, 0x32, 0x23, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xca,
	0x3e, 0x0e, 0xfa, 0x02, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0xe3, 0x0a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x2e, 0x92, 0x41, 0x23, 0x32, 0x17, 0x53, 0x53, 0x4f, 0x20, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4a, 0x08, 0x22, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x22, 0xba, 0x48, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x72,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x35, 0x92, 0x41, 0x2a, 0x32, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20,
	0x4f, 0x49, 0x44, 0x43, 0x20, 0x2f, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x4a, 0x06, 0x22, 0x4f,
	0x49, 0x44, 0x43, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x62, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x6e, 0x6f,
	0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x92, 0x41, 0x35,
	0x32, 0x21, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x4a, 0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x53, 0x53, 0x4f, 0x22, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x02, 0x22, 0x22, 0xe0, 0x41, 0x03, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x55, 0x72, 0x69, 0x12, 0x7e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x4a, 0x08, 0x22, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x22, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c,
	0x4f, 0x49, 0x44, 0x43, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x53, 0x41, 0x4d,
	0x4c, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x3d, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41, 0x13, 0x32, 0x11, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xba, 0x48, 0x16, 0x9a,
	0x01, 0x13, 0x10, 0x0a, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x19, 0x2a, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x32, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x04, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x93, 0x01, 0x92, 0x41, 0x86, 0x01, 0x32, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x49, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64,
	0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33,
	0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0xbf, 0x01, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9b, 0x01,
	0x92, 0x41, 0x8e, 0x01, 0x32, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x44,
	0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4a, 0x14, 0x22, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31,
	0x22, 0xca, 0x3e, 0x0e, 0xfa, 0x02, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x45, 0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31,
	0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba,
	0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xf9, 0x03, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01,
	0x92, 0x41, 0x86, 0x01, 0x32, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32,
	0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41,
	0x7d, 0x32, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27,
	0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x45,
	0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x49, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4a, 0x14, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x22, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x51, 0x92, 0x41, 0x45, 0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31,
	0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x04, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0xbf, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01, 0x92, 0x41, 0x86, 0x01,
	0x32, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49,
	0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x72, 0x20,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4a,
	0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31,
	0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48,
	0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41, 0x7d, 0x32, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49,
	0x64, 0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x4a, 0x14, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x64, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4a, 0x92, 0x41, 0x3e, 0x32, 0x2c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0e, 0x22, 0x61, 0x63, 0x6d, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x22, 0x64, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8, 0x05, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x0d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x4a, 0x17, 0x22, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x32, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33,
	0x33, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x17, 0x53, 0x53, 0x4f, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x08, 0x22, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x22, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x32, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x2f, 0x20,
	0x53, 0x41, 0x4d, 0x4c, 0x20, 0x4a, 0x06, 0x22, 0x4f, 0x49, 0x44, 0x43, 0x22, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x28,
	0x92, 0x41, 0x22, 0x32, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x0d, 0x22, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x57, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x31, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x4f, 0x72, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x4a, 0x16, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x32,
	0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33, 0x33, 0x22,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x6f, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x35, 0x32, 0x21,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4a, 0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53,
	0x53, 0x4f, 0x22, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0xfc, 0x03, 0x0a, 0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbf, 0x01,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01, 0x92, 0x41, 0x86, 0x01, 0x32, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4a, 0x15, 0x22,
	0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33,
	0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0xad, 0x01, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41, 0x7d, 0x32, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27,
	0x73, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x64, 0x20, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x4a, 0x14, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x20, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x61, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x45,
	0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e,
	0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32,
	0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x02,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x70, 0x0a, 0x18, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x84, 0x0b, 0x0a, 0x14, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x0a,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x23, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x44, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2d,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x55, 0x72, 0x69, 0x12, 0x74, 0x0a, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x92, 0x41,
	0x36, 0x32, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x29, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72,
	0x69, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2c, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x72, 0x69, 0x12, 0x70, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x08, 0x4a, 0x57, 0x4b,
	0x53, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x28, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6a, 0x77, 0x6b, 0x73, 0x22, 0x52,
	0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x09,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x4a, 0x11, 0x22, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x32, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4a,
	0x15, 0x22, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x49, 0x44, 0x43, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x0b, 0x4f,
	0x49, 0x44, 0x43, 0x20, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x4a, 0x15, 0x5b, 0x22, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x0f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32,
	0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x20, 0x54, 0x79, 0x70, 0x65,
	0x4a, 0x0c, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x22, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x32, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2c, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x22, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x69, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x6b, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x0c, 0x50, 0x4b, 0x43, 0x45, 0x20, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x6b,
	0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc7, 0x0e, 0x0a, 0x1b, 0x53, 0x41,
	0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x69, 0x64,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x10, 0x49, 0x44, 0x50, 0x20, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2b, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x78, 0x0a, 0x0d, 0x69, 0x64, 0x70, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33,
	0x32, 0x0d, 0x49, 0x44, 0x50, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x49, 0x44, 0x4a,
	0x22, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61,
	0x6d, 0x6c, 0x22, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x0b, 0x49, 0x44, 0x50, 0x20, 0x53, 0x53,
	0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x73, 0x6f, 0x22, 0x52, 0x09, 0x69,
	0x64, 0x70, 0x53, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x5b, 0x0a, 0x0f, 0x69, 0x64, 0x70, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x49, 0x44, 0x50, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x0b, 0x49,
	0x44, 0x50, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x6c,
	0x6f, 0x22, 0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x6c, 0x0a,
	0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x0f, 0x55, 0x49, 0x20, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4a, 0x10, 0x22, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f, 0x22, 0x52, 0x0d, 0x75, 0x69,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x12, 0x69,
	0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x32, 0x12, 0x49, 0x44, 0x50, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x07, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x22,
	0x52, 0x0f, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x29, 0x92, 0x41,
	0x26, 0x32, 0x17, 0x49, 0x44, 0x50, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x22, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53, 0x73, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x89, 0x01,
	0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x17, 0x49,
	0x44, 0x50, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x73, 0x61,
	0x6d, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x13, 0x53, 0x41, 0x4d, 0x4c, 0x20,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x1c,
	0x22, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x22, 0x52, 0x11, 0x73, 0x61,
	0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7b, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x32, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x49, 0x44, 0x50, 0x20, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x70, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6e, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x92, 0x41, 0x43, 0x32, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2b, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x6b, 0x0a, 0x13, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x13, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x13, 0x77, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x13, 0x57, 0x61, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x11, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x22, 0x89, 0x11, 0x0a, 0x1c, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32,
	0x0c, 0x53, 0x50, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x49, 0x44, 0x4a, 0x22, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c,
	0x22, 0x52, 0x0a, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x6d, 0x0a,
	0x10, 0x73, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x10, 0x53, 0x50,
	0x20, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2c,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d,
	0x6c, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0e, 0x73, 0x70,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x69, 0x0a, 0x0f,
	0x73, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x0f, 0x53, 0x50, 0x20, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2b, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0d, 0x73, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x10, 0x49, 0x44, 0x50, 0x20, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x78, 0x0a, 0x0d, 0x69, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x0d,
	0x49, 0x44, 0x50, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x49, 0x44, 0x4a, 0x22, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c,
	0x22, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x76,
	0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x0b, 0x49, 0x44, 0x50, 0x20, 0x53, 0x53, 0x4f, 0x20,
	0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f,
	0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x73, 0x6f, 0x22, 0x52, 0x09, 0x69, 0x64, 0x70,
	0x53, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x69, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x44, 0x50, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10,
	0x49, 0x44, 0x50, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x0f, 0x69, 0x64, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x0b, 0x49, 0x44, 0x50, 0x20, 0x53,
	0x4c, 0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x6c, 0x6f, 0x22, 0x52, 0x09,
	0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x6c, 0x0a, 0x0f, 0x75, 0x69, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x0f, 0x55, 0x49, 0x20, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4a, 0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f, 0x22, 0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x12, 0x69, 0x64, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32,
	0x12, 0x49, 0x44, 0x50, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x49, 0x44, 0x20, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4a, 0x07, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x22, 0x52, 0x0f, 0x69, 0x64,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x89, 0x01,
	0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x17, 0x49,
	0x44, 0x50, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53, 0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x69, 0x64,
	0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x17, 0x49, 0x44, 0x50, 0x20, 0x53,
	0x4c, 0x4f, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4a, 0x0b, 0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x52,
	0x14, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41,
	0x4d, 0x4c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x13, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x1c, 0x22, 0x53, 0x41, 0x4d,
	0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x22, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x19, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32,
	0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x49, 0x44, 0x50, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x0b,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x4a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x12, 0x96, 0x01,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32,
	0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x22, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x6b, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x32, 0x13, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x12, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x13, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x32, 0x13, 0x57, 0x61, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x11, 0x77, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22,
	0xbf, 0x03, 0x0a, 0x0e, 0x49, 0x44, 0x50, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x49, 0x44,
	0x50, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x36, 0x92, 0x41, 0x33,
	0x32, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x16, 0x22, 0x32, 0x30,
	0x32, 0x31, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x71, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x17, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x20, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x16,
	0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x32, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x20, 0x49, 0x44, 0x4a, 0x13, 0x22, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x31, 0x32, 0x33, 0x31, 0x32,
	0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x32, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x4a, 0x22, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x22, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x13, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x22, 0xd7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44,
	0x0a, 0x13, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0xb4, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x73,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x6c,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x64, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x77, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x52, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x2a, 0x61, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x04, 0x2a, 0xb0, 0x01, 0x0a, 0x12, 0x53, 0x41, 0x4d, 0x4c, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x41, 0x4d, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x53, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x52, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x2a, 0x63,
	0x0a, 0x09, 0x4f, 0x49, 0x44, 0x43, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x49, 0x44, 0x43, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x10, 0x05, 0x2a, 0x3f, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x41, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x03, 0x2a, 0x60, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xa8, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x1f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4b, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55,
	0x54, 0x48, 0x30, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x55, 0x4d, 0x50, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x08, 0x32, 0xd4, 0x12, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xeb, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf1, 0x01, 0x92, 0x41, 0x91, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x4d, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x41, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb5, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x92, 0x41, 0x7b, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x20, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x4a, 0x44, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3d, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9a, 0x02,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x7f, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4a, 0x46, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xef, 0x02, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x92, 0x41, 0x90, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18,
	0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x02, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb1, 0x01, 0x92, 0x41,
	0x59, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f,
	0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x1d, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xce, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x01, 0x92, 0x41, 0x83, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x47, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x40, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x33,
	0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x32,
	0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0xd2, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x92, 0x41,
	0x85, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20,
	0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x47,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x40, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x42, 0x32, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x7b, 0x7b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x6d, 0x64, 0x22, 0x7d, 0x7d, 0x42, 0xf7, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2d, 0x69, 0x6e, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x56, 0x43, 0xaa, 0x02, 0x17, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x17, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0xe2, 0x02, 0x23, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scalekit_v1_connections_connections_proto_rawDescOnce sync.Once
	file_scalekit_v1_connections_connections_proto_rawDescData = file_scalekit_v1_connections_connections_proto_rawDesc
)

func file_scalekit_v1_connections_connections_proto_rawDescGZIP() []byte {
	file_scalekit_v1_connections_connections_proto_rawDescOnce.Do(func() {
		file_scalekit_v1_connections_connections_proto_rawDescData = protoimpl.X.CompressGZIP(file_scalekit_v1_connections_connections_proto_rawDescData)
	})
	return file_scalekit_v1_connections_connections_proto_rawDescData
}

var file_scalekit_v1_connections_connections_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_scalekit_v1_connections_connections_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_scalekit_v1_connections_connections_proto_goTypes = []interface{}{
	(ConfigurationType)(0),                    // 0: scalekit.v1.connections.ConfigurationType
	(NameIdFormat)(0),                         // 1: scalekit.v1.connections.NameIdFormat
	(SAMLSigningOptions)(0),                   // 2: scalekit.v1.connections.SAMLSigningOptions
	(RequestBinding)(0),                       // 3: scalekit.v1.connections.RequestBinding
	(TokenAuthType)(0),                        // 4: scalekit.v1.connections.TokenAuthType
	(OIDCScope)(0),                            // 5: scalekit.v1.connections.OIDCScope
	(ConnectionType)(0),                       // 6: scalekit.v1.connections.ConnectionType
	(ConnectionStatus)(0),                     // 7: scalekit.v1.connections.ConnectionStatus
	(ConnectionProvider)(0),                   // 8: scalekit.v1.connections.ConnectionProvider
	(*CreateConnectionRequest)(nil),           // 9: scalekit.v1.connections.CreateConnectionRequest
	(*CreateConnection)(nil),                  // 10: scalekit.v1.connections.CreateConnection
	(*Connection)(nil),                        // 11: scalekit.v1.connections.Connection
	(*CreateConnectionResponse)(nil),          // 12: scalekit.v1.connections.CreateConnectionResponse
	(*UpdateConnectionRequest)(nil),           // 13: scalekit.v1.connections.UpdateConnectionRequest
	(*UpdateConnection)(nil),                  // 14: scalekit.v1.connections.UpdateConnection
	(*UpdateConnectionResponse)(nil),          // 15: scalekit.v1.connections.UpdateConnectionResponse
	(*DeleteConnectionRequest)(nil),           // 16: scalekit.v1.connections.DeleteConnectionRequest
	(*GetConnectionRequest)(nil),              // 17: scalekit.v1.connections.GetConnectionRequest
	(*GetConnectionResponse)(nil),             // 18: scalekit.v1.connections.GetConnectionResponse
	(*ListConnectionsRequest)(nil),            // 19: scalekit.v1.connections.ListConnectionsRequest
	(*ListConnectionsResponse)(nil),           // 20: scalekit.v1.connections.ListConnectionsResponse
	(*ListConnection)(nil),                    // 21: scalekit.v1.connections.ListConnection
	(*ToggleConnectionRequest)(nil),           // 22: scalekit.v1.connections.ToggleConnectionRequest
	(*ToggleConnectionResponse)(nil),          // 23: scalekit.v1.connections.ToggleConnectionResponse
	(*OIDCConnectionConfig)(nil),              // 24: scalekit.v1.connections.OIDCConnectionConfig
	(*SAMLConnectionConfigRequest)(nil),       // 25: scalekit.v1.connections.SAMLConnectionConfigRequest
	(*SAMLConnectionConfigResponse)(nil),      // 26: scalekit.v1.connections.SAMLConnectionConfigResponse
	(*IDPCertificate)(nil),                    // 27: scalekit.v1.connections.IDPCertificate
	(*GetOIDCMetadataRequest)(nil),            // 28: scalekit.v1.connections.GetOIDCMetadataRequest
	(*OIDCMetadataRequest)(nil),               // 29: scalekit.v1.connections.OIDCMetadataRequest
	(*GetOIDCMetadataResponse)(nil),           // 30: scalekit.v1.connections.GetOIDCMetadataResponse
	(*GetSAMLMetadataRequest)(nil),            // 31: scalekit.v1.connections.GetSAMLMetadataRequest
	(*SAMLMetadataRequest)(nil),               // 32: scalekit.v1.connections.SAMLMetadataRequest
	(*GetSAMLMetadataResponse)(nil),           // 33: scalekit.v1.connections.GetSAMLMetadataResponse
	(*GetSAMLCertificateDetailsRequest)(nil),  // 34: scalekit.v1.connections.GetSAMLCertificateDetailsRequest
	(*SAMLCertificateRequest)(nil),            // 35: scalekit.v1.connections.SAMLCertificateRequest
	(*GetSAMLCertificateDetailsResponse)(nil), // 36: scalekit.v1.connections.GetSAMLCertificateDetailsResponse
	(*PasswordConnectionConfig)(nil),          // 37: scalekit.v1.connections.PasswordConnectionConfig
	nil,                                       // 38: scalekit.v1.connections.Connection.AttributeMappingEntry
	nil,                                       // 39: scalekit.v1.connections.UpdateConnection.AttributeMappingEntry
	(*timestamppb.Timestamp)(nil),             // 40: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),              // 41: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),            // 42: google.protobuf.StringValue
	(*emptypb.Empty)(nil),                     // 43: google.protobuf.Empty
}
var file_scalekit_v1_connections_connections_proto_depIdxs = []int32{
	10, // 0: scalekit.v1.connections.CreateConnectionRequest.connection:type_name -> scalekit.v1.connections.CreateConnection
	8,  // 1: scalekit.v1.connections.CreateConnection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	6,  // 2: scalekit.v1.connections.CreateConnection.type:type_name -> scalekit.v1.connections.ConnectionType
	8,  // 3: scalekit.v1.connections.Connection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	6,  // 4: scalekit.v1.connections.Connection.type:type_name -> scalekit.v1.connections.ConnectionType
	7,  // 5: scalekit.v1.connections.Connection.status:type_name -> scalekit.v1.connections.ConnectionStatus
	0,  // 6: scalekit.v1.connections.Connection.configuration_type:type_name -> scalekit.v1.connections.ConfigurationType
	24, // 7: scalekit.v1.connections.Connection.oidc_config:type_name -> scalekit.v1.connections.OIDCConnectionConfig
	26, // 8: scalekit.v1.connections.Connection.saml_config:type_name -> scalekit.v1.connections.SAMLConnectionConfigResponse
	38, // 9: scalekit.v1.connections.Connection.attribute_mapping:type_name -> scalekit.v1.connections.Connection.AttributeMappingEntry
	40, // 10: scalekit.v1.connections.Connection.create_time:type_name -> google.protobuf.Timestamp
	40, // 11: scalekit.v1.connections.Connection.update_time:type_name -> google.protobuf.Timestamp
	11, // 12: scalekit.v1.connections.CreateConnectionResponse.connection:type_name -> scalekit.v1.connections.Connection
	14, // 13: scalekit.v1.connections.UpdateConnectionRequest.connection:type_name -> scalekit.v1.connections.UpdateConnection
	8,  // 14: scalekit.v1.connections.UpdateConnection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	6,  // 15: scalekit.v1.connections.UpdateConnection.type:type_name -> scalekit.v1.connections.ConnectionType
	41, // 16: scalekit.v1.connections.UpdateConnection.debug_enabled:type_name -> google.protobuf.BoolValue
	42, // 17: scalekit.v1.connections.UpdateConnection.ui_button_title:type_name -> google.protobuf.StringValue
	42, // 18: scalekit.v1.connections.UpdateConnection.logout_uri:type_name -> google.protobuf.StringValue
	0,  // 19: scalekit.v1.connections.UpdateConnection.configuration_type:type_name -> scalekit.v1.connections.ConfigurationType
	24, // 20: scalekit.v1.connections.UpdateConnection.oidc_config:type_name -> scalekit.v1.connections.OIDCConnectionConfig
	25, // 21: scalekit.v1.connections.UpdateConnection.saml_config:type_name -> scalekit.v1.connections.SAMLConnectionConfigRequest
	39, // 22: scalekit.v1.connections.UpdateConnection.attribute_mapping:type_name -> scalekit.v1.connections.UpdateConnection.AttributeMappingEntry
	11, // 23: scalekit.v1.connections.UpdateConnectionResponse.connection:type_name -> scalekit.v1.connections.Connection
	11, // 24: scalekit.v1.connections.GetConnectionResponse.connection:type_name -> scalekit.v1.connections.Connection
	21, // 25: scalekit.v1.connections.ListConnectionsResponse.connections:type_name -> scalekit.v1.connections.ListConnection
	8,  // 26: scalekit.v1.connections.ListConnection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	6,  // 27: scalekit.v1.connections.ListConnection.type:type_name -> scalekit.v1.connections.ConnectionType
	7,  // 28: scalekit.v1.connections.ListConnection.status:type_name -> scalekit.v1.connections.ConnectionStatus
	42, // 29: scalekit.v1.connections.OIDCConnectionConfig.issuer:type_name -> google.protobuf.StringValue
	42, // 30: scalekit.v1.connections.OIDCConnectionConfig.discovery_endpoint:type_name -> google.protobuf.StringValue
	42, // 31: scalekit.v1.connections.OIDCConnectionConfig.authorize_uri:type_name -> google.protobuf.StringValue
	42, // 32: scalekit.v1.connections.OIDCConnectionConfig.token_uri:type_name -> google.protobuf.StringValue
	42, // 33: scalekit.v1.connections.OIDCConnectionConfig.user_info_uri:type_name -> google.protobuf.StringValue
	42, // 34: scalekit.v1.connections.OIDCConnectionConfig.jwks_uri:type_name -> google.protobuf.StringValue
	42, // 35: scalekit.v1.connections.OIDCConnectionConfig.client_id:type_name -> google.protobuf.StringValue
	42, // 36: scalekit.v1.connections.OIDCConnectionConfig.client_secret:type_name -> google.protobuf.StringValue
	5,  // 37: scalekit.v1.connections.OIDCConnectionConfig.scopes:type_name -> scalekit.v1.connections.OIDCScope
	4,  // 38: scalekit.v1.connections.OIDCConnectionConfig.token_auth_type:type_name -> scalekit.v1.connections.TokenAuthType
	41, // 39: scalekit.v1.connections.OIDCConnectionConfig.pkce_enabled:type_name -> google.protobuf.BoolValue
	42, // 40: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_metadata_url:type_name -> google.protobuf.StringValue
	42, // 41: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_entity_id:type_name -> google.protobuf.StringValue
	42, // 42: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_sso_url:type_name -> google.protobuf.StringValue
	42, // 43: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_certificate:type_name -> google.protobuf.StringValue
	42, // 44: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_slo_url:type_name -> google.protobuf.StringValue
	42, // 45: scalekit.v1.connections.SAMLConnectionConfigRequest.ui_button_title:type_name -> google.protobuf.StringValue
	1,  // 46: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_name_id_format:type_name -> scalekit.v1.connections.NameIdFormat
	3,  // 47: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_sso_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	3,  // 48: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_slo_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	2,  // 49: scalekit.v1.connections.SAMLConnectionConfigRequest.saml_signing_option:type_name -> scalekit.v1.connections.SAMLSigningOptions
	41, // 50: scalekit.v1.connections.SAMLConnectionConfigRequest.allow_idp_initiated_login:type_name -> google.protobuf.BoolValue
	41, // 51: scalekit.v1.connections.SAMLConnectionConfigRequest.force_authn:type_name -> google.protobuf.BoolValue
	42, // 52: scalekit.v1.connections.SAMLConnectionConfigRequest.default_redirect_uri:type_name -> google.protobuf.StringValue
	41, // 53: scalekit.v1.connections.SAMLConnectionConfigRequest.assertion_encrypted:type_name -> google.protobuf.BoolValue
	41, // 54: scalekit.v1.connections.SAMLConnectionConfigRequest.want_request_signed:type_name -> google.protobuf.BoolValue
	42, // 55: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_metadata_url:type_name -> google.protobuf.StringValue
	42, // 56: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_entity_id:type_name -> google.protobuf.StringValue
	42, // 57: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_sso_url:type_name -> google.protobuf.StringValue
	27, // 58: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_certificates:type_name -> scalekit.v1.connections.IDPCertificate
	42, // 59: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_slo_url:type_name -> google.protobuf.StringValue
	42, // 60: scalekit.v1.connections.SAMLConnectionConfigResponse.ui_button_title:type_name -> google.protobuf.StringValue
	1,  // 61: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_name_id_format:type_name -> scalekit.v1.connections.NameIdFormat
	3,  // 62: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_sso_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	3,  // 63: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_slo_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	2,  // 64: scalekit.v1.connections.SAMLConnectionConfigResponse.saml_signing_option:type_name -> scalekit.v1.connections.SAMLSigningOptions
	41, // 65: scalekit.v1.connections.SAMLConnectionConfigResponse.allow_idp_initiated_login:type_name -> google.protobuf.BoolValue
	41, // 66: scalekit.v1.connections.SAMLConnectionConfigResponse.force_authn:type_name -> google.protobuf.BoolValue
	42, // 67: scalekit.v1.connections.SAMLConnectionConfigResponse.default_redirect_uri:type_name -> google.protobuf.StringValue
	41, // 68: scalekit.v1.connections.SAMLConnectionConfigResponse.assertion_encrypted:type_name -> google.protobuf.BoolValue
	41, // 69: scalekit.v1.connections.SAMLConnectionConfigResponse.want_request_signed:type_name -> google.protobuf.BoolValue
	40, // 70: scalekit.v1.connections.IDPCertificate.create_time:type_name -> google.protobuf.Timestamp
	40, // 71: scalekit.v1.connections.IDPCertificate.expiry_time:type_name -> google.protobuf.Timestamp
	29, // 72: scalekit.v1.connections.GetOIDCMetadataRequest.metadata:type_name -> scalekit.v1.connections.OIDCMetadataRequest
	32, // 73: scalekit.v1.connections.GetSAMLMetadataRequest.metadata:type_name -> scalekit.v1.connections.SAMLMetadataRequest
	35, // 74: scalekit.v1.connections.GetSAMLCertificateDetailsRequest.certificate:type_name -> scalekit.v1.connections.SAMLCertificateRequest
	9,  // 75: scalekit.v1.connections.ConnectionService.CreateConnection:input_type -> scalekit.v1.connections.CreateConnectionRequest
	17, // 76: scalekit.v1.connections.ConnectionService.GetConnection:input_type -> scalekit.v1.connections.GetConnectionRequest
	19, // 77: scalekit.v1.connections.ConnectionService.ListConnections:input_type -> scalekit.v1.connections.ListConnectionsRequest
	13, // 78: scalekit.v1.connections.ConnectionService.UpdateConnection:input_type -> scalekit.v1.connections.UpdateConnectionRequest
	16, // 79: scalekit.v1.connections.ConnectionService.DeleteConnection:input_type -> scalekit.v1.connections.DeleteConnectionRequest
	22, // 80: scalekit.v1.connections.ConnectionService.EnableConnection:input_type -> scalekit.v1.connections.ToggleConnectionRequest
	22, // 81: scalekit.v1.connections.ConnectionService.DisableConnection:input_type -> scalekit.v1.connections.ToggleConnectionRequest
	12, // 82: scalekit.v1.connections.ConnectionService.CreateConnection:output_type -> scalekit.v1.connections.CreateConnectionResponse
	18, // 83: scalekit.v1.connections.ConnectionService.GetConnection:output_type -> scalekit.v1.connections.GetConnectionResponse
	20, // 84: scalekit.v1.connections.ConnectionService.ListConnections:output_type -> scalekit.v1.connections.ListConnectionsResponse
	15, // 85: scalekit.v1.connections.ConnectionService.UpdateConnection:output_type -> scalekit.v1.connections.UpdateConnectionResponse
	43, // 86: scalekit.v1.connections.ConnectionService.DeleteConnection:output_type -> google.protobuf.Empty
	23, // 87: scalekit.v1.connections.ConnectionService.EnableConnection:output_type -> scalekit.v1.connections.ToggleConnectionResponse
	23, // 88: scalekit.v1.connections.ConnectionService.DisableConnection:output_type -> scalekit.v1.connections.ToggleConnectionResponse
	82, // [82:89] is the sub-list for method output_type
	75, // [75:82] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_scalekit_v1_connections_connections_proto_init() }
func file_scalekit_v1_connections_connections_proto_init() {
	if File_scalekit_v1_connections_connections_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scalekit_v1_connections_connections_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLConnectionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLConnectionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOIDCMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOIDCMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLCertificateDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLCertificateDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateConnectionRequest_OrganizationId)(nil),
		(*CreateConnectionRequest_ExternalId)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Connection_OidcConfig)(nil),
		(*Connection_SamlConfig)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UpdateConnectionRequest_OrganizationId)(nil),
		(*UpdateConnectionRequest_ExternalId)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateConnection_OidcConfig)(nil),
		(*UpdateConnection_SamlConfig)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DeleteConnectionRequest_OrganizationId)(nil),
		(*DeleteConnectionRequest_ExternalId)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetConnectionRequest_OrganizationId)(nil),
		(*GetConnectionRequest_ExternalId)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ListConnectionsRequest_OrganizationId)(nil),
		(*ListConnectionsRequest_ExternalId)(nil),
		(*ListConnectionsRequest_Domain)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ToggleConnectionRequest_OrganizationId)(nil),
		(*ToggleConnectionRequest_ExternalId)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scalekit_v1_connections_connections_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scalekit_v1_connections_connections_proto_goTypes,
		DependencyIndexes: file_scalekit_v1_connections_connections_proto_depIdxs,
		EnumInfos:         file_scalekit_v1_connections_connections_proto_enumTypes,
		MessageInfos:      file_scalekit_v1_connections_connections_proto_msgTypes,
	}.Build()
	File_scalekit_v1_connections_connections_proto = out.File
	file_scalekit_v1_connections_connections_proto_rawDesc = nil
	file_scalekit_v1_connections_connections_proto_goTypes = nil
	file_scalekit_v1_connections_connections_proto_depIdxs = nil
}
