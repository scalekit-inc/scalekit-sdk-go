// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: scalekit/v1/connections/connections.proto

package connections

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CodeChallengeType int32

const (
	CodeChallengeType_CODE_CHALLENGE_TYPE_UNSPECIFIED CodeChallengeType = 0
	CodeChallengeType_NUMERIC                         CodeChallengeType = 1
	CodeChallengeType_ALPHANUMERIC                    CodeChallengeType = 2
)

// Enum value maps for CodeChallengeType.
var (
	CodeChallengeType_name = map[int32]string{
		0: "CODE_CHALLENGE_TYPE_UNSPECIFIED",
		1: "NUMERIC",
		2: "ALPHANUMERIC",
	}
	CodeChallengeType_value = map[string]int32{
		"CODE_CHALLENGE_TYPE_UNSPECIFIED": 0,
		"NUMERIC":                         1,
		"ALPHANUMERIC":                    2,
	}
)

func (x CodeChallengeType) Enum() *CodeChallengeType {
	p := new(CodeChallengeType)
	*p = x
	return p
}

func (x CodeChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[0].Descriptor()
}

func (CodeChallengeType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[0]
}

func (x CodeChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeChallengeType.Descriptor instead.
func (CodeChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{0}
}

type ConfigurationType int32

const (
	ConfigurationType_CONFIGURATION_TYPE_UNSPECIFIED ConfigurationType = 0
	ConfigurationType_DISCOVERY                      ConfigurationType = 1
	ConfigurationType_MANUAL                         ConfigurationType = 2
)

// Enum value maps for ConfigurationType.
var (
	ConfigurationType_name = map[int32]string{
		0: "CONFIGURATION_TYPE_UNSPECIFIED",
		1: "DISCOVERY",
		2: "MANUAL",
	}
	ConfigurationType_value = map[string]int32{
		"CONFIGURATION_TYPE_UNSPECIFIED": 0,
		"DISCOVERY":                      1,
		"MANUAL":                         2,
	}
)

func (x ConfigurationType) Enum() *ConfigurationType {
	p := new(ConfigurationType)
	*p = x
	return p
}

func (x ConfigurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[1].Descriptor()
}

func (ConfigurationType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[1]
}

func (x ConfigurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationType.Descriptor instead.
func (ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{1}
}

type NameIdFormat int32

const (
	NameIdFormat_NAME_ID_FORMAT_NIL NameIdFormat = 0
	NameIdFormat_UNSPECIFIED        NameIdFormat = 1
	NameIdFormat_EMAIL              NameIdFormat = 2
	NameIdFormat_TRANSIENT          NameIdFormat = 3
	NameIdFormat_PERSISTENT         NameIdFormat = 4
)

// Enum value maps for NameIdFormat.
var (
	NameIdFormat_name = map[int32]string{
		0: "NAME_ID_FORMAT_NIL",
		1: "UNSPECIFIED",
		2: "EMAIL",
		3: "TRANSIENT",
		4: "PERSISTENT",
	}
	NameIdFormat_value = map[string]int32{
		"NAME_ID_FORMAT_NIL": 0,
		"UNSPECIFIED":        1,
		"EMAIL":              2,
		"TRANSIENT":          3,
		"PERSISTENT":         4,
	}
)

func (x NameIdFormat) Enum() *NameIdFormat {
	p := new(NameIdFormat)
	*p = x
	return p
}

func (x NameIdFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameIdFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[2].Descriptor()
}

func (NameIdFormat) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[2]
}

func (x NameIdFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameIdFormat.Descriptor instead.
func (NameIdFormat) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{2}
}

type PasswordlessType int32

const (
	PasswordlessType_PasswordlessType_UNSPECIFIED PasswordlessType = 0
	PasswordlessType_LINK                         PasswordlessType = 1
	PasswordlessType_OTP                          PasswordlessType = 2
	PasswordlessType_LINK_OTP                     PasswordlessType = 3
)

// Enum value maps for PasswordlessType.
var (
	PasswordlessType_name = map[int32]string{
		0: "PasswordlessType_UNSPECIFIED",
		1: "LINK",
		2: "OTP",
		3: "LINK_OTP",
	}
	PasswordlessType_value = map[string]int32{
		"PasswordlessType_UNSPECIFIED": 0,
		"LINK":                         1,
		"OTP":                          2,
		"LINK_OTP":                     3,
	}
)

func (x PasswordlessType) Enum() *PasswordlessType {
	p := new(PasswordlessType)
	*p = x
	return p
}

func (x PasswordlessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordlessType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[3].Descriptor()
}

func (PasswordlessType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[3]
}

func (x PasswordlessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordlessType.Descriptor instead.
func (PasswordlessType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{3}
}

type TestResultStatus int32

const (
	TestResultStatus_PENDING TestResultStatus = 0
	TestResultStatus_SUCCESS TestResultStatus = 1
	TestResultStatus_FAILURE TestResultStatus = 2
)

// Enum value maps for TestResultStatus.
var (
	TestResultStatus_name = map[int32]string{
		0: "PENDING",
		1: "SUCCESS",
		2: "FAILURE",
	}
	TestResultStatus_value = map[string]int32{
		"PENDING": 0,
		"SUCCESS": 1,
		"FAILURE": 2,
	}
)

func (x TestResultStatus) Enum() *TestResultStatus {
	p := new(TestResultStatus)
	*p = x
	return p
}

func (x TestResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[4].Descriptor()
}

func (TestResultStatus) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[4]
}

func (x TestResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResultStatus.Descriptor instead.
func (TestResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{4}
}

// enums all
type SAMLSigningOptions int32

const (
	SAMLSigningOptions_SAML_SIGNING_OPTIONS_UNSPECIFIED   SAMLSigningOptions = 0
	SAMLSigningOptions_NO_SIGNING                         SAMLSigningOptions = 1
	SAMLSigningOptions_SAML_ONLY_RESPONSE_SIGNING         SAMLSigningOptions = 2
	SAMLSigningOptions_SAML_ONLY_ASSERTION_SIGNING        SAMLSigningOptions = 3
	SAMLSigningOptions_SAML_RESPONSE_ASSERTION_SIGNING    SAMLSigningOptions = 4
	SAMLSigningOptions_SAML_RESPONSE_OR_ASSERTION_SIGNING SAMLSigningOptions = 5
)

// Enum value maps for SAMLSigningOptions.
var (
	SAMLSigningOptions_name = map[int32]string{
		0: "SAML_SIGNING_OPTIONS_UNSPECIFIED",
		1: "NO_SIGNING",
		2: "SAML_ONLY_RESPONSE_SIGNING",
		3: "SAML_ONLY_ASSERTION_SIGNING",
		4: "SAML_RESPONSE_ASSERTION_SIGNING",
		5: "SAML_RESPONSE_OR_ASSERTION_SIGNING",
	}
	SAMLSigningOptions_value = map[string]int32{
		"SAML_SIGNING_OPTIONS_UNSPECIFIED":   0,
		"NO_SIGNING":                         1,
		"SAML_ONLY_RESPONSE_SIGNING":         2,
		"SAML_ONLY_ASSERTION_SIGNING":        3,
		"SAML_RESPONSE_ASSERTION_SIGNING":    4,
		"SAML_RESPONSE_OR_ASSERTION_SIGNING": 5,
	}
)

func (x SAMLSigningOptions) Enum() *SAMLSigningOptions {
	p := new(SAMLSigningOptions)
	*p = x
	return p
}

func (x SAMLSigningOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SAMLSigningOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[5].Descriptor()
}

func (SAMLSigningOptions) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[5]
}

func (x SAMLSigningOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SAMLSigningOptions.Descriptor instead.
func (SAMLSigningOptions) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{5}
}

type RequestBinding int32

const (
	RequestBinding_REQUEST_BINDING_UNSPECIFIED RequestBinding = 0
	RequestBinding_HTTP_POST                   RequestBinding = 1
	RequestBinding_HTTP_REDIRECT               RequestBinding = 2
)

// Enum value maps for RequestBinding.
var (
	RequestBinding_name = map[int32]string{
		0: "REQUEST_BINDING_UNSPECIFIED",
		1: "HTTP_POST",
		2: "HTTP_REDIRECT",
	}
	RequestBinding_value = map[string]int32{
		"REQUEST_BINDING_UNSPECIFIED": 0,
		"HTTP_POST":                   1,
		"HTTP_REDIRECT":               2,
	}
)

func (x RequestBinding) Enum() *RequestBinding {
	p := new(RequestBinding)
	*p = x
	return p
}

func (x RequestBinding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestBinding) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[6].Descriptor()
}

func (RequestBinding) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[6]
}

func (x RequestBinding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestBinding.Descriptor instead.
func (RequestBinding) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{6}
}

type TokenAuthType int32

const (
	TokenAuthType_TOKEN_AUTH_TYPE_UNSPECIFIED TokenAuthType = 0
	TokenAuthType_URL_PARAMS                  TokenAuthType = 1
	TokenAuthType_BASIC_AUTH                  TokenAuthType = 2
)

// Enum value maps for TokenAuthType.
var (
	TokenAuthType_name = map[int32]string{
		0: "TOKEN_AUTH_TYPE_UNSPECIFIED",
		1: "URL_PARAMS",
		2: "BASIC_AUTH",
	}
	TokenAuthType_value = map[string]int32{
		"TOKEN_AUTH_TYPE_UNSPECIFIED": 0,
		"URL_PARAMS":                  1,
		"BASIC_AUTH":                  2,
	}
)

func (x TokenAuthType) Enum() *TokenAuthType {
	p := new(TokenAuthType)
	*p = x
	return p
}

func (x TokenAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[7].Descriptor()
}

func (TokenAuthType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[7]
}

func (x TokenAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAuthType.Descriptor instead.
func (TokenAuthType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{7}
}

type OIDCScope int32

const (
	OIDCScope_OIDC_SCOPE_UNSPECIFIED OIDCScope = 0
	OIDCScope_openid                 OIDCScope = 1
	OIDCScope_profile                OIDCScope = 2
	OIDCScope_email                  OIDCScope = 3
	OIDCScope_address                OIDCScope = 4
	OIDCScope_phone                  OIDCScope = 5
)

// Enum value maps for OIDCScope.
var (
	OIDCScope_name = map[int32]string{
		0: "OIDC_SCOPE_UNSPECIFIED",
		1: "openid",
		2: "profile",
		3: "email",
		4: "address",
		5: "phone",
	}
	OIDCScope_value = map[string]int32{
		"OIDC_SCOPE_UNSPECIFIED": 0,
		"openid":                 1,
		"profile":                2,
		"email":                  3,
		"address":                4,
		"phone":                  5,
	}
)

func (x OIDCScope) Enum() *OIDCScope {
	p := new(OIDCScope)
	*p = x
	return p
}

func (x OIDCScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCScope) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[8].Descriptor()
}

func (OIDCScope) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[8]
}

func (x OIDCScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCScope.Descriptor instead.
func (OIDCScope) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{8}
}

type ConnectionType int32

const (
	ConnectionType_INVALID      ConnectionType = 0
	ConnectionType_OIDC         ConnectionType = 1
	ConnectionType_SAML         ConnectionType = 2
	ConnectionType_PASSWORD     ConnectionType = 3
	ConnectionType_OAUTH        ConnectionType = 4
	ConnectionType_PASSWORDLESS ConnectionType = 5
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "INVALID",
		1: "OIDC",
		2: "SAML",
		3: "PASSWORD",
		4: "OAUTH",
		5: "PASSWORDLESS",
	}
	ConnectionType_value = map[string]int32{
		"INVALID":      0,
		"OIDC":         1,
		"SAML":         2,
		"PASSWORD":     3,
		"OAUTH":        4,
		"PASSWORDLESS": 5,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[9].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[9]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{9}
}

type ConnectionStatus int32

const (
	ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED ConnectionStatus = 0
	ConnectionStatus_DRAFT                         ConnectionStatus = 1
	ConnectionStatus_IN_PROGRESS                   ConnectionStatus = 2
	ConnectionStatus_COMPLETED                     ConnectionStatus = 3
)

// Enum value maps for ConnectionStatus.
var (
	ConnectionStatus_name = map[int32]string{
		0: "CONNECTION_STATUS_UNSPECIFIED",
		1: "DRAFT",
		2: "IN_PROGRESS",
		3: "COMPLETED",
	}
	ConnectionStatus_value = map[string]int32{
		"CONNECTION_STATUS_UNSPECIFIED": 0,
		"DRAFT":                         1,
		"IN_PROGRESS":                   2,
		"COMPLETED":                     3,
	}
)

func (x ConnectionStatus) Enum() *ConnectionStatus {
	p := new(ConnectionStatus)
	*p = x
	return p
}

func (x ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[10].Descriptor()
}

func (ConnectionStatus) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[10]
}

func (x ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionStatus.Descriptor instead.
func (ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{10}
}

type ConnectionProvider int32

const (
	ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED ConnectionProvider = 0
	ConnectionProvider_OKTA                            ConnectionProvider = 1
	ConnectionProvider_GOOGLE                          ConnectionProvider = 2
	ConnectionProvider_MICROSOFT_AD                    ConnectionProvider = 3
	ConnectionProvider_AUTH0                           ConnectionProvider = 4
	ConnectionProvider_ONELOGIN                        ConnectionProvider = 5
	ConnectionProvider_PING_IDENTITY                   ConnectionProvider = 6
	ConnectionProvider_JUMPCLOUD                       ConnectionProvider = 7
	ConnectionProvider_CUSTOM                          ConnectionProvider = 8
	ConnectionProvider_GITHUB                          ConnectionProvider = 9
	ConnectionProvider_GITLAB                          ConnectionProvider = 10
	ConnectionProvider_LINKEDIN                        ConnectionProvider = 11
	ConnectionProvider_SALESFORCE                      ConnectionProvider = 12
	ConnectionProvider_MICROSOFT                       ConnectionProvider = 13
	ConnectionProvider_IDP_SIMULATOR                   ConnectionProvider = 14
	ConnectionProvider_SCALEKIT                        ConnectionProvider = 15
	ConnectionProvider_ADFS                            ConnectionProvider = 16
)

// Enum value maps for ConnectionProvider.
var (
	ConnectionProvider_name = map[int32]string{
		0:  "CONNECTION_PROVIDER_UNSPECIFIED",
		1:  "OKTA",
		2:  "GOOGLE",
		3:  "MICROSOFT_AD",
		4:  "AUTH0",
		5:  "ONELOGIN",
		6:  "PING_IDENTITY",
		7:  "JUMPCLOUD",
		8:  "CUSTOM",
		9:  "GITHUB",
		10: "GITLAB",
		11: "LINKEDIN",
		12: "SALESFORCE",
		13: "MICROSOFT",
		14: "IDP_SIMULATOR",
		15: "SCALEKIT",
		16: "ADFS",
	}
	ConnectionProvider_value = map[string]int32{
		"CONNECTION_PROVIDER_UNSPECIFIED": 0,
		"OKTA":                            1,
		"GOOGLE":                          2,
		"MICROSOFT_AD":                    3,
		"AUTH0":                           4,
		"ONELOGIN":                        5,
		"PING_IDENTITY":                   6,
		"JUMPCLOUD":                       7,
		"CUSTOM":                          8,
		"GITHUB":                          9,
		"GITLAB":                          10,
		"LINKEDIN":                        11,
		"SALESFORCE":                      12,
		"MICROSOFT":                       13,
		"IDP_SIMULATOR":                   14,
		"SCALEKIT":                        15,
		"ADFS":                            16,
	}
)

func (x ConnectionProvider) Enum() *ConnectionProvider {
	p := new(ConnectionProvider)
	*p = x
	return p
}

func (x ConnectionProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_connections_connections_proto_enumTypes[11].Descriptor()
}

func (ConnectionProvider) Type() protoreflect.EnumType {
	return &file_scalekit_v1_connections_connections_proto_enumTypes[11]
}

func (x ConnectionProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionProvider.Descriptor instead.
func (ConnectionProvider) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{11}
}

type GetProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProvidersRequest) Reset() {
	*x = GetProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProvidersRequest) ProtoMessage() {}

func (x *GetProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProvidersRequest.ProtoReflect.Descriptor instead.
func (*GetProvidersRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{0}
}

type GetProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []*Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *GetProvidersResponse) Reset() {
	*x = GetProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProvidersResponse) ProtoMessage() {}

func (x *GetProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProvidersResponse.ProtoReflect.Descriptor instead.
func (*GetProvidersResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{1}
}

func (x *GetProvidersResponse) GetProviders() []*Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId       string  `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	DisplayName string  `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{2}
}

func (x *Provider) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *Provider) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Provider) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateEnvironmentConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *CreateConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateEnvironmentConnectionRequest) Reset() {
	*x = CreateEnvironmentConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnvironmentConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentConnectionRequest) ProtoMessage() {}

func (x *CreateEnvironmentConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEnvironmentConnectionRequest) GetConnection() *CreateConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Connection     *CreateConnection `protobuf:"bytes,3,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{4}
}

func (x *CreateConnectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateConnectionRequest) GetConnection() *CreateConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type CreateConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider ConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type     ConnectionType     `protobuf:"varint,2,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
}

func (x *CreateConnection) Reset() {
	*x = CreateConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnection) ProtoMessage() {}

func (x *CreateConnection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnection.ProtoReflect.Descriptor instead.
func (*CreateConnection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{5}
}

func (x *CreateConnection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *CreateConnection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider          ConnectionProvider     `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type              ConnectionType         `protobuf:"varint,3,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
	Status            ConnectionStatus       `protobuf:"varint,4,opt,name=status,proto3,enum=scalekit.v1.connections.ConnectionStatus" json:"status,omitempty"`
	Enabled           bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DebugEnabled      bool                   `protobuf:"varint,6,opt,name=debug_enabled,json=debugEnabled,proto3" json:"debug_enabled,omitempty"`
	OrganizationId    *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	UiButtonTitle     string                 `protobuf:"bytes,8,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	ConfigurationType ConfigurationType      `protobuf:"varint,9,opt,name=configuration_type,json=configurationType,proto3,enum=scalekit.v1.connections.ConfigurationType" json:"configuration_type,omitempty"`
	TestConnectionUri string                 `protobuf:"bytes,12,opt,name=test_connection_uri,json=testConnectionUri,proto3" json:"test_connection_uri,omitempty"`
	AttributeMapping  map[string]string      `protobuf:"bytes,15,rep,name=attribute_mapping,json=attributeMapping,proto3" json:"attribute_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Types that are assignable to Settings:
	//
	//	*Connection_OidcConfig
	//	*Connection_SamlConfig
	//	*Connection_OauthConfig
	//	*Connection_PasswordlessConfig
	Settings isConnection_Settings `protobuf_oneof:"settings"`
	KeyId    *string               `protobuf:"bytes,21,opt,name=key_id,json=keyId,proto3,oneof" json:"key_id,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{6}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *Connection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

func (x *Connection) GetStatus() ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *Connection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Connection) GetDebugEnabled() bool {
	if x != nil {
		return x.DebugEnabled
	}
	return false
}

func (x *Connection) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *Connection) GetUiButtonTitle() string {
	if x != nil {
		return x.UiButtonTitle
	}
	return ""
}

func (x *Connection) GetConfigurationType() ConfigurationType {
	if x != nil {
		return x.ConfigurationType
	}
	return ConfigurationType_CONFIGURATION_TYPE_UNSPECIFIED
}

func (x *Connection) GetTestConnectionUri() string {
	if x != nil {
		return x.TestConnectionUri
	}
	return ""
}

func (x *Connection) GetAttributeMapping() map[string]string {
	if x != nil {
		return x.AttributeMapping
	}
	return nil
}

func (x *Connection) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Connection) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (m *Connection) GetSettings() isConnection_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *Connection) GetOidcConfig() *OIDCConnectionConfig {
	if x, ok := x.GetSettings().(*Connection_OidcConfig); ok {
		return x.OidcConfig
	}
	return nil
}

func (x *Connection) GetSamlConfig() *SAMLConnectionConfigResponse {
	if x, ok := x.GetSettings().(*Connection_SamlConfig); ok {
		return x.SamlConfig
	}
	return nil
}

func (x *Connection) GetOauthConfig() *OAuthConnectionConfig {
	if x, ok := x.GetSettings().(*Connection_OauthConfig); ok {
		return x.OauthConfig
	}
	return nil
}

func (x *Connection) GetPasswordlessConfig() *PasswordLessConfig {
	if x, ok := x.GetSettings().(*Connection_PasswordlessConfig); ok {
		return x.PasswordlessConfig
	}
	return nil
}

func (x *Connection) GetKeyId() string {
	if x != nil && x.KeyId != nil {
		return *x.KeyId
	}
	return ""
}

type isConnection_Settings interface {
	isConnection_Settings()
}

type Connection_OidcConfig struct {
	OidcConfig *OIDCConnectionConfig `protobuf:"bytes,18,opt,name=oidc_config,json=oidcConfig,proto3,oneof"`
}

type Connection_SamlConfig struct {
	SamlConfig *SAMLConnectionConfigResponse `protobuf:"bytes,19,opt,name=saml_config,json=samlConfig,proto3,oneof"`
}

type Connection_OauthConfig struct {
	OauthConfig *OAuthConnectionConfig `protobuf:"bytes,20,opt,name=oauth_config,json=oauthConfig,proto3,oneof"`
}

type Connection_PasswordlessConfig struct {
	PasswordlessConfig *PasswordLessConfig `protobuf:"bytes,22,opt,name=passwordless_config,json=passwordlessConfig,proto3,oneof"`
}

func (*Connection_OidcConfig) isConnection_Settings() {}

func (*Connection_SamlConfig) isConnection_Settings() {}

func (*Connection_OauthConfig) isConnection_Settings() {}

func (*Connection_PasswordlessConfig) isConnection_Settings() {}

type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{7}
}

func (x *CreateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateEnvironmentConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string            `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Connection   *UpdateConnection `protobuf:"bytes,3,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateEnvironmentConnectionRequest) Reset() {
	*x = UpdateEnvironmentConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnvironmentConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentConnectionRequest) ProtoMessage() {}

func (x *UpdateEnvironmentConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEnvironmentConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *UpdateEnvironmentConnectionRequest) GetConnection() *UpdateConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Connection     *UpdateConnection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionRequest) Reset() {
	*x = UpdateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionRequest) ProtoMessage() {}

func (x *UpdateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateConnectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConnectionRequest) GetConnection() *UpdateConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          ConnectionProvider      `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type              ConnectionType          `protobuf:"varint,3,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
	DebugEnabled      *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=debug_enabled,json=debugEnabled,proto3" json:"debug_enabled,omitempty"`
	UiButtonTitle     *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	ConfigurationType ConfigurationType       `protobuf:"varint,11,opt,name=configuration_type,json=configurationType,proto3,enum=scalekit.v1.connections.ConfigurationType" json:"configuration_type,omitempty"`
	AttributeMapping  map[string]string       `protobuf:"bytes,15,rep,name=attribute_mapping,json=attributeMapping,proto3" json:"attribute_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Settings:
	//
	//	*UpdateConnection_OidcConfig
	//	*UpdateConnection_SamlConfig
	//	*UpdateConnection_OauthConfig
	//	*UpdateConnection_PasswordlessConfig
	Settings isUpdateConnection_Settings `protobuf_oneof:"settings"`
	KeyId    *string                     `protobuf:"bytes,19,opt,name=key_id,json=keyId,proto3,oneof" json:"key_id,omitempty"`
}

func (x *UpdateConnection) Reset() {
	*x = UpdateConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnection) ProtoMessage() {}

func (x *UpdateConnection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnection.ProtoReflect.Descriptor instead.
func (*UpdateConnection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateConnection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *UpdateConnection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

func (x *UpdateConnection) GetDebugEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.DebugEnabled
	}
	return nil
}

func (x *UpdateConnection) GetUiButtonTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.UiButtonTitle
	}
	return nil
}

func (x *UpdateConnection) GetConfigurationType() ConfigurationType {
	if x != nil {
		return x.ConfigurationType
	}
	return ConfigurationType_CONFIGURATION_TYPE_UNSPECIFIED
}

func (x *UpdateConnection) GetAttributeMapping() map[string]string {
	if x != nil {
		return x.AttributeMapping
	}
	return nil
}

func (m *UpdateConnection) GetSettings() isUpdateConnection_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *UpdateConnection) GetOidcConfig() *OIDCConnectionConfig {
	if x, ok := x.GetSettings().(*UpdateConnection_OidcConfig); ok {
		return x.OidcConfig
	}
	return nil
}

func (x *UpdateConnection) GetSamlConfig() *SAMLConnectionConfigRequest {
	if x, ok := x.GetSettings().(*UpdateConnection_SamlConfig); ok {
		return x.SamlConfig
	}
	return nil
}

func (x *UpdateConnection) GetOauthConfig() *OAuthConnectionConfig {
	if x, ok := x.GetSettings().(*UpdateConnection_OauthConfig); ok {
		return x.OauthConfig
	}
	return nil
}

func (x *UpdateConnection) GetPasswordlessConfig() *PasswordLessConfig {
	if x, ok := x.GetSettings().(*UpdateConnection_PasswordlessConfig); ok {
		return x.PasswordlessConfig
	}
	return nil
}

func (x *UpdateConnection) GetKeyId() string {
	if x != nil && x.KeyId != nil {
		return *x.KeyId
	}
	return ""
}

type isUpdateConnection_Settings interface {
	isUpdateConnection_Settings()
}

type UpdateConnection_OidcConfig struct {
	OidcConfig *OIDCConnectionConfig `protobuf:"bytes,16,opt,name=oidc_config,json=oidcConfig,proto3,oneof"`
}

type UpdateConnection_SamlConfig struct {
	SamlConfig *SAMLConnectionConfigRequest `protobuf:"bytes,17,opt,name=saml_config,json=samlConfig,proto3,oneof"`
}

type UpdateConnection_OauthConfig struct {
	OauthConfig *OAuthConnectionConfig `protobuf:"bytes,18,opt,name=oauth_config,json=oauthConfig,proto3,oneof"`
}

type UpdateConnection_PasswordlessConfig struct {
	PasswordlessConfig *PasswordLessConfig `protobuf:"bytes,20,opt,name=passwordless_config,json=passwordlessConfig,proto3,oneof"`
}

func (*UpdateConnection_OidcConfig) isUpdateConnection_Settings() {}

func (*UpdateConnection_SamlConfig) isUpdateConnection_Settings() {}

func (*UpdateConnection_OauthConfig) isUpdateConnection_Settings() {}

func (*UpdateConnection_PasswordlessConfig) isUpdateConnection_Settings() {}

type UpdateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionResponse) Reset() {
	*x = UpdateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionResponse) ProtoMessage() {}

func (x *UpdateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type DeleteEnvironmentConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *DeleteEnvironmentConnectionRequest) Reset() {
	*x = DeleteEnvironmentConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnvironmentConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvironmentConnectionRequest) ProtoMessage() {}

func (x *DeleteEnvironmentConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvironmentConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnvironmentConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteEnvironmentConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type DeleteConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteConnectionRequest) Reset() {
	*x = DeleteConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteConnectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetEnvironmentConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *GetEnvironmentConnectionRequest) Reset() {
	*x = GetEnvironmentConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnvironmentConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvironmentConnectionRequest) ProtoMessage() {}

func (x *GetEnvironmentConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvironmentConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetEnvironmentConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{14}
}

func (x *GetEnvironmentConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type GetConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConnectionRequest) Reset() {
	*x = GetConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionRequest) ProtoMessage() {}

func (x *GetConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{15}
}

func (x *GetConnectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *GetConnectionResponse) Reset() {
	*x = GetConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionResponse) ProtoMessage() {}

func (x *GetConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{16}
}

func (x *GetConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type ListConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId *string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	Domain         *string `protobuf:"bytes,3,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
	Include        *string `protobuf:"bytes,4,opt,name=include,proto3,oneof" json:"include,omitempty"`
}

func (x *ListConnectionsRequest) Reset() {
	*x = ListConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsRequest) ProtoMessage() {}

func (x *ListConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{17}
}

func (x *ListConnectionsRequest) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *ListConnectionsRequest) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *ListConnectionsRequest) GetInclude() string {
	if x != nil && x.Include != nil {
		return *x.Include
	}
	return ""
}

type ListConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*ListConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ListConnectionsResponse) Reset() {
	*x = ListConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsResponse) ProtoMessage() {}

func (x *ListConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{18}
}

func (x *ListConnectionsResponse) GetConnections() []*ListConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ListConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider         ConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider" json:"provider,omitempty"`
	Type             ConnectionType     `protobuf:"varint,3,opt,name=type,proto3,enum=scalekit.v1.connections.ConnectionType" json:"type,omitempty"`
	Status           ConnectionStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=scalekit.v1.connections.ConnectionStatus" json:"status,omitempty"`
	Enabled          bool               `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OrganizationId   string             `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UiButtonTitle    string             `protobuf:"bytes,7,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	Domains          []string           `protobuf:"bytes,8,rep,name=domains,proto3" json:"domains,omitempty"`
	OrganizationName string             `protobuf:"bytes,9,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
}

func (x *ListConnection) Reset() {
	*x = ListConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnection) ProtoMessage() {}

func (x *ListConnection) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnection.ProtoReflect.Descriptor instead.
func (*ListConnection) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{19}
}

func (x *ListConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListConnection) GetProvider() ConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *ListConnection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_INVALID
}

func (x *ListConnection) GetStatus() ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *ListConnection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ListConnection) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListConnection) GetUiButtonTitle() string {
	if x != nil {
		return x.UiButtonTitle
	}
	return ""
}

func (x *ListConnection) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ListConnection) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

type ListOrganizationConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOrganizationConnectionsRequest) Reset() {
	*x = ListOrganizationConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationConnectionsRequest) ProtoMessage() {}

func (x *ListOrganizationConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{20}
}

func (x *ListOrganizationConnectionsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationConnectionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListOrganizationConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string            `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize     uint32            `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	PrevPageToken string            `protobuf:"bytes,3,opt,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	Connections   []*ListConnection `protobuf:"bytes,4,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ListOrganizationConnectionsResponse) Reset() {
	*x = ListOrganizationConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationConnectionsResponse) ProtoMessage() {}

func (x *ListOrganizationConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{21}
}

func (x *ListOrganizationConnectionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOrganizationConnectionsResponse) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListOrganizationConnectionsResponse) GetPrevPageToken() string {
	if x != nil {
		return x.PrevPageToken
	}
	return ""
}

func (x *ListOrganizationConnectionsResponse) GetConnections() []*ListConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type SearchOrganizationConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          *string             `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Provider       *ConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=scalekit.v1.connections.ConnectionProvider,oneof" json:"provider,omitempty"`
	Status         *ConnectionStatus   `protobuf:"varint,3,opt,name=status,proto3,enum=scalekit.v1.connections.ConnectionStatus,oneof" json:"status,omitempty"`
	ConnectionType *ConnectionType     `protobuf:"varint,4,opt,name=connection_type,json=connectionType,proto3,enum=scalekit.v1.connections.ConnectionType,oneof" json:"connection_type,omitempty"`
	PageSize       uint32              `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string              `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SearchOrganizationConnectionsRequest) Reset() {
	*x = SearchOrganizationConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOrganizationConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOrganizationConnectionsRequest) ProtoMessage() {}

func (x *SearchOrganizationConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOrganizationConnectionsRequest.ProtoReflect.Descriptor instead.
func (*SearchOrganizationConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{22}
}

func (x *SearchOrganizationConnectionsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *SearchOrganizationConnectionsRequest) GetProvider() ConnectionProvider {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ConnectionProvider_CONNECTION_PROVIDER_UNSPECIFIED
}

func (x *SearchOrganizationConnectionsRequest) GetStatus() ConnectionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *SearchOrganizationConnectionsRequest) GetConnectionType() ConnectionType {
	if x != nil && x.ConnectionType != nil {
		return *x.ConnectionType
	}
	return ConnectionType_INVALID
}

func (x *SearchOrganizationConnectionsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOrganizationConnectionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type SearchOrganizationConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string            `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize     uint32            `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	PrevPageToken string            `protobuf:"bytes,3,opt,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	Connections   []*ListConnection `protobuf:"bytes,4,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *SearchOrganizationConnectionsResponse) Reset() {
	*x = SearchOrganizationConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOrganizationConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOrganizationConnectionsResponse) ProtoMessage() {}

func (x *SearchOrganizationConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOrganizationConnectionsResponse.ProtoReflect.Descriptor instead.
func (*SearchOrganizationConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{23}
}

func (x *SearchOrganizationConnectionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *SearchOrganizationConnectionsResponse) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *SearchOrganizationConnectionsResponse) GetPrevPageToken() string {
	if x != nil {
		return x.PrevPageToken
	}
	return ""
}

func (x *SearchOrganizationConnectionsResponse) GetConnections() []*ListConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ToggleEnvironmentConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ToggleEnvironmentConnectionRequest) Reset() {
	*x = ToggleEnvironmentConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleEnvironmentConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleEnvironmentConnectionRequest) ProtoMessage() {}

func (x *ToggleEnvironmentConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleEnvironmentConnectionRequest.ProtoReflect.Descriptor instead.
func (*ToggleEnvironmentConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{24}
}

func (x *ToggleEnvironmentConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type ToggleConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ToggleConnectionRequest) Reset() {
	*x = ToggleConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleConnectionRequest) ProtoMessage() {}

func (x *ToggleConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleConnectionRequest.ProtoReflect.Descriptor instead.
func (*ToggleConnectionRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{25}
}

func (x *ToggleConnectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ToggleConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ToggleConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *ToggleConnectionResponse) Reset() {
	*x = ToggleConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleConnectionResponse) ProtoMessage() {}

func (x *ToggleConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleConnectionResponse.ProtoReflect.Descriptor instead.
func (*ToggleConnectionResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{26}
}

func (x *ToggleConnectionResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleConnectionResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type OIDCConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer                       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	DiscoveryEndpoint            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=discovery_endpoint,json=discoveryEndpoint,proto3" json:"discovery_endpoint,omitempty"`
	AuthorizeUri                 *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=authorize_uri,json=authorizeUri,proto3" json:"authorize_uri,omitempty"`
	TokenUri                     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	UserInfoUri                  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=user_info_uri,json=userInfoUri,proto3" json:"user_info_uri,omitempty"`
	JwksUri                      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	ClientId                     *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret                 *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scopes                       []OIDCScope             `protobuf:"varint,10,rep,packed,name=scopes,proto3,enum=scalekit.v1.connections.OIDCScope" json:"scopes,omitempty"`
	TokenAuthType                TokenAuthType           `protobuf:"varint,11,opt,name=token_auth_type,json=tokenAuthType,proto3,enum=scalekit.v1.connections.TokenAuthType" json:"token_auth_type,omitempty"`
	RedirectUri                  string                  `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	PkceEnabled                  *wrapperspb.BoolValue   `protobuf:"bytes,13,opt,name=pkce_enabled,json=pkceEnabled,proto3" json:"pkce_enabled,omitempty"`
	IdpLogoutRequired            *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=idp_logout_required,json=idpLogoutRequired,proto3" json:"idp_logout_required,omitempty"`
	PostLogoutRedirectUri        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=post_logout_redirect_uri,json=postLogoutRedirectUri,proto3" json:"post_logout_redirect_uri,omitempty"`
	BackchannelLogoutRedirectUri *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=backchannel_logout_redirect_uri,json=backchannelLogoutRedirectUri,proto3" json:"backchannel_logout_redirect_uri,omitempty"`
}

func (x *OIDCConnectionConfig) Reset() {
	*x = OIDCConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCConnectionConfig) ProtoMessage() {}

func (x *OIDCConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCConnectionConfig.ProtoReflect.Descriptor instead.
func (*OIDCConnectionConfig) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{27}
}

func (x *OIDCConnectionConfig) GetIssuer() *wrapperspb.StringValue {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *OIDCConnectionConfig) GetDiscoveryEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.DiscoveryEndpoint
	}
	return nil
}

func (x *OIDCConnectionConfig) GetAuthorizeUri() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthorizeUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetTokenUri() *wrapperspb.StringValue {
	if x != nil {
		return x.TokenUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetUserInfoUri() *wrapperspb.StringValue {
	if x != nil {
		return x.UserInfoUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetJwksUri() *wrapperspb.StringValue {
	if x != nil {
		return x.JwksUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetClientId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *OIDCConnectionConfig) GetClientSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *OIDCConnectionConfig) GetScopes() []OIDCScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OIDCConnectionConfig) GetTokenAuthType() TokenAuthType {
	if x != nil {
		return x.TokenAuthType
	}
	return TokenAuthType_TOKEN_AUTH_TYPE_UNSPECIFIED
}

func (x *OIDCConnectionConfig) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *OIDCConnectionConfig) GetPkceEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.PkceEnabled
	}
	return nil
}

func (x *OIDCConnectionConfig) GetIdpLogoutRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.IdpLogoutRequired
	}
	return nil
}

func (x *OIDCConnectionConfig) GetPostLogoutRedirectUri() *wrapperspb.StringValue {
	if x != nil {
		return x.PostLogoutRedirectUri
	}
	return nil
}

func (x *OIDCConnectionConfig) GetBackchannelLogoutRedirectUri() *wrapperspb.StringValue {
	if x != nil {
		return x.BackchannelLogoutRedirectUri
	}
	return nil
}

type OAuthConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizeUri     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=authorize_uri,json=authorizeUri,proto3" json:"authorize_uri,omitempty"`
	TokenUri         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	UserInfoUri      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=user_info_uri,json=userInfoUri,proto3" json:"user_info_uri,omitempty"`
	ClientId         *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret     *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scopes           []string                `protobuf:"bytes,10,rep,name=scopes,proto3" json:"scopes,omitempty"`
	RedirectUri      string                  `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	PkceEnabled      *wrapperspb.BoolValue   `protobuf:"bytes,13,opt,name=pkce_enabled,json=pkceEnabled,proto3" json:"pkce_enabled,omitempty"`
	Prompt           *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=prompt,proto3" json:"prompt,omitempty"`
	UsePlatformCreds *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=use_platform_creds,json=usePlatformCreds,proto3" json:"use_platform_creds,omitempty"`
}

func (x *OAuthConnectionConfig) Reset() {
	*x = OAuthConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthConnectionConfig) ProtoMessage() {}

func (x *OAuthConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthConnectionConfig.ProtoReflect.Descriptor instead.
func (*OAuthConnectionConfig) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{28}
}

func (x *OAuthConnectionConfig) GetAuthorizeUri() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthorizeUri
	}
	return nil
}

func (x *OAuthConnectionConfig) GetTokenUri() *wrapperspb.StringValue {
	if x != nil {
		return x.TokenUri
	}
	return nil
}

func (x *OAuthConnectionConfig) GetUserInfoUri() *wrapperspb.StringValue {
	if x != nil {
		return x.UserInfoUri
	}
	return nil
}

func (x *OAuthConnectionConfig) GetClientId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *OAuthConnectionConfig) GetClientSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *OAuthConnectionConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuthConnectionConfig) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *OAuthConnectionConfig) GetPkceEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.PkceEnabled
	}
	return nil
}

func (x *OAuthConnectionConfig) GetPrompt() *wrapperspb.StringValue {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (x *OAuthConnectionConfig) GetUsePlatformCreds() *wrapperspb.BoolValue {
	if x != nil {
		return x.UsePlatformCreds
	}
	return nil
}

type PasswordLessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     PasswordlessType        `protobuf:"varint,1,opt,name=type,proto3,enum=scalekit.v1.connections.PasswordlessType" json:"type,omitempty"`
	Frequency                *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=frequency,proto3,oneof" json:"frequency,omitempty"`
	Validity                 *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=validity,proto3,oneof" json:"validity,omitempty"`
	EnforceSameBrowserOrigin *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=enforce_same_browser_origin,json=enforceSameBrowserOrigin,proto3,oneof" json:"enforce_same_browser_origin,omitempty"`
	CodeChallengeLength      *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=code_challenge_length,json=codeChallengeLength,proto3,oneof" json:"code_challenge_length,omitempty"`
	CodeChallengeType        *CodeChallengeType      `protobuf:"varint,6,opt,name=code_challenge_type,json=codeChallengeType,proto3,enum=scalekit.v1.connections.CodeChallengeType,oneof" json:"code_challenge_type,omitempty"`
}

func (x *PasswordLessConfig) Reset() {
	*x = PasswordLessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordLessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordLessConfig) ProtoMessage() {}

func (x *PasswordLessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordLessConfig.ProtoReflect.Descriptor instead.
func (*PasswordLessConfig) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{29}
}

func (x *PasswordLessConfig) GetType() PasswordlessType {
	if x != nil {
		return x.Type
	}
	return PasswordlessType_PasswordlessType_UNSPECIFIED
}

func (x *PasswordLessConfig) GetFrequency() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *PasswordLessConfig) GetValidity() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Validity
	}
	return nil
}

func (x *PasswordLessConfig) GetEnforceSameBrowserOrigin() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnforceSameBrowserOrigin
	}
	return nil
}

func (x *PasswordLessConfig) GetCodeChallengeLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CodeChallengeLength
	}
	return nil
}

func (x *PasswordLessConfig) GetCodeChallengeType() CodeChallengeType {
	if x != nil && x.CodeChallengeType != nil {
		return *x.CodeChallengeType
	}
	return CodeChallengeType_CODE_CHALLENGE_TYPE_UNSPECIFIED
}

type SAMLConnectionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpMetadataUrl       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=idp_metadata_url,json=idpMetadataUrl,proto3" json:"idp_metadata_url,omitempty"`
	IdpEntityId          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	IdpSsoUrl            *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=idp_sso_url,json=idpSsoUrl,proto3" json:"idp_sso_url,omitempty"`
	IdpCertificate       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=idp_certificate,json=idpCertificate,proto3" json:"idp_certificate,omitempty"`
	IdpSloUrl            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=idp_slo_url,json=idpSloUrl,proto3" json:"idp_slo_url,omitempty"`
	UiButtonTitle        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	IdpNameIdFormat      NameIdFormat            `protobuf:"varint,7,opt,name=idp_name_id_format,json=idpNameIdFormat,proto3,enum=scalekit.v1.connections.NameIdFormat" json:"idp_name_id_format,omitempty"`
	IdpSsoRequestBinding RequestBinding          `protobuf:"varint,8,opt,name=idp_sso_request_binding,json=idpSsoRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_sso_request_binding,omitempty"`
	IdpSloRequestBinding RequestBinding          `protobuf:"varint,9,opt,name=idp_slo_request_binding,json=idpSloRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_slo_request_binding,omitempty"`
	SamlSigningOption    SAMLSigningOptions      `protobuf:"varint,10,opt,name=saml_signing_option,json=samlSigningOption,proto3,enum=scalekit.v1.connections.SAMLSigningOptions" json:"saml_signing_option,omitempty"`
	ForceAuthn           *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=force_authn,json=forceAuthn,proto3" json:"force_authn,omitempty"`
	DefaultRedirectUri   *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	AssertionEncrypted   *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=assertion_encrypted,json=assertionEncrypted,proto3" json:"assertion_encrypted,omitempty"`
	WantRequestSigned    *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=want_request_signed,json=wantRequestSigned,proto3" json:"want_request_signed,omitempty"`
	CertificateId        *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	IdpSloRequired       *wrapperspb.BoolValue   `protobuf:"bytes,19,opt,name=idp_slo_required,json=idpSloRequired,proto3" json:"idp_slo_required,omitempty"`
}

func (x *SAMLConnectionConfigRequest) Reset() {
	*x = SAMLConnectionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLConnectionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConnectionConfigRequest) ProtoMessage() {}

func (x *SAMLConnectionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConnectionConfigRequest.ProtoReflect.Descriptor instead.
func (*SAMLConnectionConfigRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{30}
}

func (x *SAMLConnectionConfigRequest) GetIdpMetadataUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpMetadataUrl
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpEntityId
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpSsoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSsoUrl
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpCertificate() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpCertificate
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpSloUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSloUrl
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetUiButtonTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.UiButtonTitle
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpNameIdFormat() NameIdFormat {
	if x != nil {
		return x.IdpNameIdFormat
	}
	return NameIdFormat_NAME_ID_FORMAT_NIL
}

func (x *SAMLConnectionConfigRequest) GetIdpSsoRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSsoRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigRequest) GetIdpSloRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSloRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigRequest) GetSamlSigningOption() SAMLSigningOptions {
	if x != nil {
		return x.SamlSigningOption
	}
	return SAMLSigningOptions_SAML_SIGNING_OPTIONS_UNSPECIFIED
}

func (x *SAMLConnectionConfigRequest) GetForceAuthn() *wrapperspb.BoolValue {
	if x != nil {
		return x.ForceAuthn
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetDefaultRedirectUri() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetAssertionEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.AssertionEncrypted
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetWantRequestSigned() *wrapperspb.BoolValue {
	if x != nil {
		return x.WantRequestSigned
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetCertificateId() *wrapperspb.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *SAMLConnectionConfigRequest) GetIdpSloRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.IdpSloRequired
	}
	return nil
}

type SAMLConnectionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpEntityId             string                  `protobuf:"bytes,1,opt,name=sp_entity_id,json=spEntityId,proto3" json:"sp_entity_id,omitempty"`
	SpAssertionUrl         string                  `protobuf:"bytes,2,opt,name=sp_assertion_url,json=spAssertionUrl,proto3" json:"sp_assertion_url,omitempty"`
	SpMetadataUrl          string                  `protobuf:"bytes,3,opt,name=sp_metadata_url,json=spMetadataUrl,proto3" json:"sp_metadata_url,omitempty"`
	IdpMetadataUrl         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=idp_metadata_url,json=idpMetadataUrl,proto3" json:"idp_metadata_url,omitempty"`
	IdpEntityId            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	IdpSsoUrl              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=idp_sso_url,json=idpSsoUrl,proto3" json:"idp_sso_url,omitempty"`
	IdpCertificates        []*IDPCertificate       `protobuf:"bytes,7,rep,name=idp_certificates,json=idpCertificates,proto3" json:"idp_certificates,omitempty"`
	IdpSloUrl              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=idp_slo_url,json=idpSloUrl,proto3" json:"idp_slo_url,omitempty"`
	UiButtonTitle          *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ui_button_title,json=uiButtonTitle,proto3" json:"ui_button_title,omitempty"`
	IdpNameIdFormat        NameIdFormat            `protobuf:"varint,10,opt,name=idp_name_id_format,json=idpNameIdFormat,proto3,enum=scalekit.v1.connections.NameIdFormat" json:"idp_name_id_format,omitempty"`
	IdpSsoRequestBinding   RequestBinding          `protobuf:"varint,11,opt,name=idp_sso_request_binding,json=idpSsoRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_sso_request_binding,omitempty"`
	IdpSloRequestBinding   RequestBinding          `protobuf:"varint,12,opt,name=idp_slo_request_binding,json=idpSloRequestBinding,proto3,enum=scalekit.v1.connections.RequestBinding" json:"idp_slo_request_binding,omitempty"`
	SamlSigningOption      SAMLSigningOptions      `protobuf:"varint,13,opt,name=saml_signing_option,json=samlSigningOption,proto3,enum=scalekit.v1.connections.SAMLSigningOptions" json:"saml_signing_option,omitempty"`
	AllowIdpInitiatedLogin *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=allow_idp_initiated_login,json=allowIdpInitiatedLogin,proto3" json:"allow_idp_initiated_login,omitempty"`
	ForceAuthn             *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=force_authn,json=forceAuthn,proto3" json:"force_authn,omitempty"`
	DefaultRedirectUri     *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	AssertionEncrypted     *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=assertion_encrypted,json=assertionEncrypted,proto3" json:"assertion_encrypted,omitempty"`
	WantRequestSigned      *wrapperspb.BoolValue   `protobuf:"bytes,18,opt,name=want_request_signed,json=wantRequestSigned,proto3" json:"want_request_signed,omitempty"`
	CertificateId          *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	IdpSloRequired         *wrapperspb.BoolValue   `protobuf:"bytes,20,opt,name=idp_slo_required,json=idpSloRequired,proto3" json:"idp_slo_required,omitempty"`
	SpSloUrl               *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=sp_slo_url,json=spSloUrl,proto3" json:"sp_slo_url,omitempty"`
}

func (x *SAMLConnectionConfigResponse) Reset() {
	*x = SAMLConnectionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLConnectionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConnectionConfigResponse) ProtoMessage() {}

func (x *SAMLConnectionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConnectionConfigResponse.ProtoReflect.Descriptor instead.
func (*SAMLConnectionConfigResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{31}
}

func (x *SAMLConnectionConfigResponse) GetSpEntityId() string {
	if x != nil {
		return x.SpEntityId
	}
	return ""
}

func (x *SAMLConnectionConfigResponse) GetSpAssertionUrl() string {
	if x != nil {
		return x.SpAssertionUrl
	}
	return ""
}

func (x *SAMLConnectionConfigResponse) GetSpMetadataUrl() string {
	if x != nil {
		return x.SpMetadataUrl
	}
	return ""
}

func (x *SAMLConnectionConfigResponse) GetIdpMetadataUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpMetadataUrl
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpEntityId
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpSsoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSsoUrl
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpCertificates() []*IDPCertificate {
	if x != nil {
		return x.IdpCertificates
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpSloUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IdpSloUrl
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetUiButtonTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.UiButtonTitle
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpNameIdFormat() NameIdFormat {
	if x != nil {
		return x.IdpNameIdFormat
	}
	return NameIdFormat_NAME_ID_FORMAT_NIL
}

func (x *SAMLConnectionConfigResponse) GetIdpSsoRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSsoRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigResponse) GetIdpSloRequestBinding() RequestBinding {
	if x != nil {
		return x.IdpSloRequestBinding
	}
	return RequestBinding_REQUEST_BINDING_UNSPECIFIED
}

func (x *SAMLConnectionConfigResponse) GetSamlSigningOption() SAMLSigningOptions {
	if x != nil {
		return x.SamlSigningOption
	}
	return SAMLSigningOptions_SAML_SIGNING_OPTIONS_UNSPECIFIED
}

func (x *SAMLConnectionConfigResponse) GetAllowIdpInitiatedLogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowIdpInitiatedLogin
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetForceAuthn() *wrapperspb.BoolValue {
	if x != nil {
		return x.ForceAuthn
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetDefaultRedirectUri() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetAssertionEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.AssertionEncrypted
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetWantRequestSigned() *wrapperspb.BoolValue {
	if x != nil {
		return x.WantRequestSigned
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetCertificateId() *wrapperspb.StringValue {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetIdpSloRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.IdpSloRequired
	}
	return nil
}

func (x *SAMLConnectionConfigResponse) GetSpSloUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.SpSloUrl
	}
	return nil
}

type IDPCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate string                 `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpiryTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Id          string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Issuer      string                 `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *IDPCertificate) Reset() {
	*x = IDPCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPCertificate) ProtoMessage() {}

func (x *IDPCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPCertificate.ProtoReflect.Descriptor instead.
func (*IDPCertificate) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{32}
}

func (x *IDPCertificate) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *IDPCertificate) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *IDPCertificate) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *IDPCertificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDPCertificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type GetOIDCMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *OIDCMetadataRequest `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetOIDCMetadataRequest) Reset() {
	*x = GetOIDCMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOIDCMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOIDCMetadataRequest) ProtoMessage() {}

func (x *GetOIDCMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOIDCMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetOIDCMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{33}
}

func (x *GetOIDCMetadataRequest) GetMetadata() *OIDCMetadataRequest {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type OIDCMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *OIDCMetadataRequest) Reset() {
	*x = OIDCMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCMetadataRequest) ProtoMessage() {}

func (x *OIDCMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCMetadataRequest.ProtoReflect.Descriptor instead.
func (*OIDCMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{34}
}

func (x *OIDCMetadataRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type GetOIDCMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer                string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorizationEndpoint string `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	TokenEndpoint         string `protobuf:"bytes,3,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	UserinfoEndpoint      string `protobuf:"bytes,4,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	JwksUri               string `protobuf:"bytes,5,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
}

func (x *GetOIDCMetadataResponse) Reset() {
	*x = GetOIDCMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOIDCMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOIDCMetadataResponse) ProtoMessage() {}

func (x *GetOIDCMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOIDCMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetOIDCMetadataResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{35}
}

func (x *GetOIDCMetadataResponse) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *GetOIDCMetadataResponse) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

type GetSAMLMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SAMLMetadataRequest `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetSAMLMetadataRequest) Reset() {
	*x = GetSAMLMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLMetadataRequest) ProtoMessage() {}

func (x *GetSAMLMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetSAMLMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{36}
}

func (x *GetSAMLMetadataRequest) GetMetadata() *SAMLMetadataRequest {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SAMLMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataUrl string `protobuf:"bytes,1,opt,name=metadata_url,json=metadataUrl,proto3" json:"metadata_url,omitempty"`
}

func (x *SAMLMetadataRequest) Reset() {
	*x = SAMLMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLMetadataRequest) ProtoMessage() {}

func (x *SAMLMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLMetadataRequest.ProtoReflect.Descriptor instead.
func (*SAMLMetadataRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{37}
}

func (x *SAMLMetadataRequest) GetMetadataUrl() string {
	if x != nil {
		return x.MetadataUrl
	}
	return ""
}

type GetSAMLMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpEntityId          string   `protobuf:"bytes,1,opt,name=idp_entity_id,json=idpEntityId,proto3" json:"idp_entity_id,omitempty"`
	IdpSsoUrl            string   `protobuf:"bytes,2,opt,name=idp_sso_url,json=idpSsoUrl,proto3" json:"idp_sso_url,omitempty"`
	IdpSloUrl            string   `protobuf:"bytes,3,opt,name=idp_slo_url,json=idpSloUrl,proto3" json:"idp_slo_url,omitempty"`
	IdpCertificates      []string `protobuf:"bytes,4,rep,name=idp_certificates,json=idpCertificates,proto3" json:"idp_certificates,omitempty"`
	IdpNameIdFormat      string   `protobuf:"bytes,5,opt,name=idp_name_id_format,json=idpNameIdFormat,proto3" json:"idp_name_id_format,omitempty"`
	RequestBinding       string   `protobuf:"bytes,6,opt,name=request_binding,json=requestBinding,proto3" json:"request_binding,omitempty"`
	WantAssertionsSigned bool     `protobuf:"varint,7,opt,name=want_assertions_signed,json=wantAssertionsSigned,proto3" json:"want_assertions_signed,omitempty"`
}

func (x *GetSAMLMetadataResponse) Reset() {
	*x = GetSAMLMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLMetadataResponse) ProtoMessage() {}

func (x *GetSAMLMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetSAMLMetadataResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{38}
}

func (x *GetSAMLMetadataResponse) GetIdpEntityId() string {
	if x != nil {
		return x.IdpEntityId
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetIdpSsoUrl() string {
	if x != nil {
		return x.IdpSsoUrl
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetIdpSloUrl() string {
	if x != nil {
		return x.IdpSloUrl
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetIdpCertificates() []string {
	if x != nil {
		return x.IdpCertificates
	}
	return nil
}

func (x *GetSAMLMetadataResponse) GetIdpNameIdFormat() string {
	if x != nil {
		return x.IdpNameIdFormat
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetRequestBinding() string {
	if x != nil {
		return x.RequestBinding
	}
	return ""
}

func (x *GetSAMLMetadataResponse) GetWantAssertionsSigned() bool {
	if x != nil {
		return x.WantAssertionsSigned
	}
	return false
}

type GetSAMLCertificateDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *SAMLCertificateRequest `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetSAMLCertificateDetailsRequest) Reset() {
	*x = GetSAMLCertificateDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLCertificateDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLCertificateDetailsRequest) ProtoMessage() {}

func (x *GetSAMLCertificateDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLCertificateDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetSAMLCertificateDetailsRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{39}
}

func (x *GetSAMLCertificateDetailsRequest) GetCertificate() *SAMLCertificateRequest {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type SAMLCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SAMLCertificateRequest) Reset() {
	*x = SAMLCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLCertificateRequest) ProtoMessage() {}

func (x *SAMLCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLCertificateRequest.ProtoReflect.Descriptor instead.
func (*SAMLCertificateRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{40}
}

func (x *SAMLCertificateRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetSAMLCertificateDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	NotAfter  int64  `protobuf:"varint,2,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	NotBefore int64  `protobuf:"varint,3,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	Subject   string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Issuer    string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *GetSAMLCertificateDetailsResponse) Reset() {
	*x = GetSAMLCertificateDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSAMLCertificateDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSAMLCertificateDetailsResponse) ProtoMessage() {}

func (x *GetSAMLCertificateDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSAMLCertificateDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetSAMLCertificateDetailsResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{41}
}

func (x *GetSAMLCertificateDetailsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GetSAMLCertificateDetailsResponse) GetNotAfter() int64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

func (x *GetSAMLCertificateDetailsResponse) GetNotBefore() int64 {
	if x != nil {
		return x.NotBefore
	}
	return 0
}

func (x *GetSAMLCertificateDetailsResponse) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSAMLCertificateDetailsResponse) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type GetConnectionTestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId  string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	TestRequestId string `protobuf:"bytes,2,opt,name=test_request_id,json=testRequestId,proto3" json:"test_request_id,omitempty"`
}

func (x *GetConnectionTestResultRequest) Reset() {
	*x = GetConnectionTestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionTestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionTestResultRequest) ProtoMessage() {}

func (x *GetConnectionTestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionTestResultRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionTestResultRequest) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{42}
}

func (x *GetConnectionTestResultRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *GetConnectionTestResultRequest) GetTestRequestId() string {
	if x != nil {
		return x.TestRequestId
	}
	return ""
}

type GetConnectionTestResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           TestResultStatus `protobuf:"varint,1,opt,name=status,proto3,enum=scalekit.v1.connections.TestResultStatus" json:"status,omitempty"`
	UserInfo         *string          `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3,oneof" json:"user_info,omitempty"`
	Error            *string          `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	ErrorDescription *string          `protobuf:"bytes,4,opt,name=error_description,json=errorDescription,proto3,oneof" json:"error_description,omitempty"`
	ErrorDetails     *string          `protobuf:"bytes,5,opt,name=error_details,json=errorDetails,proto3,oneof" json:"error_details,omitempty"`
}

func (x *GetConnectionTestResultResponse) Reset() {
	*x = GetConnectionTestResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionTestResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionTestResultResponse) ProtoMessage() {}

func (x *GetConnectionTestResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionTestResultResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionTestResultResponse) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{43}
}

func (x *GetConnectionTestResultResponse) GetStatus() TestResultStatus {
	if x != nil {
		return x.Status
	}
	return TestResultStatus_PENDING
}

func (x *GetConnectionTestResultResponse) GetUserInfo() string {
	if x != nil && x.UserInfo != nil {
		return *x.UserInfo
	}
	return ""
}

func (x *GetConnectionTestResultResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *GetConnectionTestResultResponse) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

func (x *GetConnectionTestResultResponse) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

type PasswordConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasswordConnectionConfig) Reset() {
	*x = PasswordConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_connections_connections_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordConnectionConfig) ProtoMessage() {}

func (x *PasswordConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_connections_connections_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordConnectionConfig.ProtoReflect.Descriptor instead.
func (*PasswordConnectionConfig) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_connections_connections_proto_rawDescGZIP(), []int{44}
}

var File_scalekit_v1_connections_connections_proto protoreflect.FileDescriptor

var file_scalekit_v1_connections_connections_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0xf3,
	0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x32, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x49,
	0x44, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x15, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20,
	0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x08, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x15, 0x22, 0x53, 0x69,
	0x67, 0x6e, 0x20, 0x49, 0x6e, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x22, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x71, 0x92, 0x41, 0x65, 0x32, 0x4a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x4a, 0x17, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x33, 0x36, 0x32,
	0x34, 0x37, 0x34, 0x39, 0x30, 0x30, 0x36, 0x38, 0x34, 0x38, 0x31, 0x34, 0x22, 0xba, 0x48, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0xac, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb0,
	0x1b, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7d, 0x92, 0x41, 0x7a, 0x32,
	0x5f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x17, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x32, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x31,
	0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33, 0x33, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0xc2, 0x01,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x79, 0x92,
	0x41, 0x76, 0x32, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x73, 0x75, 0x63, 0x68, 0x20,
	0x61, 0x73, 0x20, 0x4f, 0x4b, 0x54, 0x41, 0x2c, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2c,
	0x20, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0x41, 0x44, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x29,
	0x4a, 0x06, 0x22, 0x4f, 0x4b, 0x54, 0x41, 0x22, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x77, 0x92, 0x41, 0x74, 0x32,
	0x6a, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x20, 0x43, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x28, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x29, 0x2c, 0x20,
	0x53, 0x41, 0x4d, 0x4c, 0x2c, 0x20, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x2c, 0x20, 0x6f, 0x72, 0x20,
	0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x2e, 0x4a, 0x06, 0x22, 0x4f, 0x49,
	0x44, 0x43, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7c, 0x32, 0x6b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x2c, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x2c, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x2e, 0x4a, 0x0d, 0x22, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x90, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x32, 0x82, 0x01, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x62, 0x75, 0x74, 0x20, 0x63, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x86, 0x01, 0x32,
	0x7e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0xc1, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x92, 0x01,
	0x92, 0x41, 0x8e, 0x01, 0x32, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x16, 0x22, 0x6f, 0x72, 0x67,
	0x5f, 0x32, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33,
	0x33, 0x22, 0x48, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0xbd, 0x01, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x94, 0x01, 0x92, 0x41, 0x81, 0x01, 0x32, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x20, 0x48, 0x65, 0x6c, 0x70, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4a, 0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f, 0x22, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0xd5, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x7a, 0x92, 0x41, 0x77, 0x32, 0x6b, 0x48, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x3a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x20, 0x28, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x20, 0x28, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x29, 0x4a, 0x08, 0x22, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x22, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xdf, 0x01, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0xae, 0x01,
	0x92, 0x41, 0xaa, 0x01, 0x32, 0x66, 0x55, 0x52, 0x49, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x20, 0x56, 0x69, 0x73, 0x69, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x55,
	0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x2e, 0x4a, 0x40, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x32, 0x31, 0x32,
	0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33, 0x33, 0x22, 0x52, 0x11,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x69, 0x12, 0x81, 0x02, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x98, 0x01, 0x92, 0x41, 0x7c, 0x32, 0x7a,
	0x4d, 0x61, 0x70, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x7b, 0x27, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x27, 0x3a,
	0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x6e,
	0x61, 0x6d, 0x65, 0x27, 0x3a, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x27, 0x7d, 0x2e, 0xba, 0x48, 0x16, 0x9a, 0x01, 0x13,
	0x10, 0x1e, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x2a, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0x80, 0x02, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x74, 0x92, 0x41, 0x5f, 0x32, 0x45, 0x57, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x52, 0x46, 0x43, 0x20, 0x33, 0x33, 0x33, 0x39, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x30, 0x31, 0x2d, 0x31, 0x35,
	0x54, 0x31, 0x34, 0x3a, 0x33, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0xe0, 0x41, 0x03, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x74, 0x92, 0x41, 0x5f,
	0x32, 0x45, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x52, 0x46, 0x43, 0x20, 0x33, 0x33, 0x33, 0x39, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x30,
	0x32, 0x2d, 0x32, 0x30, 0x54, 0x30, 0x39, 0x3a, 0x31, 0x35, 0x3a, 0x33, 0x30, 0x5a, 0x22, 0xe0,
	0x41, 0x03, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xb3, 0x01,
	0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x49,
	0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x20, 0x28, 0x4f, 0x49, 0x44, 0x43, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x4f, 0x49, 0x44, 0x43, 0x2e, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x53, 0x41, 0x4d,
	0x4c, 0x2e, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x32, 0x4d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x2e, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a, 0x13, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x5a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x4c, 0x69, 0x6e, 0x6b,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x4d, 0x41, 0x47, 0x49, 0x43,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x2e, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41,
	0x5e, 0x32, 0x5c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74,
	0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x52, 0x4c, 0x73, 0x2e, 0x48,
	0x02, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x0d, 0x10,
	0x0f, 0x22, 0x77, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4d, 0x32, 0x2b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e,
	0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31,
	0x32, 0x22, 0xca, 0x3e, 0x05, 0xfa, 0x02, 0x02, 0x69, 0x64, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x36, 0x92, 0x41, 0x2d, 0x32, 0x23, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xca, 0x3e, 0x05, 0xfa, 0x02,
	0x02, 0x69, 0x64, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x71, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x3c, 0x32,
	0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31,
	0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x51, 0x92, 0x41, 0x45, 0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32,
	0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0x92, 0x41, 0x2d, 0x32, 0x23, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0xca, 0x3e, 0x05, 0xfa, 0x02, 0x02, 0x69, 0x64, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xbf, 0x0c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x2e, 0x92, 0x41, 0x23, 0x32, 0x17, 0x53, 0x53, 0x4f, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x08, 0x22, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x22, 0xba, 0x48, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x72, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x35, 0x92, 0x41, 0x2a, 0x32, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x2f, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x4a, 0x06, 0x22,
	0x4f, 0x49, 0x44, 0x43, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x62, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x6e,
	0x6f, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x92, 0x41,
	0x35, 0x32, 0x21, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x4a, 0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x53, 0x53, 0x4f, 0x22, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x4a, 0x08, 0x22, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x22, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x2f, 0x92, 0x41, 0x13, 0x32, 0x11, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xba, 0x48, 0x16, 0x9a, 0x01, 0x13, 0x10,
	0x1e, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x2a, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0x80, 0x02, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c,
	0x4f, 0x49, 0x44, 0x43, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x53, 0x41, 0x4d,
	0x4c, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x3d, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33,
	0x92, 0x41, 0x30, 0x32, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4f, 0x41,
	0x55, 0x54, 0x48, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3d, 0x92,
	0x41, 0x3a, 0x32, 0x38, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x3d, 0x20, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x01, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0b, 0x4a, 0x04, 0x08,
	0x0c, 0x10, 0x0f, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x45, 0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32,
	0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x71, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x3c, 0x32,
	0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31,
	0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x51, 0x92, 0x41, 0x45, 0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32,
	0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x92, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x3e, 0x32, 0x24, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31,
	0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x90, 0x01, 0x92, 0x41, 0x83, 0x01, 0x32, 0x6a, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x28, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x29,
	0x2e, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x77, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x2e, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31,
	0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba,
	0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8f, 0x01, 0x92, 0x41, 0x82, 0x01, 0x32, 0x68, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x28, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x29, 0x2e, 0x20,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32,
	0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x32, 0xb3, 0x01, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x27, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7,
	0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x46, 0x32, 0x2d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x79, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x15, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32,
	0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x92, 0x41,
	0x56, 0x32, 0x43, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x79, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0f, 0x22, 0x68, 0x65, 0x72, 0x6f, 0x2d, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20,
	0x48, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a,
	0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49,
	0x92, 0x41, 0x46, 0x32, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x2d, 0x73, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd, 0x08, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x23, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x17, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x32, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32,
	0x31, 0x33, 0x31, 0x31, 0x32, 0x35, 0x35, 0x33, 0x33, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x8d,
	0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x44,
	0x92, 0x41, 0x41, 0x32, 0x35, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67,
	0x2e, 0x2c, 0x20, 0x4f, 0x4b, 0x54, 0x41, 0x2c, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2c,
	0x20, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0x41, 0x44, 0x29, 0x4a, 0x08, 0x22, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x22, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x78,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x06, 0x22, 0x4f, 0x49, 0x44,
	0x43, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x45, 0x92, 0x41, 0x3f, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0d, 0x22, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32, 0x41, 0x57, 0x68, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x32, 0x3f, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22, 0x6f,
	0x72, 0x67, 0x5f, 0x32, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x35,
	0x35, 0x33, 0x33, 0x22, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60,
	0x92, 0x41, 0x4e, 0x32, 0x3a, 0x54, 0x65, 0x78, 0x74, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x10, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f,
	0x22, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x52, 0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x74, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x24, 0x5b, 0x22, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x79, 0x6f, 0x75, 0x72, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x5d, 0x52, 0x07, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x2a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x13, 0x22, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x80, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x63, 0x92, 0x41, 0x59, 0x32, 0x53, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x20, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x33, 0x30, 0x2e, 0x4a, 0x02, 0x33,
	0x30, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x1e, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x32, 0x61,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x4a, 0x1c, 0x65, 0x79, 0x4a, 0x77, 0x59, 0x57, 0x64, 0x6c, 0x49, 0x6a, 0x6f, 0x79, 0x4c,
	0x43, 0x4a, 0x73, 0x61, 0x57, 0x31, 0x70, 0x64, 0x43, 0x49, 0x36, 0x4d, 0x7a, 0x42, 0x39, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x23, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfa, 0x06, 0x0a, 0x24, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41,
	0x47, 0x32, 0x2d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x72,
	0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44,
	0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33,
	0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48,
	0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x27, 0x92, 0x41, 0x1c, 0x32,
	0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x06, 0x22, 0x4f, 0x4b, 0x54, 0x41, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x7d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x35, 0x92,
	0x41, 0x2a, 0x32, 0x1b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x0b, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x22, 0xba, 0x48, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x35, 0x92, 0x41, 0x2a, 0x32, 0x1b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x0b, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x22, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x80, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x63, 0x92, 0x41, 0x59, 0x32, 0x53, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x20, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x33, 0x30, 0x2e, 0x4a, 0x02,
	0x33, 0x30, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x1e, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x32,
	0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78,
	0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x4a, 0x1c, 0x65, 0x79, 0x4a, 0x77, 0x59, 0x57, 0x64, 0x6c, 0x49, 0x6a, 0x6f, 0x79,
	0x4c, 0x43, 0x4a, 0x73, 0x61, 0x57, 0x31, 0x70, 0x64, 0x43, 0x49, 0x36, 0x4d, 0x7a, 0x42, 0x39,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x99, 0x02, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c, 0x01,
	0x0a, 0x22, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x45,
	0x32, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e,
	0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x16, 0x22,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32,
	0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a,
	0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x69, 0x92, 0x41, 0x5d, 0x32, 0x44, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x15, 0x22,
	0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x33,
	0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x68, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x4c, 0x32, 0x32,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x64, 0x4a, 0x16, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x31, 0x33, 0x31, 0x32,
	0x34, 0x33, 0x34, 0x31, 0x32, 0x33, 0x33, 0x31, 0x32, 0x22, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xbc, 0x02,
	0x0a, 0x18, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8e, 0x01, 0x92,
	0x41, 0x8a, 0x01, 0x32, 0x81, 0x01, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x72, 0x75, 0x65, 0x20,
	0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92,
	0x41, 0x35, 0x32, 0x24, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x0d, 0x22, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x0f, 0x0a,
	0x14, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x20, 0x55, 0x52, 0x4c, 0x4a, 0x23, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79,
	0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x92, 0x41,
	0x5a, 0x32, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x44, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x2d,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x84,
	0x01, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x55, 0x72, 0x69, 0x12, 0x74, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x29, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x82, 0x01, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x66,
	0x6f, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2c, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x69,
	0x12, 0x70, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x08, 0x4a, 0x57, 0x4b, 0x53, 0x20, 0x55, 0x52, 0x49, 0x4a,
	0x28, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x6a, 0x77, 0x6b, 0x73, 0x22, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55,
	0x72, 0x69, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x49, 0x44, 0x4a, 0x11, 0x22, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x6c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4a, 0x15, 0x22, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x63,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x0b, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x4a, 0x15, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c,
	0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x41, 0x75, 0x74, 0x68, 0x20, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x0c, 0x22, 0x55, 0x52, 0x4c,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x22, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92,
	0x41, 0x44, 0x32, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x55, 0x52, 0x49,
	0x4a, 0x34, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x69,
	0x64, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x33, 0x34, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x6b, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x0c, 0x50, 0x4b, 0x43, 0x45,
	0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x6b, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x13, 0x69,
	0x64, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x49, 0x44, 0x50, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x11, 0x69, 0x64, 0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0xb4, 0x01, 0x0a, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x92, 0x41, 0x57, 0x32, 0x18, 0x70, 0x6f, 0x73,
	0x74, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x75, 0x72, 0x69, 0x4a, 0x3b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x73, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x33,
	0x34, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0xea, 0x01, 0x0a,
	0x1f, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x84, 0x01, 0x92, 0x41, 0x7e, 0x32, 0x3c, 0x62, 0x61, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x75, 0x72, 0x69, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x69, 0x64, 0x70, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x3e, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x73, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x31, 0x32, 0x33, 0x34, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x1c, 0x62, 0x61, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0xa9, 0x08, 0x0a, 0x15, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2d, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x55, 0x72, 0x69, 0x12, 0x74, 0x0a, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x92, 0x41, 0x36,
	0x32, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x29, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69,
	0x12, 0x82, 0x01, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2c, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x72, 0x69, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x09, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x4a, 0x11, 0x22, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4a, 0x15, 0x22, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x0b, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x4a, 0x15, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x62, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x32, 0x0c, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2c, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x6b, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x0c, 0x50,
	0x4b, 0x43, 0x45, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x6b, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x32, 0x13, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x06, 0x22, 0x6e, 0x6f, 0x6e, 0x65, 0x22, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x6d, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x32, 0x18, 0x55, 0x73, 0x65, 0x20, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x43, 0x72, 0x65, 0x64, 0x73, 0x22, 0xa4, 0x06, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x11, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x06, 0x22,
	0x4c, 0x49, 0x4e, 0x4b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41,
	0x13, 0x32, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x4a, 0x01, 0x31, 0x48, 0x00, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x20,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x4a, 0x05, 0x22, 0x36, 0x30, 0x30, 0x22, 0x48, 0x01, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23,
	0x32, 0x1b, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x53, 0x61, 0x6d, 0x65, 0x20, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x20, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x48, 0x02, 0x52, 0x18, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x61,
	0x6d, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x74, 0x0a, 0x15, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x15, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x20, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4a, 0x01, 0x36, 0x48, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x13, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x20, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x09, 0x22, 0x4e,
	0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x22, 0x48, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xab, 0x0f, 0x0a,
	0x1b, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a,
	0x10, 0x69, 0x64, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x10, 0x49, 0x44, 0x50, 0x20,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2b, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x78, 0x0a, 0x0d, 0x69, 0x64, 0x70,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36,
	0x92, 0x41, 0x33, 0x32, 0x0d, 0x49, 0x44, 0x50, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x49, 0x44, 0x4a, 0x22, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75,
	0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x22, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x0b, 0x49, 0x44, 0x50,
	0x20, 0x53, 0x53, 0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x73, 0x6f, 0x22,
	0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x5b, 0x0a, 0x0f, 0x69,
	0x64, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x49, 0x44, 0x50, 0x20, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f,
	0x73, 0x6c, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35,
	0x32, 0x0b, 0x49, 0x44, 0x50, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c,
	0x2f, 0x73, 0x6c, 0x6f, 0x22, 0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x6c, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x0f, 0x55, 0x49,
	0x20, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4a, 0x10, 0x22,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f, 0x22, 0x52,
	0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x74,
	0x0a, 0x12, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x12, 0x49, 0x44, 0x50, 0x20, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x07, 0x22, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x22, 0x52, 0x0f, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x32, 0x17, 0x49, 0x44, 0x50, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x22,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53,
	0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x8d, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x32, 0x17, 0x49, 0x44, 0x50, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0f, 0x22, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53,
	0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x93, 0x01, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x36, 0x92, 0x41, 0x33,
	0x32, 0x13, 0x53, 0x41, 0x4d, 0x4c, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x1c, 0x22, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49,
	0x4e, 0x47, 0x22, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x0b, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x14, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x55, 0x52, 0x49, 0x4a, 0x2b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f,
	0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22,
	0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x69, 0x12, 0x6b, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x32, 0x13, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x12, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x6a, 0x0a, 0x13, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32,
	0x13, 0x57, 0x61, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x11, 0x77, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x71, 0x0a,
	0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x49, 0x44, 0x4a, 0x17, 0x22, 0x63, 0x65, 0x72, 0x5f, 0x33,
	0x35, 0x35, 0x38, 0x35, 0x34, 0x32, 0x33, 0x31, 0x36, 0x36, 0x31, 0x34, 0x34, 0x36, 0x31, 0x33,
	0x22, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x62, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x11, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x50, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xf9, 0x13, 0x0a, 0x1c, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x73,
	0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x0c, 0x53, 0x50, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x49, 0x44, 0x4a, 0x22, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79,
	0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x22, 0x52, 0x0a, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x10, 0x73, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43,
	0x92, 0x41, 0x40, 0x32, 0x10, 0x53, 0x50, 0x20, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2c, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x0e, 0x73, 0x70, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x69, 0x0a, 0x0f, 0x73, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41,
	0x3e, 0x32, 0x0f, 0x53, 0x50, 0x20, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x55,
	0x52, 0x4c, 0x4a, 0x2b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75,
	0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52,
	0x0d, 0x73, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x8a,
	0x01, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x10, 0x49, 0x44,
	0x50, 0x20, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x2b,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d,
	0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0e, 0x69, 0x64, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x78, 0x0a, 0x0d, 0x69,
	0x64, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x0d, 0x49, 0x44, 0x50, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x49, 0x44, 0x4a, 0x22, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79,
	0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x22, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x0b, 0x49,
	0x44, 0x50, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f, 0x73, 0x73,
	0x6f, 0x22, 0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x69, 0x0a,
	0x10, 0x69, 0x64, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x44, 0x50, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x49, 0x44, 0x50, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x69, 0x64, 0x70, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f,
	0x73, 0x6c, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35,
	0x32, 0x0b, 0x49, 0x44, 0x50, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x26, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c,
	0x2f, 0x73, 0x6c, 0x6f, 0x22, 0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x6c, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x0f, 0x55, 0x49,
	0x20, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4a, 0x10, 0x22,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x53, 0x4f, 0x22, 0x52,
	0x0d, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x74,
	0x0a, 0x12, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x12, 0x49, 0x44, 0x50, 0x20, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x07, 0x22, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x22, 0x52, 0x0f, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x32, 0x17, 0x49, 0x44, 0x50, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x22,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53,
	0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x89, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x32, 0x17, 0x49, 0x44, 0x50, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x22, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x52, 0x14, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a,
	0x13, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x13, 0x53, 0x41,
	0x4d, 0x4c, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x1c, 0x22, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x22, 0x52,
	0x11, 0x73, 0x61, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x70, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x49, 0x44,
	0x50, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x70, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x53, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x41, 0x75, 0x74,
	0x68, 0x6e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x55, 0x52, 0x49, 0x4a, 0x2b, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x2f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x6b, 0x0a,
	0x13, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x13, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x13, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x13, 0x57, 0x61, 0x6e, 0x74, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x11, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x32, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x49,
	0x44, 0x4a, 0x17, 0x22, 0x63, 0x65, 0x72, 0x5f, 0x33, 0x35, 0x35, 0x38, 0x35, 0x34, 0x32, 0x33,
	0x31, 0x36, 0x36, 0x31, 0x34, 0x34, 0x36, 0x31, 0x33, 0x22, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x69, 0x64, 0x70,
	0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x32, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x50,
	0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x69,
	0x64, 0x70, 0x53, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x96, 0x01,
	0x0a, 0x0a, 0x73, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5a, 0x92, 0x41, 0x54, 0x32, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x53, 0x4c, 0x4f, 0x20, 0x75, 0x72, 0x6c, 0x4a,
	0x38, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x73, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x31, 0x32, 0x33, 0x34, 0x2f, 0x73, 0x6c, 0x6f, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x70,
	0x53, 0x6c, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xbf, 0x03, 0x0a, 0x0e, 0x49, 0x44, 0x50, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0x49, 0x44, 0x50, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x73, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69,
	0x6d, 0x65, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x54,
	0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x17, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x20, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x39, 0x2d,
	0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x0e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x49, 0x44, 0x4a, 0x13, 0x22, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4a, 0x22, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x6c, 0x22,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f,
	0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x13,
	0x4f, 0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f,
	0x49, 0x44, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72,
	0x69, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x13, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x22, 0xb4, 0x02, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x70, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x64, 0x70, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x64, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x64, 0x70, 0x53, 0x6c, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x64, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x77, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x77, 0x61,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x22, 0x75, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x53, 0x41, 0x4d,
	0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xa5, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x72, 0x09, 0x10, 0x01, 0x3a, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xbd, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x57, 0x0a,
	0x11, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x4e, 0x55, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x0c, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x49, 0x4c,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x55, 0x0a,
	0x10, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x54, 0x50, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4f,
	0x54, 0x50, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a,
	0xd8, 0x01, 0x0a, 0x12, 0x53, 0x41, 0x4d, 0x4c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0x53, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x2a,
	0x50, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x52, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10,
	0x02, 0x2a, 0x63, 0x0a, 0x09, 0x4f, 0x49, 0x44, 0x43, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x10, 0x05, 0x2a, 0x5c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x41, 0x55, 0x54, 0x48,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4c, 0x45,
	0x53, 0x53, 0x10, 0x05, 0x2a, 0x60, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x98, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x1f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4b, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55,
	0x54, 0x48, 0x30, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x55, 0x4d, 0x50, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e,
	0x4b, 0x45, 0x44, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x4c, 0x45, 0x53,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x43, 0x52, 0x4f,
	0x53, 0x4f, 0x46, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x49,
	0x4d, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x4b, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x46, 0x53, 0x10,
	0x10, 0x32, 0x8f, 0x5a, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb0, 0x04, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x03, 0x92, 0x41, 0x90, 0x03, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0xe6,
	0x01, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x20, 0x28, 0x53, 0x41, 0x4d, 0x4c, 0x2c, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x29,
	0x2c, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x73, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6c,
	0x0a, 0x37, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x2f, 0x1a, 0x2d, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02,
	0x18, 0x74, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x91, 0x03, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x02, 0x92, 0x41, 0xc1,
	0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x38, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x58, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a,
	0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07,
	0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96,
	0x08, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x07, 0x92, 0x41, 0xbc, 0x06, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x58, 0x0a, 0x1f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x35,
	0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0xf3, 0x04, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0xe1, 0x04, 0x32, 0xde, 0x04, 0x0a, 0x99, 0x01,
	0x2a, 0x96, 0x01, 0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x0a, 0x66, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x1a, 0x5a, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x3d, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x3b, 0x0a, 0x90, 0x01, 0x2a, 0x8d, 0x01, 0x0a,
	0x15, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x1a, 0x0a, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x10, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x08,
	0x1a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x0a, 0x62, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x58, 0x1a, 0x56, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x0a, 0x29, 0x0a, 0x93, 0x01, 0x2a,
	0x90, 0x01, 0x0a, 0x11, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x08, 0x1a, 0x06, 0x47,
	0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x04, 0x1a,
	0x02, 0x67, 0x6f, 0x0a, 0x6d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x63, 0x1a,
	0x61, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x65, 0x72, 0x72,
	0x20, 0x3a, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x63, 0x74, 0x78, 0x2c, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2c,
	0x0a, 0x29, 0x0a, 0x96, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x13, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0e, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06, 0x1a, 0x04, 0x6a, 0x61, 0x76, 0x61, 0x0a, 0x6c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x62, 0x1a, 0x60, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x3d, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18,
	0x74, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb2, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x02, 0x92, 0x41, 0xe7, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x53, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x74, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4a, 0x66, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5f, 0x0a, 0x29, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02,
	0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x09, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x08,
	0x92, 0x41, 0xe6, 0x07, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xd1, 0x01, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79,
	0x20, 0x69, 0x74, 0x73, 0x20, 0x49, 0x44, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61,
	0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x85, 0x01,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x7e, 0x0a, 0x48, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0xe2, 0x04, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0xd0, 0x04, 0x32, 0xcd, 0x04, 0x0a, 0x98, 0x01,
	0x2a, 0x95, 0x01, 0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x0a, 0x65, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5b, 0x1a, 0x59, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x3d, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x0a, 0x29, 0x3b, 0x0a, 0x8a, 0x01, 0x2a, 0x87, 0x01, 0x0a, 0x15,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x1a, 0x0a, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x10, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x08, 0x1a,
	0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x0a, 0x5c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x52, 0x1a, 0x50, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x3d, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a,
	0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x2c, 0x0a, 0x29, 0x0a, 0x8c, 0x01, 0x2a, 0x89, 0x01, 0x0a, 0x11, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x08, 0x1a, 0x06, 0x47, 0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x04, 0x1a, 0x02, 0x67, 0x6f, 0x0a, 0x66, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x1a, 0x5a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x65, 0x72, 0x72, 0x20, 0x3a, 0x3d, 0x20, 0x73, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x63, 0x74, 0x78, 0x2c,
	0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x2c, 0x0a, 0x29, 0x0a, 0x93, 0x01, 0x2a, 0x90, 0x01, 0x0a, 0x13, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x53, 0x44, 0x4b, 0x0a,
	0x0e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06, 0x1a, 0x04, 0x6a, 0x61, 0x76, 0x61, 0x0a,
	0x69, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5f, 0x1a, 0x5d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x28, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xa5, 0x07, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x06, 0x92, 0x41, 0xfa, 0x05, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x32, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4a, 0x61, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5a, 0x0a, 0x22, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x32, 0x1a, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x6a, 0xc1, 0x04, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0xaf, 0x04, 0x32, 0xac, 0x04, 0x0a, 0x87, 0x01, 0x2a,
	0x84, 0x01, 0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x0a, 0x54, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x1a, 0x48, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x3d, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x29, 0x3b, 0x0a, 0x7a, 0x2a, 0x78, 0x0a, 0x15, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x0c, 0x1a, 0x0a, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x53, 0x44,
	0x4b, 0x0a, 0x10, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x08, 0x1a, 0x06, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x0a, 0x4d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x1a,
	0x41, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x3d, 0x20, 0x73,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x0a, 0x20,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x0a, 0x29, 0x0a, 0x7d, 0x2a, 0x7b, 0x0a, 0x11, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x08, 0x1a, 0x06, 0x47, 0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x04, 0x1a, 0x02, 0x67, 0x6f, 0x0a, 0x58, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x4e, 0x1a, 0x4c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2c, 0x20, 0x65, 0x72, 0x72, 0x20, 0x3a, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x0a, 0x20, 0x20, 0x63, 0x74, 0x78, 0x2c, 0x0a, 0x20,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x0a,
	0x29, 0x0a, 0xa4, 0x01, 0x2a, 0xa1, 0x01, 0x0a, 0x13, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0e, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06, 0x1a, 0x04, 0x6a, 0x61, 0x76, 0x61, 0x0a, 0x7a, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x70, 0x1a, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x29, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x74, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa8, 0x03, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8d, 0x02, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4a, 0x6f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x68, 0x0a, 0x22, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42,
	0x0a, 0x40, 0x1a, 0x3e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xcd, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x02, 0x92, 0x41, 0xe1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x44, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x6f, 0x72, 0x20,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a,
	0x6b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x64, 0x0a, 0x1e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x40, 0x1a, 0x3e, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02,
	0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0xf1, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x92, 0x41, 0x91, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xb5, 0x18, 0x02, 0x18,
	0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb4, 0x08, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xba, 0x07, 0x92, 0x41, 0xd5, 0x06, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0xb0, 0x05, 0x0a, 0x0d, 0x78,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x9e, 0x05, 0x32,
	0x9b, 0x05, 0x0a, 0xa7, 0x01, 0x2a, 0xa4, 0x01, 0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b,
	0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0x74, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x6a, 0x1a, 0x68, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x3b, 0x0a, 0xa1, 0x01, 0x2a,
	0x9e, 0x01, 0x0a, 0x15, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x1a, 0x0a, 0x50,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x10, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x08, 0x1a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x0a, 0x73, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x69, 0x1a, 0x67, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x0a, 0x29,
	0x0a, 0xa3, 0x01, 0x2a, 0xa0, 0x01, 0x0a, 0x11, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x08, 0x1a, 0x06, 0x47, 0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x04, 0x1a, 0x02, 0x67, 0x6f, 0x0a, 0x7d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x73, 0x1a, 0x71, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
	0x20, 0x65, 0x72, 0x72, 0x20, 0x3a, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x63, 0x74, 0x78, 0x2c, 0x0a, 0x20,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c,
	0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c,
	0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2c, 0x0a, 0x29, 0x0a, 0xa4, 0x01, 0x2a, 0xa1, 0x01, 0x0a, 0x13, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x53, 0x44,
	0x4b, 0x0a, 0x0e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06, 0x1a, 0x04, 0x6a, 0x61, 0x76,
	0x61, 0x0a, 0x7a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x70, 0x1a, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x29, 0x2e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x3b, 0x82, 0xb5, 0x18,
	0x02, 0x18, 0x74, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x92,
	0x02, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x9d, 0x01, 0x92, 0x41, 0x5a, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xc0, 0x06, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xe1, 0x05, 0x92, 0x41, 0x88, 0x05, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x6a, 0x9a, 0x04, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x88, 0x04, 0x32, 0x85, 0x04, 0x0a, 0x81, 0x01, 0x2a,
	0x7f, 0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a,
	0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x1a, 0x43, 0x61, 0x77, 0x61,
	0x69, 0x74, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x3b,
	0x0a, 0x7e, 0x2a, 0x7c, 0x0a, 0x15, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x1a,
	0x0a, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x10, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x08, 0x1a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x0a, 0x51, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x1a, 0x45, 0x73, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2c, 0x0a, 0x20,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x0a, 0x29,
	0x0a, 0x83, 0x01, 0x2a, 0x80, 0x01, 0x0a, 0x11, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x08, 0x1a, 0x06, 0x47, 0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x04, 0x1a, 0x02, 0x67, 0x6f, 0x0a, 0x5d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x53, 0x1a, 0x51, 0x65, 0x72, 0x72, 0x20, 0x3a, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x63, 0x74,
	0x78, 0x2c, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x29, 0x0a, 0x79, 0x2a, 0x77, 0x0a, 0x13, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x53, 0x44, 0x4b, 0x0a,
	0x0e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06, 0x1a, 0x04, 0x6a, 0x61, 0x76, 0x61, 0x0a,
	0x50, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x1a, 0x44, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28,
	0x29, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x28, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29,
	0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x74, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xdf, 0x02, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x01, 0x92, 0x41, 0x84, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x47, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x40, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x32, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x96, 0x09, 0x0a, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9c, 0x08, 0x92, 0x41, 0xcb, 0x07, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xee, 0x01, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58,
	0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0xc9, 0x04, 0x0a, 0x0d, 0x78, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0xb7, 0x04, 0x32, 0xb4, 0x04,
	0x0a, 0x81, 0x01, 0x2a, 0x7f, 0x0a, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d,
	0x1a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x0c, 0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x0a, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x1a,
	0x43, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x29, 0x3b, 0x0a, 0x7f, 0x2a, 0x7d, 0x0a, 0x15, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x0c, 0x1a, 0x0a, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x53, 0x44, 0x4b, 0x0a,
	0x10, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x08, 0x1a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x0a, 0x52, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x1a, 0x46, 0x73,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a,
	0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x2c, 0x0a, 0x29, 0x0a, 0x83, 0x01, 0x2a, 0x80, 0x01, 0x0a, 0x11, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x08, 0x1a, 0x06, 0x47, 0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x04, 0x1a, 0x02, 0x67, 0x6f, 0x0a, 0x5d, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x53, 0x1a, 0x51, 0x65, 0x72, 0x72, 0x20, 0x3a, 0x3d,
	0x20, 0x73, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
	0x0a, 0x20, 0x20, 0x63, 0x74, 0x78, 0x2c, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x29, 0x0a, 0xa6, 0x01, 0x2a, 0xa3,
	0x01, 0x0a, 0x13, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61,
	0x76, 0x61, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06,
	0x1a, 0x04, 0x6a, 0x61, 0x76, 0x61, 0x0a, 0x7c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x72, 0x1a, 0x70, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x28, 0x29, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x29, 0x3b, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41,
	0x32, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0xe3, 0x02, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd2, 0x01, 0x92, 0x41, 0x86, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x53, 0x53, 0x4f, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x47, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x40, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82,
	0xb5, 0x18, 0x02, 0x18, 0x54, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x32, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa4, 0x09, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa9, 0x08, 0x92, 0x41, 0xd7, 0x07, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf4, 0x01, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x60,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x6a, 0xcd, 0x04, 0x0a, 0x0d, 0x78, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0xbb, 0x04, 0x32, 0xb8, 0x04, 0x0a, 0x83, 0x01, 0x2a, 0x80, 0x01, 0x0a, 0x16,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x1a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x6a, 0x73, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x14, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x0c,
	0x1a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0x50, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x1a, 0x44, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20,
	0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x3b, 0x0a, 0x7f,
	0x2a, 0x7d, 0x0a, 0x15, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x1a, 0x0a, 0x50,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x10, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x08, 0x1a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x0a, 0x52, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x1a, 0x46, 0x73, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2c, 0x0a, 0x20, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x0a, 0x29, 0x0a,
	0x84, 0x01, 0x2a, 0x81, 0x01, 0x0a, 0x11, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x08,
	0x1a, 0x06, 0x47, 0x6f, 0x20, 0x53, 0x44, 0x4b, 0x0a, 0x0c, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x04, 0x1a, 0x02, 0x67, 0x6f, 0x0a, 0x5e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x54, 0x1a, 0x52, 0x65, 0x72, 0x72, 0x20, 0x3a, 0x3d, 0x20, 0x73, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20, 0x20, 0x63, 0x74,
	0x78, 0x2c, 0x0a, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x2c, 0x0a, 0x29, 0x0a, 0xa7, 0x01, 0x2a, 0xa4, 0x01, 0x0a, 0x13, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a, 0x1a, 0x08, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x53, 0x44,
	0x4b, 0x0a, 0x0e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x06, 0x1a, 0x04, 0x6a, 0x61, 0x76,
	0x61, 0x0a, 0x7d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x73, 0x1a, 0x71, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x3d, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x29, 0x2e,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x28, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x3b,
	0x82, 0xb5, 0x18, 0x02, 0x18, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x32, 0x40, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x80,
	0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1, 0x01,
	0x92, 0x41, 0x8d, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x54, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4a, 0x4e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x47, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x3a, 0x1a, 0x38, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x74, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x1a, 0x10, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0xf7, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6e, 0x63,
	0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0xa2, 0x02, 0x03, 0x53, 0x56, 0x43, 0xaa, 0x02, 0x17, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0xca, 0x02, 0x17, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x23, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x19, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x3a, 0x3a, 0x56, 0x31,
	0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scalekit_v1_connections_connections_proto_rawDescOnce sync.Once
	file_scalekit_v1_connections_connections_proto_rawDescData = file_scalekit_v1_connections_connections_proto_rawDesc
)

func file_scalekit_v1_connections_connections_proto_rawDescGZIP() []byte {
	file_scalekit_v1_connections_connections_proto_rawDescOnce.Do(func() {
		file_scalekit_v1_connections_connections_proto_rawDescData = protoimpl.X.CompressGZIP(file_scalekit_v1_connections_connections_proto_rawDescData)
	})
	return file_scalekit_v1_connections_connections_proto_rawDescData
}

var file_scalekit_v1_connections_connections_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_scalekit_v1_connections_connections_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_scalekit_v1_connections_connections_proto_goTypes = []interface{}{
	(CodeChallengeType)(0),                        // 0: scalekit.v1.connections.CodeChallengeType
	(ConfigurationType)(0),                        // 1: scalekit.v1.connections.ConfigurationType
	(NameIdFormat)(0),                             // 2: scalekit.v1.connections.NameIdFormat
	(PasswordlessType)(0),                         // 3: scalekit.v1.connections.PasswordlessType
	(TestResultStatus)(0),                         // 4: scalekit.v1.connections.TestResultStatus
	(SAMLSigningOptions)(0),                       // 5: scalekit.v1.connections.SAMLSigningOptions
	(RequestBinding)(0),                           // 6: scalekit.v1.connections.RequestBinding
	(TokenAuthType)(0),                            // 7: scalekit.v1.connections.TokenAuthType
	(OIDCScope)(0),                                // 8: scalekit.v1.connections.OIDCScope
	(ConnectionType)(0),                           // 9: scalekit.v1.connections.ConnectionType
	(ConnectionStatus)(0),                         // 10: scalekit.v1.connections.ConnectionStatus
	(ConnectionProvider)(0),                       // 11: scalekit.v1.connections.ConnectionProvider
	(*GetProvidersRequest)(nil),                   // 12: scalekit.v1.connections.GetProvidersRequest
	(*GetProvidersResponse)(nil),                  // 13: scalekit.v1.connections.GetProvidersResponse
	(*Provider)(nil),                              // 14: scalekit.v1.connections.Provider
	(*CreateEnvironmentConnectionRequest)(nil),    // 15: scalekit.v1.connections.CreateEnvironmentConnectionRequest
	(*CreateConnectionRequest)(nil),               // 16: scalekit.v1.connections.CreateConnectionRequest
	(*CreateConnection)(nil),                      // 17: scalekit.v1.connections.CreateConnection
	(*Connection)(nil),                            // 18: scalekit.v1.connections.Connection
	(*CreateConnectionResponse)(nil),              // 19: scalekit.v1.connections.CreateConnectionResponse
	(*UpdateEnvironmentConnectionRequest)(nil),    // 20: scalekit.v1.connections.UpdateEnvironmentConnectionRequest
	(*UpdateConnectionRequest)(nil),               // 21: scalekit.v1.connections.UpdateConnectionRequest
	(*UpdateConnection)(nil),                      // 22: scalekit.v1.connections.UpdateConnection
	(*UpdateConnectionResponse)(nil),              // 23: scalekit.v1.connections.UpdateConnectionResponse
	(*DeleteEnvironmentConnectionRequest)(nil),    // 24: scalekit.v1.connections.DeleteEnvironmentConnectionRequest
	(*DeleteConnectionRequest)(nil),               // 25: scalekit.v1.connections.DeleteConnectionRequest
	(*GetEnvironmentConnectionRequest)(nil),       // 26: scalekit.v1.connections.GetEnvironmentConnectionRequest
	(*GetConnectionRequest)(nil),                  // 27: scalekit.v1.connections.GetConnectionRequest
	(*GetConnectionResponse)(nil),                 // 28: scalekit.v1.connections.GetConnectionResponse
	(*ListConnectionsRequest)(nil),                // 29: scalekit.v1.connections.ListConnectionsRequest
	(*ListConnectionsResponse)(nil),               // 30: scalekit.v1.connections.ListConnectionsResponse
	(*ListConnection)(nil),                        // 31: scalekit.v1.connections.ListConnection
	(*ListOrganizationConnectionsRequest)(nil),    // 32: scalekit.v1.connections.ListOrganizationConnectionsRequest
	(*ListOrganizationConnectionsResponse)(nil),   // 33: scalekit.v1.connections.ListOrganizationConnectionsResponse
	(*SearchOrganizationConnectionsRequest)(nil),  // 34: scalekit.v1.connections.SearchOrganizationConnectionsRequest
	(*SearchOrganizationConnectionsResponse)(nil), // 35: scalekit.v1.connections.SearchOrganizationConnectionsResponse
	(*ToggleEnvironmentConnectionRequest)(nil),    // 36: scalekit.v1.connections.ToggleEnvironmentConnectionRequest
	(*ToggleConnectionRequest)(nil),               // 37: scalekit.v1.connections.ToggleConnectionRequest
	(*ToggleConnectionResponse)(nil),              // 38: scalekit.v1.connections.ToggleConnectionResponse
	(*OIDCConnectionConfig)(nil),                  // 39: scalekit.v1.connections.OIDCConnectionConfig
	(*OAuthConnectionConfig)(nil),                 // 40: scalekit.v1.connections.OAuthConnectionConfig
	(*PasswordLessConfig)(nil),                    // 41: scalekit.v1.connections.PasswordLessConfig
	(*SAMLConnectionConfigRequest)(nil),           // 42: scalekit.v1.connections.SAMLConnectionConfigRequest
	(*SAMLConnectionConfigResponse)(nil),          // 43: scalekit.v1.connections.SAMLConnectionConfigResponse
	(*IDPCertificate)(nil),                        // 44: scalekit.v1.connections.IDPCertificate
	(*GetOIDCMetadataRequest)(nil),                // 45: scalekit.v1.connections.GetOIDCMetadataRequest
	(*OIDCMetadataRequest)(nil),                   // 46: scalekit.v1.connections.OIDCMetadataRequest
	(*GetOIDCMetadataResponse)(nil),               // 47: scalekit.v1.connections.GetOIDCMetadataResponse
	(*GetSAMLMetadataRequest)(nil),                // 48: scalekit.v1.connections.GetSAMLMetadataRequest
	(*SAMLMetadataRequest)(nil),                   // 49: scalekit.v1.connections.SAMLMetadataRequest
	(*GetSAMLMetadataResponse)(nil),               // 50: scalekit.v1.connections.GetSAMLMetadataResponse
	(*GetSAMLCertificateDetailsRequest)(nil),      // 51: scalekit.v1.connections.GetSAMLCertificateDetailsRequest
	(*SAMLCertificateRequest)(nil),                // 52: scalekit.v1.connections.SAMLCertificateRequest
	(*GetSAMLCertificateDetailsResponse)(nil),     // 53: scalekit.v1.connections.GetSAMLCertificateDetailsResponse
	(*GetConnectionTestResultRequest)(nil),        // 54: scalekit.v1.connections.GetConnectionTestResultRequest
	(*GetConnectionTestResultResponse)(nil),       // 55: scalekit.v1.connections.GetConnectionTestResultResponse
	(*PasswordConnectionConfig)(nil),              // 56: scalekit.v1.connections.PasswordConnectionConfig
	nil,                                           // 57: scalekit.v1.connections.Connection.AttributeMappingEntry
	nil,                                           // 58: scalekit.v1.connections.UpdateConnection.AttributeMappingEntry
	(*timestamppb.Timestamp)(nil),                 // 59: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),                  // 60: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),                // 61: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                // 62: google.protobuf.UInt32Value
	(*emptypb.Empty)(nil),                         // 63: google.protobuf.Empty
}
var file_scalekit_v1_connections_connections_proto_depIdxs = []int32{
	14,  // 0: scalekit.v1.connections.GetProvidersResponse.providers:type_name -> scalekit.v1.connections.Provider
	17,  // 1: scalekit.v1.connections.CreateEnvironmentConnectionRequest.connection:type_name -> scalekit.v1.connections.CreateConnection
	17,  // 2: scalekit.v1.connections.CreateConnectionRequest.connection:type_name -> scalekit.v1.connections.CreateConnection
	11,  // 3: scalekit.v1.connections.CreateConnection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	9,   // 4: scalekit.v1.connections.CreateConnection.type:type_name -> scalekit.v1.connections.ConnectionType
	11,  // 5: scalekit.v1.connections.Connection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	9,   // 6: scalekit.v1.connections.Connection.type:type_name -> scalekit.v1.connections.ConnectionType
	10,  // 7: scalekit.v1.connections.Connection.status:type_name -> scalekit.v1.connections.ConnectionStatus
	1,   // 8: scalekit.v1.connections.Connection.configuration_type:type_name -> scalekit.v1.connections.ConfigurationType
	57,  // 9: scalekit.v1.connections.Connection.attribute_mapping:type_name -> scalekit.v1.connections.Connection.AttributeMappingEntry
	59,  // 10: scalekit.v1.connections.Connection.create_time:type_name -> google.protobuf.Timestamp
	59,  // 11: scalekit.v1.connections.Connection.update_time:type_name -> google.protobuf.Timestamp
	39,  // 12: scalekit.v1.connections.Connection.oidc_config:type_name -> scalekit.v1.connections.OIDCConnectionConfig
	43,  // 13: scalekit.v1.connections.Connection.saml_config:type_name -> scalekit.v1.connections.SAMLConnectionConfigResponse
	40,  // 14: scalekit.v1.connections.Connection.oauth_config:type_name -> scalekit.v1.connections.OAuthConnectionConfig
	41,  // 15: scalekit.v1.connections.Connection.passwordless_config:type_name -> scalekit.v1.connections.PasswordLessConfig
	18,  // 16: scalekit.v1.connections.CreateConnectionResponse.connection:type_name -> scalekit.v1.connections.Connection
	22,  // 17: scalekit.v1.connections.UpdateEnvironmentConnectionRequest.connection:type_name -> scalekit.v1.connections.UpdateConnection
	22,  // 18: scalekit.v1.connections.UpdateConnectionRequest.connection:type_name -> scalekit.v1.connections.UpdateConnection
	11,  // 19: scalekit.v1.connections.UpdateConnection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	9,   // 20: scalekit.v1.connections.UpdateConnection.type:type_name -> scalekit.v1.connections.ConnectionType
	60,  // 21: scalekit.v1.connections.UpdateConnection.debug_enabled:type_name -> google.protobuf.BoolValue
	61,  // 22: scalekit.v1.connections.UpdateConnection.ui_button_title:type_name -> google.protobuf.StringValue
	1,   // 23: scalekit.v1.connections.UpdateConnection.configuration_type:type_name -> scalekit.v1.connections.ConfigurationType
	58,  // 24: scalekit.v1.connections.UpdateConnection.attribute_mapping:type_name -> scalekit.v1.connections.UpdateConnection.AttributeMappingEntry
	39,  // 25: scalekit.v1.connections.UpdateConnection.oidc_config:type_name -> scalekit.v1.connections.OIDCConnectionConfig
	42,  // 26: scalekit.v1.connections.UpdateConnection.saml_config:type_name -> scalekit.v1.connections.SAMLConnectionConfigRequest
	40,  // 27: scalekit.v1.connections.UpdateConnection.oauth_config:type_name -> scalekit.v1.connections.OAuthConnectionConfig
	41,  // 28: scalekit.v1.connections.UpdateConnection.passwordless_config:type_name -> scalekit.v1.connections.PasswordLessConfig
	18,  // 29: scalekit.v1.connections.UpdateConnectionResponse.connection:type_name -> scalekit.v1.connections.Connection
	18,  // 30: scalekit.v1.connections.GetConnectionResponse.connection:type_name -> scalekit.v1.connections.Connection
	31,  // 31: scalekit.v1.connections.ListConnectionsResponse.connections:type_name -> scalekit.v1.connections.ListConnection
	11,  // 32: scalekit.v1.connections.ListConnection.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	9,   // 33: scalekit.v1.connections.ListConnection.type:type_name -> scalekit.v1.connections.ConnectionType
	10,  // 34: scalekit.v1.connections.ListConnection.status:type_name -> scalekit.v1.connections.ConnectionStatus
	31,  // 35: scalekit.v1.connections.ListOrganizationConnectionsResponse.connections:type_name -> scalekit.v1.connections.ListConnection
	11,  // 36: scalekit.v1.connections.SearchOrganizationConnectionsRequest.provider:type_name -> scalekit.v1.connections.ConnectionProvider
	10,  // 37: scalekit.v1.connections.SearchOrganizationConnectionsRequest.status:type_name -> scalekit.v1.connections.ConnectionStatus
	9,   // 38: scalekit.v1.connections.SearchOrganizationConnectionsRequest.connection_type:type_name -> scalekit.v1.connections.ConnectionType
	31,  // 39: scalekit.v1.connections.SearchOrganizationConnectionsResponse.connections:type_name -> scalekit.v1.connections.ListConnection
	61,  // 40: scalekit.v1.connections.OIDCConnectionConfig.issuer:type_name -> google.protobuf.StringValue
	61,  // 41: scalekit.v1.connections.OIDCConnectionConfig.discovery_endpoint:type_name -> google.protobuf.StringValue
	61,  // 42: scalekit.v1.connections.OIDCConnectionConfig.authorize_uri:type_name -> google.protobuf.StringValue
	61,  // 43: scalekit.v1.connections.OIDCConnectionConfig.token_uri:type_name -> google.protobuf.StringValue
	61,  // 44: scalekit.v1.connections.OIDCConnectionConfig.user_info_uri:type_name -> google.protobuf.StringValue
	61,  // 45: scalekit.v1.connections.OIDCConnectionConfig.jwks_uri:type_name -> google.protobuf.StringValue
	61,  // 46: scalekit.v1.connections.OIDCConnectionConfig.client_id:type_name -> google.protobuf.StringValue
	61,  // 47: scalekit.v1.connections.OIDCConnectionConfig.client_secret:type_name -> google.protobuf.StringValue
	8,   // 48: scalekit.v1.connections.OIDCConnectionConfig.scopes:type_name -> scalekit.v1.connections.OIDCScope
	7,   // 49: scalekit.v1.connections.OIDCConnectionConfig.token_auth_type:type_name -> scalekit.v1.connections.TokenAuthType
	60,  // 50: scalekit.v1.connections.OIDCConnectionConfig.pkce_enabled:type_name -> google.protobuf.BoolValue
	60,  // 51: scalekit.v1.connections.OIDCConnectionConfig.idp_logout_required:type_name -> google.protobuf.BoolValue
	61,  // 52: scalekit.v1.connections.OIDCConnectionConfig.post_logout_redirect_uri:type_name -> google.protobuf.StringValue
	61,  // 53: scalekit.v1.connections.OIDCConnectionConfig.backchannel_logout_redirect_uri:type_name -> google.protobuf.StringValue
	61,  // 54: scalekit.v1.connections.OAuthConnectionConfig.authorize_uri:type_name -> google.protobuf.StringValue
	61,  // 55: scalekit.v1.connections.OAuthConnectionConfig.token_uri:type_name -> google.protobuf.StringValue
	61,  // 56: scalekit.v1.connections.OAuthConnectionConfig.user_info_uri:type_name -> google.protobuf.StringValue
	61,  // 57: scalekit.v1.connections.OAuthConnectionConfig.client_id:type_name -> google.protobuf.StringValue
	61,  // 58: scalekit.v1.connections.OAuthConnectionConfig.client_secret:type_name -> google.protobuf.StringValue
	60,  // 59: scalekit.v1.connections.OAuthConnectionConfig.pkce_enabled:type_name -> google.protobuf.BoolValue
	61,  // 60: scalekit.v1.connections.OAuthConnectionConfig.prompt:type_name -> google.protobuf.StringValue
	60,  // 61: scalekit.v1.connections.OAuthConnectionConfig.use_platform_creds:type_name -> google.protobuf.BoolValue
	3,   // 62: scalekit.v1.connections.PasswordLessConfig.type:type_name -> scalekit.v1.connections.PasswordlessType
	62,  // 63: scalekit.v1.connections.PasswordLessConfig.frequency:type_name -> google.protobuf.UInt32Value
	62,  // 64: scalekit.v1.connections.PasswordLessConfig.validity:type_name -> google.protobuf.UInt32Value
	60,  // 65: scalekit.v1.connections.PasswordLessConfig.enforce_same_browser_origin:type_name -> google.protobuf.BoolValue
	62,  // 66: scalekit.v1.connections.PasswordLessConfig.code_challenge_length:type_name -> google.protobuf.UInt32Value
	0,   // 67: scalekit.v1.connections.PasswordLessConfig.code_challenge_type:type_name -> scalekit.v1.connections.CodeChallengeType
	61,  // 68: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_metadata_url:type_name -> google.protobuf.StringValue
	61,  // 69: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_entity_id:type_name -> google.protobuf.StringValue
	61,  // 70: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_sso_url:type_name -> google.protobuf.StringValue
	61,  // 71: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_certificate:type_name -> google.protobuf.StringValue
	61,  // 72: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_slo_url:type_name -> google.protobuf.StringValue
	61,  // 73: scalekit.v1.connections.SAMLConnectionConfigRequest.ui_button_title:type_name -> google.protobuf.StringValue
	2,   // 74: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_name_id_format:type_name -> scalekit.v1.connections.NameIdFormat
	6,   // 75: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_sso_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	6,   // 76: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_slo_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	5,   // 77: scalekit.v1.connections.SAMLConnectionConfigRequest.saml_signing_option:type_name -> scalekit.v1.connections.SAMLSigningOptions
	60,  // 78: scalekit.v1.connections.SAMLConnectionConfigRequest.force_authn:type_name -> google.protobuf.BoolValue
	61,  // 79: scalekit.v1.connections.SAMLConnectionConfigRequest.default_redirect_uri:type_name -> google.protobuf.StringValue
	60,  // 80: scalekit.v1.connections.SAMLConnectionConfigRequest.assertion_encrypted:type_name -> google.protobuf.BoolValue
	60,  // 81: scalekit.v1.connections.SAMLConnectionConfigRequest.want_request_signed:type_name -> google.protobuf.BoolValue
	61,  // 82: scalekit.v1.connections.SAMLConnectionConfigRequest.certificate_id:type_name -> google.protobuf.StringValue
	60,  // 83: scalekit.v1.connections.SAMLConnectionConfigRequest.idp_slo_required:type_name -> google.protobuf.BoolValue
	61,  // 84: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_metadata_url:type_name -> google.protobuf.StringValue
	61,  // 85: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_entity_id:type_name -> google.protobuf.StringValue
	61,  // 86: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_sso_url:type_name -> google.protobuf.StringValue
	44,  // 87: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_certificates:type_name -> scalekit.v1.connections.IDPCertificate
	61,  // 88: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_slo_url:type_name -> google.protobuf.StringValue
	61,  // 89: scalekit.v1.connections.SAMLConnectionConfigResponse.ui_button_title:type_name -> google.protobuf.StringValue
	2,   // 90: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_name_id_format:type_name -> scalekit.v1.connections.NameIdFormat
	6,   // 91: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_sso_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	6,   // 92: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_slo_request_binding:type_name -> scalekit.v1.connections.RequestBinding
	5,   // 93: scalekit.v1.connections.SAMLConnectionConfigResponse.saml_signing_option:type_name -> scalekit.v1.connections.SAMLSigningOptions
	60,  // 94: scalekit.v1.connections.SAMLConnectionConfigResponse.allow_idp_initiated_login:type_name -> google.protobuf.BoolValue
	60,  // 95: scalekit.v1.connections.SAMLConnectionConfigResponse.force_authn:type_name -> google.protobuf.BoolValue
	61,  // 96: scalekit.v1.connections.SAMLConnectionConfigResponse.default_redirect_uri:type_name -> google.protobuf.StringValue
	60,  // 97: scalekit.v1.connections.SAMLConnectionConfigResponse.assertion_encrypted:type_name -> google.protobuf.BoolValue
	60,  // 98: scalekit.v1.connections.SAMLConnectionConfigResponse.want_request_signed:type_name -> google.protobuf.BoolValue
	61,  // 99: scalekit.v1.connections.SAMLConnectionConfigResponse.certificate_id:type_name -> google.protobuf.StringValue
	60,  // 100: scalekit.v1.connections.SAMLConnectionConfigResponse.idp_slo_required:type_name -> google.protobuf.BoolValue
	61,  // 101: scalekit.v1.connections.SAMLConnectionConfigResponse.sp_slo_url:type_name -> google.protobuf.StringValue
	59,  // 102: scalekit.v1.connections.IDPCertificate.create_time:type_name -> google.protobuf.Timestamp
	59,  // 103: scalekit.v1.connections.IDPCertificate.expiry_time:type_name -> google.protobuf.Timestamp
	46,  // 104: scalekit.v1.connections.GetOIDCMetadataRequest.metadata:type_name -> scalekit.v1.connections.OIDCMetadataRequest
	49,  // 105: scalekit.v1.connections.GetSAMLMetadataRequest.metadata:type_name -> scalekit.v1.connections.SAMLMetadataRequest
	52,  // 106: scalekit.v1.connections.GetSAMLCertificateDetailsRequest.certificate:type_name -> scalekit.v1.connections.SAMLCertificateRequest
	4,   // 107: scalekit.v1.connections.GetConnectionTestResultResponse.status:type_name -> scalekit.v1.connections.TestResultStatus
	12,  // 108: scalekit.v1.connections.ConnectionService.GetProviders:input_type -> scalekit.v1.connections.GetProvidersRequest
	15,  // 109: scalekit.v1.connections.ConnectionService.CreateEnvironmentConnection:input_type -> scalekit.v1.connections.CreateEnvironmentConnectionRequest
	16,  // 110: scalekit.v1.connections.ConnectionService.CreateConnection:input_type -> scalekit.v1.connections.CreateConnectionRequest
	26,  // 111: scalekit.v1.connections.ConnectionService.GetEnvironmentConnection:input_type -> scalekit.v1.connections.GetEnvironmentConnectionRequest
	27,  // 112: scalekit.v1.connections.ConnectionService.GetConnection:input_type -> scalekit.v1.connections.GetConnectionRequest
	29,  // 113: scalekit.v1.connections.ConnectionService.ListConnections:input_type -> scalekit.v1.connections.ListConnectionsRequest
	32,  // 114: scalekit.v1.connections.ConnectionService.ListOrganizationConnections:input_type -> scalekit.v1.connections.ListOrganizationConnectionsRequest
	34,  // 115: scalekit.v1.connections.ConnectionService.SearchOrganizationConnections:input_type -> scalekit.v1.connections.SearchOrganizationConnectionsRequest
	20,  // 116: scalekit.v1.connections.ConnectionService.UpdateEnvironmentConnection:input_type -> scalekit.v1.connections.UpdateEnvironmentConnectionRequest
	21,  // 117: scalekit.v1.connections.ConnectionService.UpdateConnection:input_type -> scalekit.v1.connections.UpdateConnectionRequest
	24,  // 118: scalekit.v1.connections.ConnectionService.DeleteEnvironmentConnection:input_type -> scalekit.v1.connections.DeleteEnvironmentConnectionRequest
	25,  // 119: scalekit.v1.connections.ConnectionService.DeleteConnection:input_type -> scalekit.v1.connections.DeleteConnectionRequest
	36,  // 120: scalekit.v1.connections.ConnectionService.EnableEnvironmentConnection:input_type -> scalekit.v1.connections.ToggleEnvironmentConnectionRequest
	37,  // 121: scalekit.v1.connections.ConnectionService.EnableConnection:input_type -> scalekit.v1.connections.ToggleConnectionRequest
	36,  // 122: scalekit.v1.connections.ConnectionService.DisableEnvironmentConnection:input_type -> scalekit.v1.connections.ToggleEnvironmentConnectionRequest
	37,  // 123: scalekit.v1.connections.ConnectionService.DisableConnection:input_type -> scalekit.v1.connections.ToggleConnectionRequest
	54,  // 124: scalekit.v1.connections.ConnectionService.GetConnectionTestResult:input_type -> scalekit.v1.connections.GetConnectionTestResultRequest
	13,  // 125: scalekit.v1.connections.ConnectionService.GetProviders:output_type -> scalekit.v1.connections.GetProvidersResponse
	19,  // 126: scalekit.v1.connections.ConnectionService.CreateEnvironmentConnection:output_type -> scalekit.v1.connections.CreateConnectionResponse
	19,  // 127: scalekit.v1.connections.ConnectionService.CreateConnection:output_type -> scalekit.v1.connections.CreateConnectionResponse
	28,  // 128: scalekit.v1.connections.ConnectionService.GetEnvironmentConnection:output_type -> scalekit.v1.connections.GetConnectionResponse
	28,  // 129: scalekit.v1.connections.ConnectionService.GetConnection:output_type -> scalekit.v1.connections.GetConnectionResponse
	30,  // 130: scalekit.v1.connections.ConnectionService.ListConnections:output_type -> scalekit.v1.connections.ListConnectionsResponse
	33,  // 131: scalekit.v1.connections.ConnectionService.ListOrganizationConnections:output_type -> scalekit.v1.connections.ListOrganizationConnectionsResponse
	35,  // 132: scalekit.v1.connections.ConnectionService.SearchOrganizationConnections:output_type -> scalekit.v1.connections.SearchOrganizationConnectionsResponse
	23,  // 133: scalekit.v1.connections.ConnectionService.UpdateEnvironmentConnection:output_type -> scalekit.v1.connections.UpdateConnectionResponse
	23,  // 134: scalekit.v1.connections.ConnectionService.UpdateConnection:output_type -> scalekit.v1.connections.UpdateConnectionResponse
	63,  // 135: scalekit.v1.connections.ConnectionService.DeleteEnvironmentConnection:output_type -> google.protobuf.Empty
	63,  // 136: scalekit.v1.connections.ConnectionService.DeleteConnection:output_type -> google.protobuf.Empty
	38,  // 137: scalekit.v1.connections.ConnectionService.EnableEnvironmentConnection:output_type -> scalekit.v1.connections.ToggleConnectionResponse
	38,  // 138: scalekit.v1.connections.ConnectionService.EnableConnection:output_type -> scalekit.v1.connections.ToggleConnectionResponse
	38,  // 139: scalekit.v1.connections.ConnectionService.DisableEnvironmentConnection:output_type -> scalekit.v1.connections.ToggleConnectionResponse
	38,  // 140: scalekit.v1.connections.ConnectionService.DisableConnection:output_type -> scalekit.v1.connections.ToggleConnectionResponse
	55,  // 141: scalekit.v1.connections.ConnectionService.GetConnectionTestResult:output_type -> scalekit.v1.connections.GetConnectionTestResultResponse
	125, // [125:142] is the sub-list for method output_type
	108, // [108:125] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_scalekit_v1_connections_connections_proto_init() }
func file_scalekit_v1_connections_connections_proto_init() {
	if File_scalekit_v1_connections_connections_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scalekit_v1_connections_connections_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnvironmentConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnvironmentConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnvironmentConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnvironmentConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOrganizationConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOrganizationConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleEnvironmentConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordLessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLConnectionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLConnectionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOIDCMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOIDCMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLCertificateDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSAMLCertificateDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionTestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionTestResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_connections_connections_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_scalekit_v1_connections_connections_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Connection_OidcConfig)(nil),
		(*Connection_SamlConfig)(nil),
		(*Connection_OauthConfig)(nil),
		(*Connection_PasswordlessConfig)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UpdateConnection_OidcConfig)(nil),
		(*UpdateConnection_SamlConfig)(nil),
		(*UpdateConnection_OauthConfig)(nil),
		(*UpdateConnection_PasswordlessConfig)(nil),
	}
	file_scalekit_v1_connections_connections_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_scalekit_v1_connections_connections_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_scalekit_v1_connections_connections_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_scalekit_v1_connections_connections_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_scalekit_v1_connections_connections_proto_msgTypes[43].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scalekit_v1_connections_connections_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scalekit_v1_connections_connections_proto_goTypes,
		DependencyIndexes: file_scalekit_v1_connections_connections_proto_depIdxs,
		EnumInfos:         file_scalekit_v1_connections_connections_proto_enumTypes,
		MessageInfos:      file_scalekit_v1_connections_connections_proto_msgTypes,
	}.Build()
	File_scalekit_v1_connections_connections_proto = out.File
	file_scalekit_v1_connections_connections_proto_rawDesc = nil
	file_scalekit_v1_connections_connections_proto_goTypes = nil
	file_scalekit_v1_connections_connections_proto_depIdxs = nil
}
