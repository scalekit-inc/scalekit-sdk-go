// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/connections/connections.proto

package connectionsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	connections "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/connections"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConnectionServiceName is the fully-qualified name of the ConnectionService service.
	ConnectionServiceName = "scalekit.v1.connections.ConnectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectionServiceGetProvidersProcedure is the fully-qualified name of the ConnectionService's
	// GetProviders RPC.
	ConnectionServiceGetProvidersProcedure = "/scalekit.v1.connections.ConnectionService/GetProviders"
	// ConnectionServiceCreateEnvironmentConnectionProcedure is the fully-qualified name of the
	// ConnectionService's CreateEnvironmentConnection RPC.
	ConnectionServiceCreateEnvironmentConnectionProcedure = "/scalekit.v1.connections.ConnectionService/CreateEnvironmentConnection"
	// ConnectionServiceCreateConnectionProcedure is the fully-qualified name of the ConnectionService's
	// CreateConnection RPC.
	ConnectionServiceCreateConnectionProcedure = "/scalekit.v1.connections.ConnectionService/CreateConnection"
	// ConnectionServiceGetEnvironmentConnectionProcedure is the fully-qualified name of the
	// ConnectionService's GetEnvironmentConnection RPC.
	ConnectionServiceGetEnvironmentConnectionProcedure = "/scalekit.v1.connections.ConnectionService/GetEnvironmentConnection"
	// ConnectionServiceGetConnectionProcedure is the fully-qualified name of the ConnectionService's
	// GetConnection RPC.
	ConnectionServiceGetConnectionProcedure = "/scalekit.v1.connections.ConnectionService/GetConnection"
	// ConnectionServiceListConnectionsProcedure is the fully-qualified name of the ConnectionService's
	// ListConnections RPC.
	ConnectionServiceListConnectionsProcedure = "/scalekit.v1.connections.ConnectionService/ListConnections"
	// ConnectionServiceUpdateEnvironmentConnectionProcedure is the fully-qualified name of the
	// ConnectionService's UpdateEnvironmentConnection RPC.
	ConnectionServiceUpdateEnvironmentConnectionProcedure = "/scalekit.v1.connections.ConnectionService/UpdateEnvironmentConnection"
	// ConnectionServiceUpdateConnectionProcedure is the fully-qualified name of the ConnectionService's
	// UpdateConnection RPC.
	ConnectionServiceUpdateConnectionProcedure = "/scalekit.v1.connections.ConnectionService/UpdateConnection"
	// ConnectionServiceDeleteEnvironmentConnectionProcedure is the fully-qualified name of the
	// ConnectionService's DeleteEnvironmentConnection RPC.
	ConnectionServiceDeleteEnvironmentConnectionProcedure = "/scalekit.v1.connections.ConnectionService/DeleteEnvironmentConnection"
	// ConnectionServiceDeleteConnectionProcedure is the fully-qualified name of the ConnectionService's
	// DeleteConnection RPC.
	ConnectionServiceDeleteConnectionProcedure = "/scalekit.v1.connections.ConnectionService/DeleteConnection"
	// ConnectionServiceEnableEnvironmentConnectionProcedure is the fully-qualified name of the
	// ConnectionService's EnableEnvironmentConnection RPC.
	ConnectionServiceEnableEnvironmentConnectionProcedure = "/scalekit.v1.connections.ConnectionService/EnableEnvironmentConnection"
	// ConnectionServiceEnableConnectionProcedure is the fully-qualified name of the ConnectionService's
	// EnableConnection RPC.
	ConnectionServiceEnableConnectionProcedure = "/scalekit.v1.connections.ConnectionService/EnableConnection"
	// ConnectionServiceDisableEnvironmentConnectionProcedure is the fully-qualified name of the
	// ConnectionService's DisableEnvironmentConnection RPC.
	ConnectionServiceDisableEnvironmentConnectionProcedure = "/scalekit.v1.connections.ConnectionService/DisableEnvironmentConnection"
	// ConnectionServiceDisableConnectionProcedure is the fully-qualified name of the
	// ConnectionService's DisableConnection RPC.
	ConnectionServiceDisableConnectionProcedure = "/scalekit.v1.connections.ConnectionService/DisableConnection"
	// ConnectionServiceGetConnectionTestResultProcedure is the fully-qualified name of the
	// ConnectionService's GetConnectionTestResult RPC.
	ConnectionServiceGetConnectionTestResultProcedure = "/scalekit.v1.connections.ConnectionService/GetConnectionTestResult"
)

// ConnectionServiceClient is a client for the scalekit.v1.connections.ConnectionService service.
type ConnectionServiceClient interface {
	GetProviders(context.Context, *connect.Request[connections.GetProvidersRequest]) (*connect.Response[connections.GetProvidersResponse], error)
	CreateEnvironmentConnection(context.Context, *connect.Request[connections.CreateEnvironmentConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error)
	CreateConnection(context.Context, *connect.Request[connections.CreateConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error)
	GetEnvironmentConnection(context.Context, *connect.Request[connections.GetEnvironmentConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error)
	GetConnection(context.Context, *connect.Request[connections.GetConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error)
	ListConnections(context.Context, *connect.Request[connections.ListConnectionsRequest]) (*connect.Response[connections.ListConnectionsResponse], error)
	UpdateEnvironmentConnection(context.Context, *connect.Request[connections.UpdateEnvironmentConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error)
	UpdateConnection(context.Context, *connect.Request[connections.UpdateConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error)
	DeleteEnvironmentConnection(context.Context, *connect.Request[connections.DeleteEnvironmentConnectionRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteConnection(context.Context, *connect.Request[connections.DeleteConnectionRequest]) (*connect.Response[emptypb.Empty], error)
	EnableEnvironmentConnection(context.Context, *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	EnableConnection(context.Context, *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	DisableEnvironmentConnection(context.Context, *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	DisableConnection(context.Context, *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	GetConnectionTestResult(context.Context, *connect.Request[connections.GetConnectionTestResultRequest]) (*connect.Response[connections.GetConnectionTestResultResponse], error)
}

// NewConnectionServiceClient constructs a client for the scalekit.v1.connections.ConnectionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	connectionServiceMethods := connections.File_scalekit_v1_connections_connections_proto.Services().ByName("ConnectionService").Methods()
	return &connectionServiceClient{
		getProviders: connect.NewClient[connections.GetProvidersRequest, connections.GetProvidersResponse](
			httpClient,
			baseURL+ConnectionServiceGetProvidersProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("GetProviders")),
			connect.WithClientOptions(opts...),
		),
		createEnvironmentConnection: connect.NewClient[connections.CreateEnvironmentConnectionRequest, connections.CreateConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceCreateEnvironmentConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("CreateEnvironmentConnection")),
			connect.WithClientOptions(opts...),
		),
		createConnection: connect.NewClient[connections.CreateConnectionRequest, connections.CreateConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceCreateConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("CreateConnection")),
			connect.WithClientOptions(opts...),
		),
		getEnvironmentConnection: connect.NewClient[connections.GetEnvironmentConnectionRequest, connections.GetConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceGetEnvironmentConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("GetEnvironmentConnection")),
			connect.WithClientOptions(opts...),
		),
		getConnection: connect.NewClient[connections.GetConnectionRequest, connections.GetConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceGetConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("GetConnection")),
			connect.WithClientOptions(opts...),
		),
		listConnections: connect.NewClient[connections.ListConnectionsRequest, connections.ListConnectionsResponse](
			httpClient,
			baseURL+ConnectionServiceListConnectionsProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("ListConnections")),
			connect.WithClientOptions(opts...),
		),
		updateEnvironmentConnection: connect.NewClient[connections.UpdateEnvironmentConnectionRequest, connections.UpdateConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceUpdateEnvironmentConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("UpdateEnvironmentConnection")),
			connect.WithClientOptions(opts...),
		),
		updateConnection: connect.NewClient[connections.UpdateConnectionRequest, connections.UpdateConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceUpdateConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("UpdateConnection")),
			connect.WithClientOptions(opts...),
		),
		deleteEnvironmentConnection: connect.NewClient[connections.DeleteEnvironmentConnectionRequest, emptypb.Empty](
			httpClient,
			baseURL+ConnectionServiceDeleteEnvironmentConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("DeleteEnvironmentConnection")),
			connect.WithClientOptions(opts...),
		),
		deleteConnection: connect.NewClient[connections.DeleteConnectionRequest, emptypb.Empty](
			httpClient,
			baseURL+ConnectionServiceDeleteConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("DeleteConnection")),
			connect.WithClientOptions(opts...),
		),
		enableEnvironmentConnection: connect.NewClient[connections.ToggleEnvironmentConnectionRequest, connections.ToggleConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceEnableEnvironmentConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("EnableEnvironmentConnection")),
			connect.WithClientOptions(opts...),
		),
		enableConnection: connect.NewClient[connections.ToggleConnectionRequest, connections.ToggleConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceEnableConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("EnableConnection")),
			connect.WithClientOptions(opts...),
		),
		disableEnvironmentConnection: connect.NewClient[connections.ToggleEnvironmentConnectionRequest, connections.ToggleConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceDisableEnvironmentConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("DisableEnvironmentConnection")),
			connect.WithClientOptions(opts...),
		),
		disableConnection: connect.NewClient[connections.ToggleConnectionRequest, connections.ToggleConnectionResponse](
			httpClient,
			baseURL+ConnectionServiceDisableConnectionProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("DisableConnection")),
			connect.WithClientOptions(opts...),
		),
		getConnectionTestResult: connect.NewClient[connections.GetConnectionTestResultRequest, connections.GetConnectionTestResultResponse](
			httpClient,
			baseURL+ConnectionServiceGetConnectionTestResultProcedure,
			connect.WithSchema(connectionServiceMethods.ByName("GetConnectionTestResult")),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectionServiceClient implements ConnectionServiceClient.
type connectionServiceClient struct {
	getProviders                 *connect.Client[connections.GetProvidersRequest, connections.GetProvidersResponse]
	createEnvironmentConnection  *connect.Client[connections.CreateEnvironmentConnectionRequest, connections.CreateConnectionResponse]
	createConnection             *connect.Client[connections.CreateConnectionRequest, connections.CreateConnectionResponse]
	getEnvironmentConnection     *connect.Client[connections.GetEnvironmentConnectionRequest, connections.GetConnectionResponse]
	getConnection                *connect.Client[connections.GetConnectionRequest, connections.GetConnectionResponse]
	listConnections              *connect.Client[connections.ListConnectionsRequest, connections.ListConnectionsResponse]
	updateEnvironmentConnection  *connect.Client[connections.UpdateEnvironmentConnectionRequest, connections.UpdateConnectionResponse]
	updateConnection             *connect.Client[connections.UpdateConnectionRequest, connections.UpdateConnectionResponse]
	deleteEnvironmentConnection  *connect.Client[connections.DeleteEnvironmentConnectionRequest, emptypb.Empty]
	deleteConnection             *connect.Client[connections.DeleteConnectionRequest, emptypb.Empty]
	enableEnvironmentConnection  *connect.Client[connections.ToggleEnvironmentConnectionRequest, connections.ToggleConnectionResponse]
	enableConnection             *connect.Client[connections.ToggleConnectionRequest, connections.ToggleConnectionResponse]
	disableEnvironmentConnection *connect.Client[connections.ToggleEnvironmentConnectionRequest, connections.ToggleConnectionResponse]
	disableConnection            *connect.Client[connections.ToggleConnectionRequest, connections.ToggleConnectionResponse]
	getConnectionTestResult      *connect.Client[connections.GetConnectionTestResultRequest, connections.GetConnectionTestResultResponse]
}

// GetProviders calls scalekit.v1.connections.ConnectionService.GetProviders.
func (c *connectionServiceClient) GetProviders(ctx context.Context, req *connect.Request[connections.GetProvidersRequest]) (*connect.Response[connections.GetProvidersResponse], error) {
	return c.getProviders.CallUnary(ctx, req)
}

// CreateEnvironmentConnection calls
// scalekit.v1.connections.ConnectionService.CreateEnvironmentConnection.
func (c *connectionServiceClient) CreateEnvironmentConnection(ctx context.Context, req *connect.Request[connections.CreateEnvironmentConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error) {
	return c.createEnvironmentConnection.CallUnary(ctx, req)
}

// CreateConnection calls scalekit.v1.connections.ConnectionService.CreateConnection.
func (c *connectionServiceClient) CreateConnection(ctx context.Context, req *connect.Request[connections.CreateConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error) {
	return c.createConnection.CallUnary(ctx, req)
}

// GetEnvironmentConnection calls
// scalekit.v1.connections.ConnectionService.GetEnvironmentConnection.
func (c *connectionServiceClient) GetEnvironmentConnection(ctx context.Context, req *connect.Request[connections.GetEnvironmentConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error) {
	return c.getEnvironmentConnection.CallUnary(ctx, req)
}

// GetConnection calls scalekit.v1.connections.ConnectionService.GetConnection.
func (c *connectionServiceClient) GetConnection(ctx context.Context, req *connect.Request[connections.GetConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error) {
	return c.getConnection.CallUnary(ctx, req)
}

// ListConnections calls scalekit.v1.connections.ConnectionService.ListConnections.
func (c *connectionServiceClient) ListConnections(ctx context.Context, req *connect.Request[connections.ListConnectionsRequest]) (*connect.Response[connections.ListConnectionsResponse], error) {
	return c.listConnections.CallUnary(ctx, req)
}

// UpdateEnvironmentConnection calls
// scalekit.v1.connections.ConnectionService.UpdateEnvironmentConnection.
func (c *connectionServiceClient) UpdateEnvironmentConnection(ctx context.Context, req *connect.Request[connections.UpdateEnvironmentConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error) {
	return c.updateEnvironmentConnection.CallUnary(ctx, req)
}

// UpdateConnection calls scalekit.v1.connections.ConnectionService.UpdateConnection.
func (c *connectionServiceClient) UpdateConnection(ctx context.Context, req *connect.Request[connections.UpdateConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error) {
	return c.updateConnection.CallUnary(ctx, req)
}

// DeleteEnvironmentConnection calls
// scalekit.v1.connections.ConnectionService.DeleteEnvironmentConnection.
func (c *connectionServiceClient) DeleteEnvironmentConnection(ctx context.Context, req *connect.Request[connections.DeleteEnvironmentConnectionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteEnvironmentConnection.CallUnary(ctx, req)
}

// DeleteConnection calls scalekit.v1.connections.ConnectionService.DeleteConnection.
func (c *connectionServiceClient) DeleteConnection(ctx context.Context, req *connect.Request[connections.DeleteConnectionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteConnection.CallUnary(ctx, req)
}

// EnableEnvironmentConnection calls
// scalekit.v1.connections.ConnectionService.EnableEnvironmentConnection.
func (c *connectionServiceClient) EnableEnvironmentConnection(ctx context.Context, req *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return c.enableEnvironmentConnection.CallUnary(ctx, req)
}

// EnableConnection calls scalekit.v1.connections.ConnectionService.EnableConnection.
func (c *connectionServiceClient) EnableConnection(ctx context.Context, req *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return c.enableConnection.CallUnary(ctx, req)
}

// DisableEnvironmentConnection calls
// scalekit.v1.connections.ConnectionService.DisableEnvironmentConnection.
func (c *connectionServiceClient) DisableEnvironmentConnection(ctx context.Context, req *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return c.disableEnvironmentConnection.CallUnary(ctx, req)
}

// DisableConnection calls scalekit.v1.connections.ConnectionService.DisableConnection.
func (c *connectionServiceClient) DisableConnection(ctx context.Context, req *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return c.disableConnection.CallUnary(ctx, req)
}

// GetConnectionTestResult calls scalekit.v1.connections.ConnectionService.GetConnectionTestResult.
func (c *connectionServiceClient) GetConnectionTestResult(ctx context.Context, req *connect.Request[connections.GetConnectionTestResultRequest]) (*connect.Response[connections.GetConnectionTestResultResponse], error) {
	return c.getConnectionTestResult.CallUnary(ctx, req)
}

// ConnectionServiceHandler is an implementation of the scalekit.v1.connections.ConnectionService
// service.
type ConnectionServiceHandler interface {
	GetProviders(context.Context, *connect.Request[connections.GetProvidersRequest]) (*connect.Response[connections.GetProvidersResponse], error)
	CreateEnvironmentConnection(context.Context, *connect.Request[connections.CreateEnvironmentConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error)
	CreateConnection(context.Context, *connect.Request[connections.CreateConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error)
	GetEnvironmentConnection(context.Context, *connect.Request[connections.GetEnvironmentConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error)
	GetConnection(context.Context, *connect.Request[connections.GetConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error)
	ListConnections(context.Context, *connect.Request[connections.ListConnectionsRequest]) (*connect.Response[connections.ListConnectionsResponse], error)
	UpdateEnvironmentConnection(context.Context, *connect.Request[connections.UpdateEnvironmentConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error)
	UpdateConnection(context.Context, *connect.Request[connections.UpdateConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error)
	DeleteEnvironmentConnection(context.Context, *connect.Request[connections.DeleteEnvironmentConnectionRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteConnection(context.Context, *connect.Request[connections.DeleteConnectionRequest]) (*connect.Response[emptypb.Empty], error)
	EnableEnvironmentConnection(context.Context, *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	EnableConnection(context.Context, *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	DisableEnvironmentConnection(context.Context, *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	DisableConnection(context.Context, *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error)
	GetConnectionTestResult(context.Context, *connect.Request[connections.GetConnectionTestResultRequest]) (*connect.Response[connections.GetConnectionTestResultResponse], error)
}

// NewConnectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectionServiceHandler(svc ConnectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectionServiceMethods := connections.File_scalekit_v1_connections_connections_proto.Services().ByName("ConnectionService").Methods()
	connectionServiceGetProvidersHandler := connect.NewUnaryHandler(
		ConnectionServiceGetProvidersProcedure,
		svc.GetProviders,
		connect.WithSchema(connectionServiceMethods.ByName("GetProviders")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceCreateEnvironmentConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceCreateEnvironmentConnectionProcedure,
		svc.CreateEnvironmentConnection,
		connect.WithSchema(connectionServiceMethods.ByName("CreateEnvironmentConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceCreateConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceCreateConnectionProcedure,
		svc.CreateConnection,
		connect.WithSchema(connectionServiceMethods.ByName("CreateConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceGetEnvironmentConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceGetEnvironmentConnectionProcedure,
		svc.GetEnvironmentConnection,
		connect.WithSchema(connectionServiceMethods.ByName("GetEnvironmentConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceGetConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceGetConnectionProcedure,
		svc.GetConnection,
		connect.WithSchema(connectionServiceMethods.ByName("GetConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceListConnectionsHandler := connect.NewUnaryHandler(
		ConnectionServiceListConnectionsProcedure,
		svc.ListConnections,
		connect.WithSchema(connectionServiceMethods.ByName("ListConnections")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceUpdateEnvironmentConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceUpdateEnvironmentConnectionProcedure,
		svc.UpdateEnvironmentConnection,
		connect.WithSchema(connectionServiceMethods.ByName("UpdateEnvironmentConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceUpdateConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceUpdateConnectionProcedure,
		svc.UpdateConnection,
		connect.WithSchema(connectionServiceMethods.ByName("UpdateConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceDeleteEnvironmentConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceDeleteEnvironmentConnectionProcedure,
		svc.DeleteEnvironmentConnection,
		connect.WithSchema(connectionServiceMethods.ByName("DeleteEnvironmentConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceDeleteConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceDeleteConnectionProcedure,
		svc.DeleteConnection,
		connect.WithSchema(connectionServiceMethods.ByName("DeleteConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceEnableEnvironmentConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceEnableEnvironmentConnectionProcedure,
		svc.EnableEnvironmentConnection,
		connect.WithSchema(connectionServiceMethods.ByName("EnableEnvironmentConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceEnableConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceEnableConnectionProcedure,
		svc.EnableConnection,
		connect.WithSchema(connectionServiceMethods.ByName("EnableConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceDisableEnvironmentConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceDisableEnvironmentConnectionProcedure,
		svc.DisableEnvironmentConnection,
		connect.WithSchema(connectionServiceMethods.ByName("DisableEnvironmentConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceDisableConnectionHandler := connect.NewUnaryHandler(
		ConnectionServiceDisableConnectionProcedure,
		svc.DisableConnection,
		connect.WithSchema(connectionServiceMethods.ByName("DisableConnection")),
		connect.WithHandlerOptions(opts...),
	)
	connectionServiceGetConnectionTestResultHandler := connect.NewUnaryHandler(
		ConnectionServiceGetConnectionTestResultProcedure,
		svc.GetConnectionTestResult,
		connect.WithSchema(connectionServiceMethods.ByName("GetConnectionTestResult")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.connections.ConnectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectionServiceGetProvidersProcedure:
			connectionServiceGetProvidersHandler.ServeHTTP(w, r)
		case ConnectionServiceCreateEnvironmentConnectionProcedure:
			connectionServiceCreateEnvironmentConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceCreateConnectionProcedure:
			connectionServiceCreateConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceGetEnvironmentConnectionProcedure:
			connectionServiceGetEnvironmentConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceGetConnectionProcedure:
			connectionServiceGetConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceListConnectionsProcedure:
			connectionServiceListConnectionsHandler.ServeHTTP(w, r)
		case ConnectionServiceUpdateEnvironmentConnectionProcedure:
			connectionServiceUpdateEnvironmentConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceUpdateConnectionProcedure:
			connectionServiceUpdateConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceDeleteEnvironmentConnectionProcedure:
			connectionServiceDeleteEnvironmentConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceDeleteConnectionProcedure:
			connectionServiceDeleteConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceEnableEnvironmentConnectionProcedure:
			connectionServiceEnableEnvironmentConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceEnableConnectionProcedure:
			connectionServiceEnableConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceDisableEnvironmentConnectionProcedure:
			connectionServiceDisableEnvironmentConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceDisableConnectionProcedure:
			connectionServiceDisableConnectionHandler.ServeHTTP(w, r)
		case ConnectionServiceGetConnectionTestResultProcedure:
			connectionServiceGetConnectionTestResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectionServiceHandler struct{}

func (UnimplementedConnectionServiceHandler) GetProviders(context.Context, *connect.Request[connections.GetProvidersRequest]) (*connect.Response[connections.GetProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.GetProviders is not implemented"))
}

func (UnimplementedConnectionServiceHandler) CreateEnvironmentConnection(context.Context, *connect.Request[connections.CreateEnvironmentConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.CreateEnvironmentConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) CreateConnection(context.Context, *connect.Request[connections.CreateConnectionRequest]) (*connect.Response[connections.CreateConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.CreateConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) GetEnvironmentConnection(context.Context, *connect.Request[connections.GetEnvironmentConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.GetEnvironmentConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) GetConnection(context.Context, *connect.Request[connections.GetConnectionRequest]) (*connect.Response[connections.GetConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.GetConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) ListConnections(context.Context, *connect.Request[connections.ListConnectionsRequest]) (*connect.Response[connections.ListConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.ListConnections is not implemented"))
}

func (UnimplementedConnectionServiceHandler) UpdateEnvironmentConnection(context.Context, *connect.Request[connections.UpdateEnvironmentConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.UpdateEnvironmentConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) UpdateConnection(context.Context, *connect.Request[connections.UpdateConnectionRequest]) (*connect.Response[connections.UpdateConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.UpdateConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) DeleteEnvironmentConnection(context.Context, *connect.Request[connections.DeleteEnvironmentConnectionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.DeleteEnvironmentConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) DeleteConnection(context.Context, *connect.Request[connections.DeleteConnectionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.DeleteConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) EnableEnvironmentConnection(context.Context, *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.EnableEnvironmentConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) EnableConnection(context.Context, *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.EnableConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) DisableEnvironmentConnection(context.Context, *connect.Request[connections.ToggleEnvironmentConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.DisableEnvironmentConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) DisableConnection(context.Context, *connect.Request[connections.ToggleConnectionRequest]) (*connect.Response[connections.ToggleConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.DisableConnection is not implemented"))
}

func (UnimplementedConnectionServiceHandler) GetConnectionTestResult(context.Context, *connect.Request[connections.GetConnectionTestResultRequest]) (*connect.Response[connections.GetConnectionTestResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connections.ConnectionService.GetConnectionTestResult is not implemented"))
}
