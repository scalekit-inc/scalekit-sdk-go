// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/organizations/organizations.proto

package organizationsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	organizations "github.com/scalekit-inc/scalekit-sdk-go/pkg/grpc/scalekit/v1/organizations"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "scalekit.v1.organizations.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganization RPC.
	OrganizationServiceCreateOrganizationProcedure = "/scalekit.v1.organizations.OrganizationService/CreateOrganization"
	// OrganizationServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganization RPC.
	OrganizationServiceUpdateOrganizationProcedure = "/scalekit.v1.organizations.OrganizationService/UpdateOrganization"
	// OrganizationServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganization RPC.
	OrganizationServiceGetOrganizationProcedure = "/scalekit.v1.organizations.OrganizationService/GetOrganization"
	// OrganizationServiceListOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganization RPC.
	OrganizationServiceListOrganizationProcedure = "/scalekit.v1.organizations.OrganizationService/ListOrganization"
	// OrganizationServiceSearchOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's SearchOrganization RPC.
	OrganizationServiceSearchOrganizationProcedure = "/scalekit.v1.organizations.OrganizationService/SearchOrganization"
	// OrganizationServiceDeleteOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's DeleteOrganization RPC.
	OrganizationServiceDeleteOrganizationProcedure = "/scalekit.v1.organizations.OrganizationService/DeleteOrganization"
	// OrganizationServiceGeneratePortalLinkProcedure is the fully-qualified name of the
	// OrganizationService's GeneratePortalLink RPC.
	OrganizationServiceGeneratePortalLinkProcedure = "/scalekit.v1.organizations.OrganizationService/GeneratePortalLink"
	// OrganizationServiceDeletePortalLinkProcedure is the fully-qualified name of the
	// OrganizationService's DeletePortalLink RPC.
	OrganizationServiceDeletePortalLinkProcedure = "/scalekit.v1.organizations.OrganizationService/DeletePortalLink"
	// OrganizationServiceDeletePortalLinkByIDProcedure is the fully-qualified name of the
	// OrganizationService's DeletePortalLinkByID RPC.
	OrganizationServiceDeletePortalLinkByIDProcedure = "/scalekit.v1.organizations.OrganizationService/DeletePortalLinkByID"
	// OrganizationServiceGetPortalLinksProcedure is the fully-qualified name of the
	// OrganizationService's GetPortalLinks RPC.
	OrganizationServiceGetPortalLinksProcedure = "/scalekit.v1.organizations.OrganizationService/GetPortalLinks"
	// OrganizationServiceUpdateOrganizationSettingsProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganizationSettings RPC.
	OrganizationServiceUpdateOrganizationSettingsProcedure = "/scalekit.v1.organizations.OrganizationService/UpdateOrganizationSettings"
	// OrganizationServiceCreateOrganizationSessionSettingsProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganizationSessionSettings RPC.
	OrganizationServiceCreateOrganizationSessionSettingsProcedure = "/scalekit.v1.organizations.OrganizationService/CreateOrganizationSessionSettings"
	// OrganizationServiceGetOrganizationSessionSettingsProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganizationSessionSettings RPC.
	OrganizationServiceGetOrganizationSessionSettingsProcedure = "/scalekit.v1.organizations.OrganizationService/GetOrganizationSessionSettings"
	// OrganizationServiceUpdateOrganizationSessionSettingsProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganizationSessionSettings RPC.
	OrganizationServiceUpdateOrganizationSessionSettingsProcedure = "/scalekit.v1.organizations.OrganizationService/UpdateOrganizationSessionSettings"
	// OrganizationServiceDeleteOrganizationSessionSettingsProcedure is the fully-qualified name of the
	// OrganizationService's DeleteOrganizationSessionSettings RPC.
	OrganizationServiceDeleteOrganizationSessionSettingsProcedure = "/scalekit.v1.organizations.OrganizationService/DeleteOrganizationSessionSettings"
)

// OrganizationServiceClient is a client for the scalekit.v1.organizations.OrganizationService
// service.
type OrganizationServiceClient interface {
	// Create Organization
	CreateOrganization(context.Context, *connect.Request[organizations.CreateOrganizationRequest]) (*connect.Response[organizations.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[organizations.UpdateOrganizationRequest]) (*connect.Response[organizations.UpdateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[organizations.GetOrganizationRequest]) (*connect.Response[organizations.GetOrganizationResponse], error)
	ListOrganization(context.Context, *connect.Request[organizations.ListOrganizationsRequest]) (*connect.Response[organizations.ListOrganizationsResponse], error)
	SearchOrganization(context.Context, *connect.Request[organizations.SearchOrganizationsRequest]) (*connect.Response[organizations.SearchOrganizationsResponse], error)
	// Delete an Organization
	DeleteOrganization(context.Context, *connect.Request[organizations.DeleteOrganizationRequest]) (*connect.Response[emptypb.Empty], error)
	// Generate Portal Link for Org
	GeneratePortalLink(context.Context, *connect.Request[organizations.GeneratePortalLinkRequest]) (*connect.Response[organizations.GeneratePortalLinkResponse], error)
	DeletePortalLink(context.Context, *connect.Request[organizations.DeletePortalLinkRequest]) (*connect.Response[emptypb.Empty], error)
	DeletePortalLinkByID(context.Context, *connect.Request[organizations.DeletePortalLinkByIdRequest]) (*connect.Response[emptypb.Empty], error)
	GetPortalLinks(context.Context, *connect.Request[organizations.GetPortalLinkRequest]) (*connect.Response[organizations.GetPortalLinksResponse], error)
	UpdateOrganizationSettings(context.Context, *connect.Request[organizations.UpdateOrganizationSettingsRequest]) (*connect.Response[organizations.GetOrganizationResponse], error)
	CreateOrganizationSessionSettings(context.Context, *connect.Request[organizations.CreateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.CreateOrganizationSessionSettingsResponse], error)
	GetOrganizationSessionSettings(context.Context, *connect.Request[organizations.GetOrganizationSessionSettingsRequest]) (*connect.Response[organizations.GetOrganizationSessionSettingsResponse], error)
	UpdateOrganizationSessionSettings(context.Context, *connect.Request[organizations.UpdateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.UpdateOrganizationSessionSettingsResponse], error)
	DeleteOrganizationSessionSettings(context.Context, *connect.Request[organizations.DeleteOrganizationSessionSettingsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewOrganizationServiceClient constructs a client for the
// scalekit.v1.organizations.OrganizationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	organizationServiceMethods := organizations.File_scalekit_v1_organizations_organizations_proto.Services().ByName("OrganizationService").Methods()
	return &organizationServiceClient{
		createOrganization: connect.NewClient[organizations.CreateOrganizationRequest, organizations.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[organizations.UpdateOrganizationRequest, organizations.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[organizations.GetOrganizationRequest, organizations.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		listOrganization: connect.NewClient[organizations.ListOrganizationsRequest, organizations.ListOrganizationsResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListOrganization")),
			connect.WithClientOptions(opts...),
		),
		searchOrganization: connect.NewClient[organizations.SearchOrganizationsRequest, organizations.SearchOrganizationsResponse](
			httpClient,
			baseURL+OrganizationServiceSearchOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("SearchOrganization")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[organizations.DeleteOrganizationRequest, emptypb.Empty](
			httpClient,
			baseURL+OrganizationServiceDeleteOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganization")),
			connect.WithClientOptions(opts...),
		),
		generatePortalLink: connect.NewClient[organizations.GeneratePortalLinkRequest, organizations.GeneratePortalLinkResponse](
			httpClient,
			baseURL+OrganizationServiceGeneratePortalLinkProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GeneratePortalLink")),
			connect.WithClientOptions(opts...),
		),
		deletePortalLink: connect.NewClient[organizations.DeletePortalLinkRequest, emptypb.Empty](
			httpClient,
			baseURL+OrganizationServiceDeletePortalLinkProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeletePortalLink")),
			connect.WithClientOptions(opts...),
		),
		deletePortalLinkByID: connect.NewClient[organizations.DeletePortalLinkByIdRequest, emptypb.Empty](
			httpClient,
			baseURL+OrganizationServiceDeletePortalLinkByIDProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeletePortalLinkByID")),
			connect.WithClientOptions(opts...),
		),
		getPortalLinks: connect.NewClient[organizations.GetPortalLinkRequest, organizations.GetPortalLinksResponse](
			httpClient,
			baseURL+OrganizationServiceGetPortalLinksProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetPortalLinks")),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationSettings: connect.NewClient[organizations.UpdateOrganizationSettingsRequest, organizations.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationSettingsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganizationSettings")),
			connect.WithClientOptions(opts...),
		),
		createOrganizationSessionSettings: connect.NewClient[organizations.CreateOrganizationSessionSettingsRequest, organizations.CreateOrganizationSessionSettingsResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationSessionSettingsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateOrganizationSessionSettings")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationSessionSettings: connect.NewClient[organizations.GetOrganizationSessionSettingsRequest, organizations.GetOrganizationSessionSettingsResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationSessionSettingsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetOrganizationSessionSettings")),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationSessionSettings: connect.NewClient[organizations.UpdateOrganizationSessionSettingsRequest, organizations.UpdateOrganizationSessionSettingsResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationSessionSettingsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganizationSessionSettings")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationSessionSettings: connect.NewClient[organizations.DeleteOrganizationSessionSettingsRequest, emptypb.Empty](
			httpClient,
			baseURL+OrganizationServiceDeleteOrganizationSessionSettingsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganizationSessionSettings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	createOrganization                *connect.Client[organizations.CreateOrganizationRequest, organizations.CreateOrganizationResponse]
	updateOrganization                *connect.Client[organizations.UpdateOrganizationRequest, organizations.UpdateOrganizationResponse]
	getOrganization                   *connect.Client[organizations.GetOrganizationRequest, organizations.GetOrganizationResponse]
	listOrganization                  *connect.Client[organizations.ListOrganizationsRequest, organizations.ListOrganizationsResponse]
	searchOrganization                *connect.Client[organizations.SearchOrganizationsRequest, organizations.SearchOrganizationsResponse]
	deleteOrganization                *connect.Client[organizations.DeleteOrganizationRequest, emptypb.Empty]
	generatePortalLink                *connect.Client[organizations.GeneratePortalLinkRequest, organizations.GeneratePortalLinkResponse]
	deletePortalLink                  *connect.Client[organizations.DeletePortalLinkRequest, emptypb.Empty]
	deletePortalLinkByID              *connect.Client[organizations.DeletePortalLinkByIdRequest, emptypb.Empty]
	getPortalLinks                    *connect.Client[organizations.GetPortalLinkRequest, organizations.GetPortalLinksResponse]
	updateOrganizationSettings        *connect.Client[organizations.UpdateOrganizationSettingsRequest, organizations.GetOrganizationResponse]
	createOrganizationSessionSettings *connect.Client[organizations.CreateOrganizationSessionSettingsRequest, organizations.CreateOrganizationSessionSettingsResponse]
	getOrganizationSessionSettings    *connect.Client[organizations.GetOrganizationSessionSettingsRequest, organizations.GetOrganizationSessionSettingsResponse]
	updateOrganizationSessionSettings *connect.Client[organizations.UpdateOrganizationSessionSettingsRequest, organizations.UpdateOrganizationSessionSettingsResponse]
	deleteOrganizationSessionSettings *connect.Client[organizations.DeleteOrganizationSessionSettingsRequest, emptypb.Empty]
}

// CreateOrganization calls scalekit.v1.organizations.OrganizationService.CreateOrganization.
func (c *organizationServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[organizations.CreateOrganizationRequest]) (*connect.Response[organizations.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls scalekit.v1.organizations.OrganizationService.UpdateOrganization.
func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[organizations.UpdateOrganizationRequest]) (*connect.Response[organizations.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// GetOrganization calls scalekit.v1.organizations.OrganizationService.GetOrganization.
func (c *organizationServiceClient) GetOrganization(ctx context.Context, req *connect.Request[organizations.GetOrganizationRequest]) (*connect.Response[organizations.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// ListOrganization calls scalekit.v1.organizations.OrganizationService.ListOrganization.
func (c *organizationServiceClient) ListOrganization(ctx context.Context, req *connect.Request[organizations.ListOrganizationsRequest]) (*connect.Response[organizations.ListOrganizationsResponse], error) {
	return c.listOrganization.CallUnary(ctx, req)
}

// SearchOrganization calls scalekit.v1.organizations.OrganizationService.SearchOrganization.
func (c *organizationServiceClient) SearchOrganization(ctx context.Context, req *connect.Request[organizations.SearchOrganizationsRequest]) (*connect.Response[organizations.SearchOrganizationsResponse], error) {
	return c.searchOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls scalekit.v1.organizations.OrganizationService.DeleteOrganization.
func (c *organizationServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[organizations.DeleteOrganizationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// GeneratePortalLink calls scalekit.v1.organizations.OrganizationService.GeneratePortalLink.
func (c *organizationServiceClient) GeneratePortalLink(ctx context.Context, req *connect.Request[organizations.GeneratePortalLinkRequest]) (*connect.Response[organizations.GeneratePortalLinkResponse], error) {
	return c.generatePortalLink.CallUnary(ctx, req)
}

// DeletePortalLink calls scalekit.v1.organizations.OrganizationService.DeletePortalLink.
func (c *organizationServiceClient) DeletePortalLink(ctx context.Context, req *connect.Request[organizations.DeletePortalLinkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deletePortalLink.CallUnary(ctx, req)
}

// DeletePortalLinkByID calls scalekit.v1.organizations.OrganizationService.DeletePortalLinkByID.
func (c *organizationServiceClient) DeletePortalLinkByID(ctx context.Context, req *connect.Request[organizations.DeletePortalLinkByIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deletePortalLinkByID.CallUnary(ctx, req)
}

// GetPortalLinks calls scalekit.v1.organizations.OrganizationService.GetPortalLinks.
func (c *organizationServiceClient) GetPortalLinks(ctx context.Context, req *connect.Request[organizations.GetPortalLinkRequest]) (*connect.Response[organizations.GetPortalLinksResponse], error) {
	return c.getPortalLinks.CallUnary(ctx, req)
}

// UpdateOrganizationSettings calls
// scalekit.v1.organizations.OrganizationService.UpdateOrganizationSettings.
func (c *organizationServiceClient) UpdateOrganizationSettings(ctx context.Context, req *connect.Request[organizations.UpdateOrganizationSettingsRequest]) (*connect.Response[organizations.GetOrganizationResponse], error) {
	return c.updateOrganizationSettings.CallUnary(ctx, req)
}

// CreateOrganizationSessionSettings calls
// scalekit.v1.organizations.OrganizationService.CreateOrganizationSessionSettings.
func (c *organizationServiceClient) CreateOrganizationSessionSettings(ctx context.Context, req *connect.Request[organizations.CreateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.CreateOrganizationSessionSettingsResponse], error) {
	return c.createOrganizationSessionSettings.CallUnary(ctx, req)
}

// GetOrganizationSessionSettings calls
// scalekit.v1.organizations.OrganizationService.GetOrganizationSessionSettings.
func (c *organizationServiceClient) GetOrganizationSessionSettings(ctx context.Context, req *connect.Request[organizations.GetOrganizationSessionSettingsRequest]) (*connect.Response[organizations.GetOrganizationSessionSettingsResponse], error) {
	return c.getOrganizationSessionSettings.CallUnary(ctx, req)
}

// UpdateOrganizationSessionSettings calls
// scalekit.v1.organizations.OrganizationService.UpdateOrganizationSessionSettings.
func (c *organizationServiceClient) UpdateOrganizationSessionSettings(ctx context.Context, req *connect.Request[organizations.UpdateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.UpdateOrganizationSessionSettingsResponse], error) {
	return c.updateOrganizationSessionSettings.CallUnary(ctx, req)
}

// DeleteOrganizationSessionSettings calls
// scalekit.v1.organizations.OrganizationService.DeleteOrganizationSessionSettings.
func (c *organizationServiceClient) DeleteOrganizationSessionSettings(ctx context.Context, req *connect.Request[organizations.DeleteOrganizationSessionSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteOrganizationSessionSettings.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the
// scalekit.v1.organizations.OrganizationService service.
type OrganizationServiceHandler interface {
	// Create Organization
	CreateOrganization(context.Context, *connect.Request[organizations.CreateOrganizationRequest]) (*connect.Response[organizations.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[organizations.UpdateOrganizationRequest]) (*connect.Response[organizations.UpdateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[organizations.GetOrganizationRequest]) (*connect.Response[organizations.GetOrganizationResponse], error)
	ListOrganization(context.Context, *connect.Request[organizations.ListOrganizationsRequest]) (*connect.Response[organizations.ListOrganizationsResponse], error)
	SearchOrganization(context.Context, *connect.Request[organizations.SearchOrganizationsRequest]) (*connect.Response[organizations.SearchOrganizationsResponse], error)
	// Delete an Organization
	DeleteOrganization(context.Context, *connect.Request[organizations.DeleteOrganizationRequest]) (*connect.Response[emptypb.Empty], error)
	// Generate Portal Link for Org
	GeneratePortalLink(context.Context, *connect.Request[organizations.GeneratePortalLinkRequest]) (*connect.Response[organizations.GeneratePortalLinkResponse], error)
	DeletePortalLink(context.Context, *connect.Request[organizations.DeletePortalLinkRequest]) (*connect.Response[emptypb.Empty], error)
	DeletePortalLinkByID(context.Context, *connect.Request[organizations.DeletePortalLinkByIdRequest]) (*connect.Response[emptypb.Empty], error)
	GetPortalLinks(context.Context, *connect.Request[organizations.GetPortalLinkRequest]) (*connect.Response[organizations.GetPortalLinksResponse], error)
	UpdateOrganizationSettings(context.Context, *connect.Request[organizations.UpdateOrganizationSettingsRequest]) (*connect.Response[organizations.GetOrganizationResponse], error)
	CreateOrganizationSessionSettings(context.Context, *connect.Request[organizations.CreateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.CreateOrganizationSessionSettingsResponse], error)
	GetOrganizationSessionSettings(context.Context, *connect.Request[organizations.GetOrganizationSessionSettingsRequest]) (*connect.Response[organizations.GetOrganizationSessionSettingsResponse], error)
	UpdateOrganizationSessionSettings(context.Context, *connect.Request[organizations.UpdateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.UpdateOrganizationSessionSettingsResponse], error)
	DeleteOrganizationSessionSettings(context.Context, *connect.Request[organizations.DeleteOrganizationSessionSettingsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceMethods := organizations.File_scalekit_v1_organizations_organizations_proto.Services().ByName("OrganizationService").Methods()
	organizationServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationProcedure,
		svc.ListOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("ListOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceSearchOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceSearchOrganizationProcedure,
		svc.SearchOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("SearchOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGeneratePortalLinkHandler := connect.NewUnaryHandler(
		OrganizationServiceGeneratePortalLinkProcedure,
		svc.GeneratePortalLink,
		connect.WithSchema(organizationServiceMethods.ByName("GeneratePortalLink")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeletePortalLinkHandler := connect.NewUnaryHandler(
		OrganizationServiceDeletePortalLinkProcedure,
		svc.DeletePortalLink,
		connect.WithSchema(organizationServiceMethods.ByName("DeletePortalLink")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeletePortalLinkByIDHandler := connect.NewUnaryHandler(
		OrganizationServiceDeletePortalLinkByIDProcedure,
		svc.DeletePortalLinkByID,
		connect.WithSchema(organizationServiceMethods.ByName("DeletePortalLinkByID")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetPortalLinksHandler := connect.NewUnaryHandler(
		OrganizationServiceGetPortalLinksProcedure,
		svc.GetPortalLinks,
		connect.WithSchema(organizationServiceMethods.ByName("GetPortalLinks")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationSettingsHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationSettingsProcedure,
		svc.UpdateOrganizationSettings,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganizationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateOrganizationSessionSettingsHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationSessionSettingsProcedure,
		svc.CreateOrganizationSessionSettings,
		connect.WithSchema(organizationServiceMethods.ByName("CreateOrganizationSessionSettings")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationSessionSettingsHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationSessionSettingsProcedure,
		svc.GetOrganizationSessionSettings,
		connect.WithSchema(organizationServiceMethods.ByName("GetOrganizationSessionSettings")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationSessionSettingsHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationSessionSettingsProcedure,
		svc.UpdateOrganizationSessionSettings,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganizationSessionSettings")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteOrganizationSessionSettingsHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteOrganizationSessionSettingsProcedure,
		svc.DeleteOrganizationSessionSettings,
		connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganizationSessionSettings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.organizations.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceCreateOrganizationProcedure:
			organizationServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationProcedure:
			organizationServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationProcedure:
			organizationServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationProcedure:
			organizationServiceListOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceSearchOrganizationProcedure:
			organizationServiceSearchOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteOrganizationProcedure:
			organizationServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceGeneratePortalLinkProcedure:
			organizationServiceGeneratePortalLinkHandler.ServeHTTP(w, r)
		case OrganizationServiceDeletePortalLinkProcedure:
			organizationServiceDeletePortalLinkHandler.ServeHTTP(w, r)
		case OrganizationServiceDeletePortalLinkByIDProcedure:
			organizationServiceDeletePortalLinkByIDHandler.ServeHTTP(w, r)
		case OrganizationServiceGetPortalLinksProcedure:
			organizationServiceGetPortalLinksHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationSettingsProcedure:
			organizationServiceUpdateOrganizationSettingsHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateOrganizationSessionSettingsProcedure:
			organizationServiceCreateOrganizationSessionSettingsHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationSessionSettingsProcedure:
			organizationServiceGetOrganizationSessionSettingsHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationSessionSettingsProcedure:
			organizationServiceUpdateOrganizationSessionSettingsHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteOrganizationSessionSettingsProcedure:
			organizationServiceDeleteOrganizationSessionSettingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) CreateOrganization(context.Context, *connect.Request[organizations.CreateOrganizationRequest]) (*connect.Response[organizations.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganization(context.Context, *connect.Request[organizations.UpdateOrganizationRequest]) (*connect.Response[organizations.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganization(context.Context, *connect.Request[organizations.GetOrganizationRequest]) (*connect.Response[organizations.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganization(context.Context, *connect.Request[organizations.ListOrganizationsRequest]) (*connect.Response[organizations.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.ListOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) SearchOrganization(context.Context, *connect.Request[organizations.SearchOrganizationsRequest]) (*connect.Response[organizations.SearchOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.SearchOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteOrganization(context.Context, *connect.Request[organizations.DeleteOrganizationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.DeleteOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GeneratePortalLink(context.Context, *connect.Request[organizations.GeneratePortalLinkRequest]) (*connect.Response[organizations.GeneratePortalLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.GeneratePortalLink is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeletePortalLink(context.Context, *connect.Request[organizations.DeletePortalLinkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.DeletePortalLink is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeletePortalLinkByID(context.Context, *connect.Request[organizations.DeletePortalLinkByIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.DeletePortalLinkByID is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetPortalLinks(context.Context, *connect.Request[organizations.GetPortalLinkRequest]) (*connect.Response[organizations.GetPortalLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.GetPortalLinks is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganizationSettings(context.Context, *connect.Request[organizations.UpdateOrganizationSettingsRequest]) (*connect.Response[organizations.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.UpdateOrganizationSettings is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateOrganizationSessionSettings(context.Context, *connect.Request[organizations.CreateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.CreateOrganizationSessionSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.CreateOrganizationSessionSettings is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganizationSessionSettings(context.Context, *connect.Request[organizations.GetOrganizationSessionSettingsRequest]) (*connect.Response[organizations.GetOrganizationSessionSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.GetOrganizationSessionSettings is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganizationSessionSettings(context.Context, *connect.Request[organizations.UpdateOrganizationSessionSettingsRequest]) (*connect.Response[organizations.UpdateOrganizationSessionSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.UpdateOrganizationSessionSettings is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteOrganizationSessionSettings(context.Context, *connect.Request[organizations.DeleteOrganizationSessionSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.organizations.OrganizationService.DeleteOrganizationSessionSettings is not implemented"))
}
