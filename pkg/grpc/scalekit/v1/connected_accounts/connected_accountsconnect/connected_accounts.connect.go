// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scalekit/v1/connected_accounts/connected_accounts.proto

package connected_accountsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	connected_accounts "github.com/scalekit-inc/scalekit-sdk-go/v2/pkg/grpc/scalekit/v1/connected_accounts"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConnectedAccountServiceName is the fully-qualified name of the ConnectedAccountService service.
	ConnectedAccountServiceName = "scalekit.v1.connected_accounts.ConnectedAccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectedAccountServiceListConnectedAccountsProcedure is the fully-qualified name of the
	// ConnectedAccountService's ListConnectedAccounts RPC.
	ConnectedAccountServiceListConnectedAccountsProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/ListConnectedAccounts"
	// ConnectedAccountServiceSearchConnectedAccountsProcedure is the fully-qualified name of the
	// ConnectedAccountService's SearchConnectedAccounts RPC.
	ConnectedAccountServiceSearchConnectedAccountsProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/SearchConnectedAccounts"
	// ConnectedAccountServiceCreateConnectedAccountProcedure is the fully-qualified name of the
	// ConnectedAccountService's CreateConnectedAccount RPC.
	ConnectedAccountServiceCreateConnectedAccountProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/CreateConnectedAccount"
	// ConnectedAccountServiceUpdateConnectedAccountProcedure is the fully-qualified name of the
	// ConnectedAccountService's UpdateConnectedAccount RPC.
	ConnectedAccountServiceUpdateConnectedAccountProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/UpdateConnectedAccount"
	// ConnectedAccountServiceDeleteConnectedAccountProcedure is the fully-qualified name of the
	// ConnectedAccountService's DeleteConnectedAccount RPC.
	ConnectedAccountServiceDeleteConnectedAccountProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/DeleteConnectedAccount"
	// ConnectedAccountServiceGetMagicLinkForConnectedAccountProcedure is the fully-qualified name of
	// the ConnectedAccountService's GetMagicLinkForConnectedAccount RPC.
	ConnectedAccountServiceGetMagicLinkForConnectedAccountProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/GetMagicLinkForConnectedAccount"
	// ConnectedAccountServiceGetConnectedAccountAuthProcedure is the fully-qualified name of the
	// ConnectedAccountService's GetConnectedAccountAuth RPC.
	ConnectedAccountServiceGetConnectedAccountAuthProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/GetConnectedAccountAuth"
	// ConnectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectProcedure is the
	// fully-qualified name of the ConnectedAccountService's GetMagicLinkForConnectedAccountWithRedirect
	// RPC.
	ConnectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectProcedure = "/scalekit.v1.connected_accounts.ConnectedAccountService/GetMagicLinkForConnectedAccountWithRedirect"
)

// ConnectedAccountServiceClient is a client for the
// scalekit.v1.connected_accounts.ConnectedAccountService service.
type ConnectedAccountServiceClient interface {
	ListConnectedAccounts(context.Context, *connect.Request[connected_accounts.ListConnectedAccountsRequest]) (*connect.Response[connected_accounts.ListConnectedAccountsResponse], error)
	SearchConnectedAccounts(context.Context, *connect.Request[connected_accounts.SearchConnectedAccountsRequest]) (*connect.Response[connected_accounts.SearchConnectedAccountsResponse], error)
	CreateConnectedAccount(context.Context, *connect.Request[connected_accounts.CreateConnectedAccountRequest]) (*connect.Response[connected_accounts.CreateConnectedAccountResponse], error)
	UpdateConnectedAccount(context.Context, *connect.Request[connected_accounts.UpdateConnectedAccountRequest]) (*connect.Response[connected_accounts.UpdateConnectedAccountResponse], error)
	DeleteConnectedAccount(context.Context, *connect.Request[connected_accounts.DeleteConnectedAccountRequest]) (*connect.Response[connected_accounts.DeleteConnectedAccountResponse], error)
	GetMagicLinkForConnectedAccount(context.Context, *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountResponse], error)
	// this will return the auth details for a connected account by its identifier
	GetConnectedAccountAuth(context.Context, *connect.Request[connected_accounts.GetConnectedAccountByIdentifierRequest]) (*connect.Response[connected_accounts.GetConnectedAccountByIdentifierResponse], error)
	GetMagicLinkForConnectedAccountWithRedirect(context.Context, *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRedirectRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountRedirectResponse], error)
}

// NewConnectedAccountServiceClient constructs a client for the
// scalekit.v1.connected_accounts.ConnectedAccountService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectedAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectedAccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	connectedAccountServiceMethods := connected_accounts.File_scalekit_v1_connected_accounts_connected_accounts_proto.Services().ByName("ConnectedAccountService").Methods()
	return &connectedAccountServiceClient{
		listConnectedAccounts: connect.NewClient[connected_accounts.ListConnectedAccountsRequest, connected_accounts.ListConnectedAccountsResponse](
			httpClient,
			baseURL+ConnectedAccountServiceListConnectedAccountsProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("ListConnectedAccounts")),
			connect.WithClientOptions(opts...),
		),
		searchConnectedAccounts: connect.NewClient[connected_accounts.SearchConnectedAccountsRequest, connected_accounts.SearchConnectedAccountsResponse](
			httpClient,
			baseURL+ConnectedAccountServiceSearchConnectedAccountsProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("SearchConnectedAccounts")),
			connect.WithClientOptions(opts...),
		),
		createConnectedAccount: connect.NewClient[connected_accounts.CreateConnectedAccountRequest, connected_accounts.CreateConnectedAccountResponse](
			httpClient,
			baseURL+ConnectedAccountServiceCreateConnectedAccountProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("CreateConnectedAccount")),
			connect.WithClientOptions(opts...),
		),
		updateConnectedAccount: connect.NewClient[connected_accounts.UpdateConnectedAccountRequest, connected_accounts.UpdateConnectedAccountResponse](
			httpClient,
			baseURL+ConnectedAccountServiceUpdateConnectedAccountProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("UpdateConnectedAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteConnectedAccount: connect.NewClient[connected_accounts.DeleteConnectedAccountRequest, connected_accounts.DeleteConnectedAccountResponse](
			httpClient,
			baseURL+ConnectedAccountServiceDeleteConnectedAccountProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("DeleteConnectedAccount")),
			connect.WithClientOptions(opts...),
		),
		getMagicLinkForConnectedAccount: connect.NewClient[connected_accounts.GetMagicLinkForConnectedAccountRequest, connected_accounts.GetMagicLinkForConnectedAccountResponse](
			httpClient,
			baseURL+ConnectedAccountServiceGetMagicLinkForConnectedAccountProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("GetMagicLinkForConnectedAccount")),
			connect.WithClientOptions(opts...),
		),
		getConnectedAccountAuth: connect.NewClient[connected_accounts.GetConnectedAccountByIdentifierRequest, connected_accounts.GetConnectedAccountByIdentifierResponse](
			httpClient,
			baseURL+ConnectedAccountServiceGetConnectedAccountAuthProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("GetConnectedAccountAuth")),
			connect.WithClientOptions(opts...),
		),
		getMagicLinkForConnectedAccountWithRedirect: connect.NewClient[connected_accounts.GetMagicLinkForConnectedAccountRedirectRequest, connected_accounts.GetMagicLinkForConnectedAccountRedirectResponse](
			httpClient,
			baseURL+ConnectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectProcedure,
			connect.WithSchema(connectedAccountServiceMethods.ByName("GetMagicLinkForConnectedAccountWithRedirect")),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectedAccountServiceClient implements ConnectedAccountServiceClient.
type connectedAccountServiceClient struct {
	listConnectedAccounts                       *connect.Client[connected_accounts.ListConnectedAccountsRequest, connected_accounts.ListConnectedAccountsResponse]
	searchConnectedAccounts                     *connect.Client[connected_accounts.SearchConnectedAccountsRequest, connected_accounts.SearchConnectedAccountsResponse]
	createConnectedAccount                      *connect.Client[connected_accounts.CreateConnectedAccountRequest, connected_accounts.CreateConnectedAccountResponse]
	updateConnectedAccount                      *connect.Client[connected_accounts.UpdateConnectedAccountRequest, connected_accounts.UpdateConnectedAccountResponse]
	deleteConnectedAccount                      *connect.Client[connected_accounts.DeleteConnectedAccountRequest, connected_accounts.DeleteConnectedAccountResponse]
	getMagicLinkForConnectedAccount             *connect.Client[connected_accounts.GetMagicLinkForConnectedAccountRequest, connected_accounts.GetMagicLinkForConnectedAccountResponse]
	getConnectedAccountAuth                     *connect.Client[connected_accounts.GetConnectedAccountByIdentifierRequest, connected_accounts.GetConnectedAccountByIdentifierResponse]
	getMagicLinkForConnectedAccountWithRedirect *connect.Client[connected_accounts.GetMagicLinkForConnectedAccountRedirectRequest, connected_accounts.GetMagicLinkForConnectedAccountRedirectResponse]
}

// ListConnectedAccounts calls
// scalekit.v1.connected_accounts.ConnectedAccountService.ListConnectedAccounts.
func (c *connectedAccountServiceClient) ListConnectedAccounts(ctx context.Context, req *connect.Request[connected_accounts.ListConnectedAccountsRequest]) (*connect.Response[connected_accounts.ListConnectedAccountsResponse], error) {
	return c.listConnectedAccounts.CallUnary(ctx, req)
}

// SearchConnectedAccounts calls
// scalekit.v1.connected_accounts.ConnectedAccountService.SearchConnectedAccounts.
func (c *connectedAccountServiceClient) SearchConnectedAccounts(ctx context.Context, req *connect.Request[connected_accounts.SearchConnectedAccountsRequest]) (*connect.Response[connected_accounts.SearchConnectedAccountsResponse], error) {
	return c.searchConnectedAccounts.CallUnary(ctx, req)
}

// CreateConnectedAccount calls
// scalekit.v1.connected_accounts.ConnectedAccountService.CreateConnectedAccount.
func (c *connectedAccountServiceClient) CreateConnectedAccount(ctx context.Context, req *connect.Request[connected_accounts.CreateConnectedAccountRequest]) (*connect.Response[connected_accounts.CreateConnectedAccountResponse], error) {
	return c.createConnectedAccount.CallUnary(ctx, req)
}

// UpdateConnectedAccount calls
// scalekit.v1.connected_accounts.ConnectedAccountService.UpdateConnectedAccount.
func (c *connectedAccountServiceClient) UpdateConnectedAccount(ctx context.Context, req *connect.Request[connected_accounts.UpdateConnectedAccountRequest]) (*connect.Response[connected_accounts.UpdateConnectedAccountResponse], error) {
	return c.updateConnectedAccount.CallUnary(ctx, req)
}

// DeleteConnectedAccount calls
// scalekit.v1.connected_accounts.ConnectedAccountService.DeleteConnectedAccount.
func (c *connectedAccountServiceClient) DeleteConnectedAccount(ctx context.Context, req *connect.Request[connected_accounts.DeleteConnectedAccountRequest]) (*connect.Response[connected_accounts.DeleteConnectedAccountResponse], error) {
	return c.deleteConnectedAccount.CallUnary(ctx, req)
}

// GetMagicLinkForConnectedAccount calls
// scalekit.v1.connected_accounts.ConnectedAccountService.GetMagicLinkForConnectedAccount.
func (c *connectedAccountServiceClient) GetMagicLinkForConnectedAccount(ctx context.Context, req *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountResponse], error) {
	return c.getMagicLinkForConnectedAccount.CallUnary(ctx, req)
}

// GetConnectedAccountAuth calls
// scalekit.v1.connected_accounts.ConnectedAccountService.GetConnectedAccountAuth.
func (c *connectedAccountServiceClient) GetConnectedAccountAuth(ctx context.Context, req *connect.Request[connected_accounts.GetConnectedAccountByIdentifierRequest]) (*connect.Response[connected_accounts.GetConnectedAccountByIdentifierResponse], error) {
	return c.getConnectedAccountAuth.CallUnary(ctx, req)
}

// GetMagicLinkForConnectedAccountWithRedirect calls
// scalekit.v1.connected_accounts.ConnectedAccountService.GetMagicLinkForConnectedAccountWithRedirect.
func (c *connectedAccountServiceClient) GetMagicLinkForConnectedAccountWithRedirect(ctx context.Context, req *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRedirectRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountRedirectResponse], error) {
	return c.getMagicLinkForConnectedAccountWithRedirect.CallUnary(ctx, req)
}

// ConnectedAccountServiceHandler is an implementation of the
// scalekit.v1.connected_accounts.ConnectedAccountService service.
type ConnectedAccountServiceHandler interface {
	ListConnectedAccounts(context.Context, *connect.Request[connected_accounts.ListConnectedAccountsRequest]) (*connect.Response[connected_accounts.ListConnectedAccountsResponse], error)
	SearchConnectedAccounts(context.Context, *connect.Request[connected_accounts.SearchConnectedAccountsRequest]) (*connect.Response[connected_accounts.SearchConnectedAccountsResponse], error)
	CreateConnectedAccount(context.Context, *connect.Request[connected_accounts.CreateConnectedAccountRequest]) (*connect.Response[connected_accounts.CreateConnectedAccountResponse], error)
	UpdateConnectedAccount(context.Context, *connect.Request[connected_accounts.UpdateConnectedAccountRequest]) (*connect.Response[connected_accounts.UpdateConnectedAccountResponse], error)
	DeleteConnectedAccount(context.Context, *connect.Request[connected_accounts.DeleteConnectedAccountRequest]) (*connect.Response[connected_accounts.DeleteConnectedAccountResponse], error)
	GetMagicLinkForConnectedAccount(context.Context, *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountResponse], error)
	// this will return the auth details for a connected account by its identifier
	GetConnectedAccountAuth(context.Context, *connect.Request[connected_accounts.GetConnectedAccountByIdentifierRequest]) (*connect.Response[connected_accounts.GetConnectedAccountByIdentifierResponse], error)
	GetMagicLinkForConnectedAccountWithRedirect(context.Context, *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRedirectRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountRedirectResponse], error)
}

// NewConnectedAccountServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectedAccountServiceHandler(svc ConnectedAccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectedAccountServiceMethods := connected_accounts.File_scalekit_v1_connected_accounts_connected_accounts_proto.Services().ByName("ConnectedAccountService").Methods()
	connectedAccountServiceListConnectedAccountsHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceListConnectedAccountsProcedure,
		svc.ListConnectedAccounts,
		connect.WithSchema(connectedAccountServiceMethods.ByName("ListConnectedAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceSearchConnectedAccountsHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceSearchConnectedAccountsProcedure,
		svc.SearchConnectedAccounts,
		connect.WithSchema(connectedAccountServiceMethods.ByName("SearchConnectedAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceCreateConnectedAccountHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceCreateConnectedAccountProcedure,
		svc.CreateConnectedAccount,
		connect.WithSchema(connectedAccountServiceMethods.ByName("CreateConnectedAccount")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceUpdateConnectedAccountHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceUpdateConnectedAccountProcedure,
		svc.UpdateConnectedAccount,
		connect.WithSchema(connectedAccountServiceMethods.ByName("UpdateConnectedAccount")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceDeleteConnectedAccountHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceDeleteConnectedAccountProcedure,
		svc.DeleteConnectedAccount,
		connect.WithSchema(connectedAccountServiceMethods.ByName("DeleteConnectedAccount")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceGetMagicLinkForConnectedAccountHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceGetMagicLinkForConnectedAccountProcedure,
		svc.GetMagicLinkForConnectedAccount,
		connect.WithSchema(connectedAccountServiceMethods.ByName("GetMagicLinkForConnectedAccount")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceGetConnectedAccountAuthHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceGetConnectedAccountAuthProcedure,
		svc.GetConnectedAccountAuth,
		connect.WithSchema(connectedAccountServiceMethods.ByName("GetConnectedAccountAuth")),
		connect.WithHandlerOptions(opts...),
	)
	connectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectHandler := connect.NewUnaryHandler(
		ConnectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectProcedure,
		svc.GetMagicLinkForConnectedAccountWithRedirect,
		connect.WithSchema(connectedAccountServiceMethods.ByName("GetMagicLinkForConnectedAccountWithRedirect")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scalekit.v1.connected_accounts.ConnectedAccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectedAccountServiceListConnectedAccountsProcedure:
			connectedAccountServiceListConnectedAccountsHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceSearchConnectedAccountsProcedure:
			connectedAccountServiceSearchConnectedAccountsHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceCreateConnectedAccountProcedure:
			connectedAccountServiceCreateConnectedAccountHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceUpdateConnectedAccountProcedure:
			connectedAccountServiceUpdateConnectedAccountHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceDeleteConnectedAccountProcedure:
			connectedAccountServiceDeleteConnectedAccountHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceGetMagicLinkForConnectedAccountProcedure:
			connectedAccountServiceGetMagicLinkForConnectedAccountHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceGetConnectedAccountAuthProcedure:
			connectedAccountServiceGetConnectedAccountAuthHandler.ServeHTTP(w, r)
		case ConnectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectProcedure:
			connectedAccountServiceGetMagicLinkForConnectedAccountWithRedirectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectedAccountServiceHandler struct{}

func (UnimplementedConnectedAccountServiceHandler) ListConnectedAccounts(context.Context, *connect.Request[connected_accounts.ListConnectedAccountsRequest]) (*connect.Response[connected_accounts.ListConnectedAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.ListConnectedAccounts is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) SearchConnectedAccounts(context.Context, *connect.Request[connected_accounts.SearchConnectedAccountsRequest]) (*connect.Response[connected_accounts.SearchConnectedAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.SearchConnectedAccounts is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) CreateConnectedAccount(context.Context, *connect.Request[connected_accounts.CreateConnectedAccountRequest]) (*connect.Response[connected_accounts.CreateConnectedAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.CreateConnectedAccount is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) UpdateConnectedAccount(context.Context, *connect.Request[connected_accounts.UpdateConnectedAccountRequest]) (*connect.Response[connected_accounts.UpdateConnectedAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.UpdateConnectedAccount is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) DeleteConnectedAccount(context.Context, *connect.Request[connected_accounts.DeleteConnectedAccountRequest]) (*connect.Response[connected_accounts.DeleteConnectedAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.DeleteConnectedAccount is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) GetMagicLinkForConnectedAccount(context.Context, *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.GetMagicLinkForConnectedAccount is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) GetConnectedAccountAuth(context.Context, *connect.Request[connected_accounts.GetConnectedAccountByIdentifierRequest]) (*connect.Response[connected_accounts.GetConnectedAccountByIdentifierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.GetConnectedAccountAuth is not implemented"))
}

func (UnimplementedConnectedAccountServiceHandler) GetMagicLinkForConnectedAccountWithRedirect(context.Context, *connect.Request[connected_accounts.GetMagicLinkForConnectedAccountRedirectRequest]) (*connect.Response[connected_accounts.GetMagicLinkForConnectedAccountRedirectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scalekit.v1.connected_accounts.ConnectedAccountService.GetMagicLinkForConnectedAccountWithRedirect is not implemented"))
}
