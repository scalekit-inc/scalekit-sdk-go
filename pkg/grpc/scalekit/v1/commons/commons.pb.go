// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: scalekit/v1/commons/commons.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegionCode int32

const (
	// If the region code is unspecified the selected region will automatically be decided based on the origin of the call.
	RegionCode_REGION_CODE_UNSPECIFIED RegionCode = 0
	RegionCode_US                      RegionCode = 1
	RegionCode_EU                      RegionCode = 2
)

// Enum value maps for RegionCode.
var (
	RegionCode_name = map[int32]string{
		0: "REGION_CODE_UNSPECIFIED",
		1: "US",
		2: "EU",
	}
	RegionCode_value = map[string]int32{
		"REGION_CODE_UNSPECIFIED": 0,
		"US":                      1,
		"EU":                      2,
	}
)

func (x RegionCode) Enum() *RegionCode {
	p := new(RegionCode)
	*p = x
	return p
}

func (x RegionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_commons_commons_proto_enumTypes[0].Descriptor()
}

func (RegionCode) Type() protoreflect.EnumType {
	return &file_scalekit_v1_commons_commons_proto_enumTypes[0]
}

func (x RegionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegionCode.Descriptor instead.
func (RegionCode) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_commons_commons_proto_rawDescGZIP(), []int{0}
}

type MembershipStatus int32

const (
	MembershipStatus_Membership_Status_UNSPECIFIED MembershipStatus = 0
	MembershipStatus_ACTIVE                        MembershipStatus = 1
	MembershipStatus_INACTIVE                      MembershipStatus = 2
	MembershipStatus_PENDING_INVITE                MembershipStatus = 3
)

// Enum value maps for MembershipStatus.
var (
	MembershipStatus_name = map[int32]string{
		0: "Membership_Status_UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "PENDING_INVITE",
	}
	MembershipStatus_value = map[string]int32{
		"Membership_Status_UNSPECIFIED": 0,
		"ACTIVE":                        1,
		"INACTIVE":                      2,
		"PENDING_INVITE":                3,
	}
)

func (x MembershipStatus) Enum() *MembershipStatus {
	p := new(MembershipStatus)
	*p = x
	return p
}

func (x MembershipStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_commons_commons_proto_enumTypes[1].Descriptor()
}

func (MembershipStatus) Type() protoreflect.EnumType {
	return &file_scalekit_v1_commons_commons_proto_enumTypes[1]
}

func (x MembershipStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipStatus.Descriptor instead.
func (MembershipStatus) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_commons_commons_proto_rawDescGZIP(), []int{1}
}

type IdentityProviderType int32

const (
	IdentityProviderType_IDENTITY_PROVIDER_UNSPECIFIED IdentityProviderType = 0
	IdentityProviderType_OKTA                          IdentityProviderType = 1
	IdentityProviderType_GOOGLE                        IdentityProviderType = 2
	IdentityProviderType_MICROSOFT_AD                  IdentityProviderType = 3
	IdentityProviderType_AUTH0                         IdentityProviderType = 4
	IdentityProviderType_ONELOGIN                      IdentityProviderType = 5
	IdentityProviderType_PING_IDENTITY                 IdentityProviderType = 6
	IdentityProviderType_JUMPCLOUD                     IdentityProviderType = 7
	IdentityProviderType_CUSTOM                        IdentityProviderType = 8
	IdentityProviderType_GITHUB                        IdentityProviderType = 9
	IdentityProviderType_GITLAB                        IdentityProviderType = 10
	IdentityProviderType_LINKEDIN                      IdentityProviderType = 11
	IdentityProviderType_SALESFORCE                    IdentityProviderType = 12
	IdentityProviderType_MICROSOFT                     IdentityProviderType = 13
	IdentityProviderType_IDP_SIMULATOR                 IdentityProviderType = 14
	IdentityProviderType_SCALEKIT                      IdentityProviderType = 15
	IdentityProviderType_ADFS                          IdentityProviderType = 16
)

// Enum value maps for IdentityProviderType.
var (
	IdentityProviderType_name = map[int32]string{
		0:  "IDENTITY_PROVIDER_UNSPECIFIED",
		1:  "OKTA",
		2:  "GOOGLE",
		3:  "MICROSOFT_AD",
		4:  "AUTH0",
		5:  "ONELOGIN",
		6:  "PING_IDENTITY",
		7:  "JUMPCLOUD",
		8:  "CUSTOM",
		9:  "GITHUB",
		10: "GITLAB",
		11: "LINKEDIN",
		12: "SALESFORCE",
		13: "MICROSOFT",
		14: "IDP_SIMULATOR",
		15: "SCALEKIT",
		16: "ADFS",
	}
	IdentityProviderType_value = map[string]int32{
		"IDENTITY_PROVIDER_UNSPECIFIED": 0,
		"OKTA":                          1,
		"GOOGLE":                        2,
		"MICROSOFT_AD":                  3,
		"AUTH0":                         4,
		"ONELOGIN":                      5,
		"PING_IDENTITY":                 6,
		"JUMPCLOUD":                     7,
		"CUSTOM":                        8,
		"GITHUB":                        9,
		"GITLAB":                        10,
		"LINKEDIN":                      11,
		"SALESFORCE":                    12,
		"MICROSOFT":                     13,
		"IDP_SIMULATOR":                 14,
		"SCALEKIT":                      15,
		"ADFS":                          16,
	}
)

func (x IdentityProviderType) Enum() *IdentityProviderType {
	p := new(IdentityProviderType)
	*p = x
	return p
}

func (x IdentityProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_scalekit_v1_commons_commons_proto_enumTypes[2].Descriptor()
}

func (IdentityProviderType) Type() protoreflect.EnumType {
	return &file_scalekit_v1_commons_commons_proto_enumTypes[2]
}

func (x IdentityProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityProviderType.Descriptor instead.
func (IdentityProviderType) EnumDescriptor() ([]byte, []int) {
	return file_scalekit_v1_commons_commons_proto_rawDescGZIP(), []int{2}
}

type OrganizationMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId          string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	JoinTime                *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	MembershipStatus        MembershipStatus       `protobuf:"varint,3,opt,name=membership_status,json=membershipStatus,proto3,enum=scalekit.v1.commons.MembershipStatus" json:"membership_status,omitempty"`
	Roles                   []*Role                `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	Name                    *string                `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PrimaryIdentityProvider IdentityProviderType   `protobuf:"varint,6,opt,name=primary_identity_provider,json=primaryIdentityProvider,proto3,enum=scalekit.v1.commons.IdentityProviderType" json:"primary_identity_provider,omitempty"`
	Metadata                map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OrganizationMembership) Reset() {
	*x = OrganizationMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_commons_commons_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationMembership) ProtoMessage() {}

func (x *OrganizationMembership) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_commons_commons_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationMembership.ProtoReflect.Descriptor instead.
func (*OrganizationMembership) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_commons_commons_proto_rawDescGZIP(), []int{0}
}

func (x *OrganizationMembership) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrganizationMembership) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *OrganizationMembership) GetMembershipStatus() MembershipStatus {
	if x != nil {
		return x.MembershipStatus
	}
	return MembershipStatus_Membership_Status_UNSPECIFIED
}

func (x *OrganizationMembership) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *OrganizationMembership) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrganizationMembership) GetPrimaryIdentityProvider() IdentityProviderType {
	if x != nil {
		return x.PrimaryIdentityProvider
	}
	return IdentityProviderType_IDENTITY_PROVIDER_UNSPECIFIED
}

func (x *OrganizationMembership) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_commons_commons_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_commons_commons_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_commons_commons_proto_rawDescGZIP(), []int{1}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName        string            `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName         string            `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Name             string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Locale           string            `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	EmailVerified    bool              `protobuf:"varint,6,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	PhoneNumber      string            `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Metadata         map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomAttributes map[string]string `protobuf:"bytes,9,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scalekit_v1_commons_commons_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_scalekit_v1_commons_commons_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_scalekit_v1_commons_commons_proto_rawDescGZIP(), []int{2}
}

func (x *UserProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProfile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserProfile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserProfile) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *UserProfile) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserProfile) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserProfile) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserProfile) GetCustomAttributes() map[string]string {
	if x != nil {
		return x.CustomAttributes
	}
	return nil
}

var File_scalekit_v1_commons_commons_proto protoreflect.FileDescriptor

var file_scalekit_v1_commons_commons_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x07, 0x0a, 0x16, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d,
	0x92, 0x41, 0x5a, 0x32, 0x40, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x2d,
	0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x4a, 0x16, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x31, 0x32, 0x33, 0x34,
	0x61, 0x62, 0x63, 0x64, 0x35, 0x36, 0x37, 0x38, 0x65, 0x66, 0x67, 0x68, 0x22, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x89, 0x01,
	0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x50, 0x92,
	0x41, 0x4d, 0x32, 0x4b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x94,
	0x02, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xbc, 0x01, 0x92,
	0x41, 0x9f, 0x01, 0x32, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x6b, 0x65, 0x79, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x20, 0x4b, 0x65, 0x79, 0x73, 0x20, 0x28, 0x33, 0x2d, 0x32, 0x35, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x73, 0x29, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28, 0x31, 0x2d, 0x32, 0x35,
	0x36, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x29, 0x2e, 0x4a, 0x37, 0x7b, 0x22, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x20, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x79, 0x63, 0x2d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x22, 0x7d, 0xba, 0x48, 0x16, 0x9a, 0x01, 0x13, 0x10, 0x14, 0x22, 0x06, 0x72, 0x04, 0x10, 0x03,
	0x18, 0x19, 0x2a, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x0c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x79, 0x92, 0x41, 0x73, 0x32, 0x51, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x20, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x4a, 0x1e, 0x22, 0x75,
	0x73, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x31, 0x32, 0x33, 0x34, 0x61,
	0x62, 0x63, 0x64, 0x35, 0x36, 0x37, 0x38, 0x65, 0x66, 0x67, 0x68, 0x22, 0xe0, 0x41, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x34, 0x32, 0x2a, 0x55, 0x73,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x20, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x32, 0x30, 0x30, 0x20, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x06, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x22,
	0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x34, 0x32, 0x2b, 0x55, 0x73, 0x65,
	0x72, 0x27, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x20, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x32, 0x30, 0x30, 0x20, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x05, 0x22, 0x44, 0x6f, 0x65, 0x22, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x76, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x62, 0x92, 0x41, 0x5f, 0x32, 0x49, 0x46, 0x75, 0x6c, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x20, 0x54, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a,
	0x12, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x20, 0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x20, 0x44,
	0x6f, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x53,
	0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x42, 0x43, 0x50, 0x2d, 0x34, 0x37, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x4a, 0x07, 0x22, 0x65, 0x6e, 0x2d, 0x55, 0x53, 0x22, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6b, 0x92,
	0x41, 0x65, 0x32, 0x5d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65,
	0x65, 0x6e, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x67, 0x92, 0x41, 0x64, 0x32, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x45, 0x2e, 0x31, 0x36, 0x34, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x53, 0x4d, 0x53, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x0e, 0x22, 0x2b, 0x31, 0x34, 0x31,
	0x35, 0x35, 0x35, 0x35, 0x32, 0x36, 0x37, 0x31, 0x22, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x87, 0x02, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xba, 0x01, 0x92, 0x41, 0x9d, 0x01,
	0x32, 0x5e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x20, 0x6b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x4b, 0x65, 0x79, 0x73, 0x20, 0x28, 0x33, 0x2d,
	0x32, 0x35, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x29, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x20, 0x28, 0x31, 0x2d, 0x32, 0x35, 0x36, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x29, 0x2e,
	0x4a, 0x3b, 0x7b, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x2c, 0x20, 0x22,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x22, 0x7d, 0xba, 0x48, 0x16,
	0x9a, 0x01, 0x13, 0x10, 0x1e, 0x22, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x19, 0x2a, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x9e, 0x02, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0xb8, 0x01, 0x92, 0x41, 0x9b, 0x01, 0x32, 0x5a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x4b,
	0x65, 0x79, 0x73, 0x20, 0x28, 0x33, 0x2d, 0x32, 0x35, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x29,
	0x2c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28, 0x31, 0x2d, 0x32, 0x35, 0x36, 0x20,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x29, 0x2e, 0x4a, 0x3d, 0x7b, 0x22, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x20, 0x22, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x22, 0x7d, 0xba, 0x48, 0x16, 0x9a, 0x01, 0x13, 0x10, 0x64, 0x22, 0x06,
	0x72, 0x04, 0x10, 0x03, 0x18, 0x19, 0x2a, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x39, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x55, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x55, 0x10, 0x02, 0x2a, 0x63,
	0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x10, 0x03, 0x2a, 0x98, 0x02, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x4b, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f,
	0x46, 0x54, 0x5f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x54, 0x48, 0x30,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x55, 0x4d, 0x50, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49,
	0x54, 0x4c, 0x41, 0x42, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,
	0x49, 0x4e, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46,
	0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x4b,
	0x49, 0x54, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x46, 0x53, 0x10, 0x10, 0x42, 0xdb,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d,
	0x69, 0x6e, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0xa2, 0x02, 0x03, 0x53, 0x56, 0x43, 0xaa, 0x02, 0x13, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x13, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0xe2, 0x02, 0x1f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x5c, 0x56, 0x31,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x6b, 0x69, 0x74, 0x3a,
	0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scalekit_v1_commons_commons_proto_rawDescOnce sync.Once
	file_scalekit_v1_commons_commons_proto_rawDescData = file_scalekit_v1_commons_commons_proto_rawDesc
)

func file_scalekit_v1_commons_commons_proto_rawDescGZIP() []byte {
	file_scalekit_v1_commons_commons_proto_rawDescOnce.Do(func() {
		file_scalekit_v1_commons_commons_proto_rawDescData = protoimpl.X.CompressGZIP(file_scalekit_v1_commons_commons_proto_rawDescData)
	})
	return file_scalekit_v1_commons_commons_proto_rawDescData
}

var file_scalekit_v1_commons_commons_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_scalekit_v1_commons_commons_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_scalekit_v1_commons_commons_proto_goTypes = []interface{}{
	(RegionCode)(0),                // 0: scalekit.v1.commons.RegionCode
	(MembershipStatus)(0),          // 1: scalekit.v1.commons.MembershipStatus
	(IdentityProviderType)(0),      // 2: scalekit.v1.commons.IdentityProviderType
	(*OrganizationMembership)(nil), // 3: scalekit.v1.commons.OrganizationMembership
	(*Role)(nil),                   // 4: scalekit.v1.commons.Role
	(*UserProfile)(nil),            // 5: scalekit.v1.commons.UserProfile
	nil,                            // 6: scalekit.v1.commons.OrganizationMembership.MetadataEntry
	nil,                            // 7: scalekit.v1.commons.UserProfile.MetadataEntry
	nil,                            // 8: scalekit.v1.commons.UserProfile.CustomAttributesEntry
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
}
var file_scalekit_v1_commons_commons_proto_depIdxs = []int32{
	9, // 0: scalekit.v1.commons.OrganizationMembership.join_time:type_name -> google.protobuf.Timestamp
	1, // 1: scalekit.v1.commons.OrganizationMembership.membership_status:type_name -> scalekit.v1.commons.MembershipStatus
	4, // 2: scalekit.v1.commons.OrganizationMembership.roles:type_name -> scalekit.v1.commons.Role
	2, // 3: scalekit.v1.commons.OrganizationMembership.primary_identity_provider:type_name -> scalekit.v1.commons.IdentityProviderType
	6, // 4: scalekit.v1.commons.OrganizationMembership.metadata:type_name -> scalekit.v1.commons.OrganizationMembership.MetadataEntry
	7, // 5: scalekit.v1.commons.UserProfile.metadata:type_name -> scalekit.v1.commons.UserProfile.MetadataEntry
	8, // 6: scalekit.v1.commons.UserProfile.custom_attributes:type_name -> scalekit.v1.commons.UserProfile.CustomAttributesEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_scalekit_v1_commons_commons_proto_init() }
func file_scalekit_v1_commons_commons_proto_init() {
	if File_scalekit_v1_commons_commons_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scalekit_v1_commons_commons_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_commons_commons_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scalekit_v1_commons_commons_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scalekit_v1_commons_commons_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scalekit_v1_commons_commons_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scalekit_v1_commons_commons_proto_goTypes,
		DependencyIndexes: file_scalekit_v1_commons_commons_proto_depIdxs,
		EnumInfos:         file_scalekit_v1_commons_commons_proto_enumTypes,
		MessageInfos:      file_scalekit_v1_commons_commons_proto_msgTypes,
	}.Build()
	File_scalekit_v1_commons_commons_proto = out.File
	file_scalekit_v1_commons_commons_proto_rawDesc = nil
	file_scalekit_v1_commons_commons_proto_goTypes = nil
	file_scalekit_v1_commons_commons_proto_depIdxs = nil
}
